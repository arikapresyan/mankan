{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(workGetCurrantTime),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetCurrantTime),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(_callee);\n\nimport { all, put, call, takeEvery } from 'redux-saga/effects';\nimport Axios from 'axios';\nimport { getCurrantTime, setCurrantTime } from './action';\n\nfunction workGetCurrantTime() {\n  var i, _yield$call, datetime, newTime;\n\n  return _regeneratorRuntime.wrap(function workGetCurrantTime$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          i = 0;\n\n        case 1:\n          if (!(i < 3)) {\n            _context.next = 19;\n            break;\n          }\n\n          _context.prev = 2;\n          _context.next = 5;\n          return call(Axios.request, {\n            url: 'http://worldtimeapi.org/api/timezone/Asia/Yerevan',\n            method: 'get'\n          });\n\n        case 5:\n          _yield$call = _context.sent;\n          datetime = _yield$call.data.datetime;\n          newTime = datetime.split('.')[0];\n          _context.next = 10;\n          return put(setCurrantTime({\n            currantTime: new Date(newTime)\n          }));\n\n        case 10:\n          return _context.abrupt(\"return\", true);\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](2);\n          console.log(_context.t0);\n\n        case 16:\n          i++;\n          _context.next = 1;\n          break;\n\n        case 19:\n          return _context.abrupt(\"return\", true);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 13]]);\n}\n\nfunction watchGetCurrantTime() {\n  return _regeneratorRuntime.wrap(function watchGetCurrantTime$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(getCurrantTime, workGetCurrantTime);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([watchGetCurrantTime()]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":null,"metadata":{},"sourceType":"module"}