{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { handleActions } from 'redux-actions';\nimport { loginSuccess, logoutSuccess, resetUserReducer, authorizationError, setLang, authorizationLoading, getUserDataLoading, getUserDataSuccess, getUserDataError } from './action';\nconst initialState = {\n  id: '',\n  email: '',\n  firstName: '',\n  lastName: '',\n  phone: '',\n  errorText: null,\n  lang: 'ARM',\n  loading: false,\n  authSuccess: false,\n  fetchingInitialUserData: true\n};\nexport default handleActions({\n  [loginSuccess]: (state, {\n    payload\n  }) => _objectSpread({}, state, {}, payload, {\n    loading: false,\n    authSuccess: true\n  }),\n  [authorizationError]: (state, {\n    payload: {\n      errorText\n    }\n  }) => _objectSpread({}, state, {\n    errorText,\n    loading: false,\n    authSuccess: false\n  }),\n  [setLang]: (state, {\n    payload: {\n      lang\n    }\n  }) => _objectSpread({}, state, {\n    lang\n  }),\n  [authorizationLoading]: store => _objectSpread({}, store, {\n    loading: true\n  }),\n  [getUserDataLoading]: store => _objectSpread({}, store, {\n    fetchingInitialUserData: true\n  }),\n  [getUserDataSuccess]: (store, {\n    payload\n  }) => _objectSpread({}, store, {\n    authSuccess: true,\n    fetchingInitialUserData: false\n  }, payload),\n  [getUserDataError]: state => _objectSpread({}, initialState, {\n    fetchingInitialUserData: false,\n    lang: state.lang\n  }),\n  [resetUserReducer]: () => _objectSpread({}, initialState, {\n    fetchingInitialUserData: false\n  }),\n  [logoutSuccess]: () => _objectSpread({}, initialState, {\n    fetchingInitialUserData: false\n  })\n}, initialState);\nexport const selectAuthorized = ({\n  user\n}) => user.authSuccess;\nexport const selectUser = ({\n  user\n}) => user;\nexport const selectLang = ({\n  user: {\n    lang\n  }\n}) => lang;","map":null,"metadata":{},"sourceType":"module"}