{"ast":null,"code":"export const sortDatesByNumArray = days => {\n  let today = new Date().getDay();\n  if (today === 0) today = 7;\n  const sortAvailableDates = [];\n  const todayIndex = days.indexOf(today);\n\n  if (todayIndex !== -1) {\n    sortAvailableDates.push(...days.slice(todayIndex, days.length), ...days.slice(0, todayIndex));\n  } else {\n    let pivotIndex = null;\n\n    for (let i = 0; i < days.length; i++) {\n      if (days[i] > today) {\n        pivotIndex = i;\n        break;\n      }\n    }\n\n    if (!pivotIndex) pivotIndex = 0;\n    sortAvailableDates.push(...days.slice(pivotIndex, days.length), ...days.slice(0, pivotIndex));\n  }\n\n  const datesArray = [];\n  sortAvailableDates.forEach(day => {\n    let daysAfter = 0;\n\n    if (day > today) {\n      daysAfter = day - today;\n    } else if (day < today) {\n      daysAfter = day + 7 - today;\n    }\n\n    datesArray.push(new Date(new Date().getTime() + daysAfter * (24 * 60 * 60 * 1000)));\n  });\n  return datesArray;\n};\n\nfunction getWeekString(today, otherDay, msg) {\n  let str = '';\n  let date1 = today;\n  date1 = new Date(date1).setHours(0);\n  date1 = new Date(date1).setMinutes(0);\n  date1 = new Date(date1).setSeconds(0);\n  date1 = new Date(date1).setMilliseconds(0);\n  let date2 = new Date(otherDay);\n  date2 = new Date(date2).setHours(0);\n  date2 = new Date(date2).setMinutes(0);\n  date2 = new Date(date2).setSeconds(0);\n  date2 = new Date(date2).setMilliseconds(0);\n  const diffTime = Math.abs(date2 - date1);\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n  if (diffDays === 0) {\n    str = msg['local.today'];\n  } else if (diffDays === 1) {\n    str = msg['local.tomorrow'];\n  } else {\n    str = otherDay.toLocaleDateString();\n  }\n\n  return str;\n}\n\nfunction transformTime(number) {\n  return `${number}`.length === 1 ? `0${number}` : number;\n}\n\nfunction getTime(startDate, endDate) {\n  const start = `${transformTime(new Date(startDate).getHours())}:${transformTime(new Date(startDate).getMinutes())}`;\n  const end = `${transformTime(new Date(endDate).getHours())}:${transformTime(new Date(endDate).getMinutes())}`;\n  return `${start}-${end}`;\n}\n\nfunction setDateTime(date, start) {\n  let currentDate = new Date(date);\n  const min = new Date(start).getMinutes();\n  const hours = new Date(start).getHours();\n  currentDate = new Date(currentDate.setMinutes(min));\n  currentDate = new Date(currentDate.setHours(hours));\n  return new Date(currentDate);\n}\n\nexport const getStringFromDates = (dates, dateInfo, msg) => {\n  const res = sortDatesByNumArray(dates).map(date => {\n    const timesArray = [];\n\n    for (let i = 0; i < 3; i++) {\n      if (!dateInfo.time[i]) break;\n\n      if (new Date().setHours(new Date().getHours() + 1) < new Date(dateInfo.time[i].start).setDate(date.getDate())) {\n        timesArray.push({\n          text: `${getWeekString(new Date(), date, msg)} ${getTime(dateInfo.time[i].start, dateInfo.time[i].end)}`,\n          date: setDateTime(date, new Date(dateInfo.time[i].start))\n        });\n      }\n    }\n\n    return timesArray;\n  });\n  const newRes = [];\n  res.forEach(r => {\n    newRes.push(...r);\n  });\n  return newRes;\n};","map":null,"metadata":{},"sourceType":"module"}