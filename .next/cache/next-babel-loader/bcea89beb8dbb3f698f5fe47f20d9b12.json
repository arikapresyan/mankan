{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-shadow */\n// eslint-disable-next-line no-unused-vars\nimport { useDispatch } from 'react-redux';\nimport { resetCartReducer, cartChangeProduct, changeCart } from './action';\nconst timersId = {};\n\nfunction useCartActions() {\n  const dispatch = useDispatch();\n\n  function cartAddProductAction(ids, redirect) {\n    dispatch(changeCart({\n      ids,\n      status: true,\n      redirect\n    }));\n  }\n\n  function cartRemoveProductAction(ids) {\n    dispatch(changeCart({\n      ids,\n      status: false\n    }));\n  }\n\n  function cartChangeProductAction(payload) {\n    dispatch(cartChangeProduct(_objectSpread({}, payload)));\n    clearTimeout(timersId[payload.id]);\n    timersId[payload.id] = setTimeout(() => {\n      const {\n        id,\n        changes: {\n          count\n        }\n      } = payload;\n      dispatch(changeCart({\n        ids: {\n          [id]: {\n            id,\n            count,\n            status: true\n          }\n        },\n        status: true\n      }));\n    }, 400);\n  }\n\n  function resetCartReducerAction() {\n    dispatch(resetCartReducer());\n  }\n\n  return {\n    cartAddProductAction,\n    cartChangeProductAction,\n    cartRemoveProductAction,\n    resetCartReducerAction\n  };\n}\n\nexport default useCartActions;","map":null,"metadata":{},"sourceType":"module"}