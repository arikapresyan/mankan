{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { put, takeLatest, select, call, all } from '@redux-saga/core/effects';\nimport { CancelToken } from 'axios';\nimport Axios from '../services/Axios';\nimport { catalogGet, catalogGetSuccess, catalogGetError } from './action';\nimport { clearFilters, selectCatalogFilters } from '../catalog-filter/reducer';\nimport { selectLang } from '../user/reducer';\nimport { catalogSetFilters } from '../catalog-filter/action';\nimport { CATALOG_PRODUCTS_LIMIT } from './constants';\nlet cancel; // eslint-disable-next-line require-yield\n\nfunction getFilteredDataRequest(data) {\n  return Axios.request({\n    url: '/api/product/fast',\n    method: 'post',\n    data,\n    cancelToken: new CancelToken(c => {\n      cancel = c;\n    })\n  });\n}\n\nfunction getKey(name) {\n  // brand productSex extraFilter productAge productType productUsage\n  switch (name) {\n    case 'age':\n      return 'productAge';\n\n    case 'gender':\n      return 'productSex';\n\n    case 'type':\n      return 'productType';\n\n    case 'brand':\n      return 'brand';\n\n    case 'meaning':\n      return 'productUsage';\n\n    case 'classification':\n      return 'extraFilter';\n\n    default:\n      return null;\n  }\n}\n\nfunction getBackKey(name) {\n  switch (name) {\n    case 'productAge':\n      return 'age';\n\n    case 'productSex':\n      return 'gender';\n\n    case 'productType':\n      return 'type';\n\n    case 'brand':\n      return 'brand';\n\n    case 'productUsage':\n      return 'meaning';\n\n    case 'extraFilter':\n      return 'classification';\n\n    default:\n      return null;\n  }\n}\n\nfunction* workCatalogGet({\n  payload\n}) {\n  try {\n    var _filterClone$gender, _filterClone$gender2, _filterClone$price, _filterClone$price2, _filterClone$classifi, _filterClone$classifi2, _filterClone$classifi3, _filterClone$classifi4, _filterClone$gender3;\n\n    const {\n      page,\n      name,\n      changedNames\n    } = payload || {}; // TODO: remove is triggered\n\n    const selectedPage = page || 1;\n    const filters = yield select(clearFilters);\n    const catalogFilters = yield select(selectCatalogFilters);\n    let lastFilters = {};\n    const filterName = getKey(name);\n\n    if (filterName) {\n      if (filterName && catalogFilters[filterName]) {\n        lastFilters = {\n          [filterName]: catalogFilters[filterName]\n        };\n      }\n    }\n\n    if (changedNames) {\n      changedNames.forEach(n => {\n        const fName = getKey(n);\n\n        if (fName) {\n          if (fName && catalogFilters[fName]) {\n            lastFilters[fName] = catalogFilters[fName];\n          }\n        }\n      });\n    } // brand productSex extraFilter productAge productType productUsage\n\n\n    filters.classification = filters.classification || []; // eslint-disable-next-line no-restricted-globals\n\n    const extraFilterIds = !isNaN(+filters.classification[0]) && filters.classification[0];\n    const filterClone = JSON.parse(JSON.stringify(filters));\n    const lastFilterKeys = [];\n    Object.keys(filterClone).forEach(key => {\n      const indexOfAll = filterClone[key].indexOf('all');\n      lastFilterKeys.push(getKey(key));\n\n      if (indexOfAll !== -1 || !filterClone[key].length) {\n        delete filterClone[key];\n        delete lastFilters[getKey(key)];\n      }\n    });\n    Object.keys(lastFilters).forEach(key => {\n      if (!filterClone[getBackKey(key)]) {\n        delete lastFilters[key];\n      }\n    });\n    const filterToSend = {\n      lang: yield select(selectLang),\n      limit: CATALOG_PRODUCTS_LIMIT,\n      offset: (selectedPage - 1) * CATALOG_PRODUCTS_LIMIT,\n      extraFilterIds,\n      typeIds: filterClone.type,\n      usageIds: filterClone.meaning,\n      ageIds: filterClone.age,\n      brandIds: filterClone.brand,\n      sex: ((_filterClone$gender = filterClone.gender) === null || _filterClone$gender === void 0 ? void 0 : _filterClone$gender[0]) !== 'ALL' ? filterClone === null || filterClone === void 0 ? void 0 : (_filterClone$gender2 = filterClone.gender) === null || _filterClone$gender2 === void 0 ? void 0 : _filterClone$gender2[0] : undefined,\n      minPrice: (filterClone === null || filterClone === void 0 ? void 0 : (_filterClone$price = filterClone.price) === null || _filterClone$price === void 0 ? void 0 : _filterClone$price[0]) || undefined,\n      maxPrice: (filterClone === null || filterClone === void 0 ? void 0 : (_filterClone$price2 = filterClone.price) === null || _filterClone$price2 === void 0 ? void 0 : _filterClone$price2[1]) || undefined,\n      percent: (filterClone === null || filterClone === void 0 ? void 0 : (_filterClone$classifi = filterClone.classification) === null || _filterClone$classifi === void 0 ? void 0 : _filterClone$classifi[0]) === 'percent',\n      bestSeller: (filterClone === null || filterClone === void 0 ? void 0 : (_filterClone$classifi2 = filterClone.classification) === null || _filterClone$classifi2 === void 0 ? void 0 : _filterClone$classifi2[0]) === 'bestSeller',\n      isNew: (filterClone === null || filterClone === void 0 ? void 0 : (_filterClone$classifi3 = filterClone.classification) === null || _filterClone$classifi3 === void 0 ? void 0 : _filterClone$classifi3[0]) === 'isNew',\n      priceByAsc: (filterClone === null || filterClone === void 0 ? void 0 : (_filterClone$classifi4 = filterClone.classification) === null || _filterClone$classifi4 === void 0 ? void 0 : _filterClone$classifi4[0]) === 'priceByAsc',\n      searchWord: catalogFilters.searchWord\n    };\n\n    if (Array.isArray((_filterClone$gender3 = filterClone.gender) === null || _filterClone$gender3 === void 0 ? void 0 : _filterClone$gender3[0])) {\n      delete filterToSend.sex;\n    }\n\n    if (cancel !== undefined) {\n      cancel();\n    }\n\n    const {\n      data: {\n        filters: newFilters\n      }\n    } = yield call(getFilteredDataRequest, filterToSend),\n          restData = _objectWithoutProperties((yield call(getFilteredDataRequest, filterToSend)).data, [\"filters\"]);\n\n    yield all([put(catalogGetSuccess({\n      products: restData.result.rows,\n      pagesCount: restData.pages,\n      page: selectedPage\n    }))]);\n\n    if (restData.result.rows.length > 0) {\n      yield put(catalogSetFilters({\n        filters: _objectSpread({\n          productAge: newFilters.age,\n          productType: newFilters.type,\n          productSex: newFilters.productSex,\n          extraFilter: newFilters.extraFilter,\n          productUsage: newFilters.usage,\n          brand: newFilters.brand,\n          searchWord: catalogFilters.searchWord\n        }, lastFilters)\n      }));\n    }\n  } catch (error) {\n    yield put(catalogGetError());\n  }\n}\n\nfunction* watchCatalogGet() {\n  yield takeLatest(catalogGet, workCatalogGet);\n}\n\nexport { watchCatalogGet, workCatalogGet };","map":null,"metadata":{},"sourceType":"module"}