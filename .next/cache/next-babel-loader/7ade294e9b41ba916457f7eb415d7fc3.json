{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nexport var sortDatesByNumArray = function sortDatesByNumArray(days) {\n  var today = new Date().getDay();\n  if (today === 0) today = 7;\n  var sortAvailableDates = [];\n  var todayIndex = days.indexOf(today);\n\n  if (todayIndex !== -1) {\n    sortAvailableDates.push.apply(sortAvailableDates, _toConsumableArray(days.slice(todayIndex, days.length)).concat(_toConsumableArray(days.slice(0, todayIndex))));\n  } else {\n    var pivotIndex = null;\n\n    for (var i = 0; i < days.length; i++) {\n      if (days[i] > today) {\n        pivotIndex = i;\n        break;\n      }\n    }\n\n    if (!pivotIndex) pivotIndex = 0;\n    sortAvailableDates.push.apply(sortAvailableDates, _toConsumableArray(days.slice(pivotIndex, days.length)).concat(_toConsumableArray(days.slice(0, pivotIndex))));\n  }\n\n  var datesArray = [];\n  sortAvailableDates.forEach(function (day) {\n    var daysAfter = 0;\n\n    if (day > today) {\n      daysAfter = day - today;\n    } else if (day < today) {\n      daysAfter = day + 7 - today;\n    }\n\n    datesArray.push(new Date(new Date().getTime() + daysAfter * (24 * 60 * 60 * 1000)));\n  });\n  return datesArray;\n};\n\nfunction getWeekString(today, otherDay, msg) {\n  var str = '';\n  var date1 = today;\n  date1 = new Date(date1).setHours(0);\n  date1 = new Date(date1).setMinutes(0);\n  date1 = new Date(date1).setSeconds(0);\n  date1 = new Date(date1).setMilliseconds(0);\n  var date2 = new Date(otherDay);\n  date2 = new Date(date2).setHours(0);\n  date2 = new Date(date2).setMinutes(0);\n  date2 = new Date(date2).setSeconds(0);\n  date2 = new Date(date2).setMilliseconds(0);\n  var diffTime = Math.abs(date2 - date1);\n  var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n  if (diffDays === 0) {\n    str = msg['local.today'];\n  } else if (diffDays === 1) {\n    str = msg['local.tomorrow'];\n  } else {\n    str = otherDay.toLocaleDateString();\n  }\n\n  return str;\n}\n\nfunction transformTime(number) {\n  return \"\".concat(number).length === 1 ? \"0\".concat(number) : number;\n}\n\nfunction getTime(startDate, endDate) {\n  var start = \"\".concat(transformTime(new Date(startDate).getHours()), \":\").concat(transformTime(new Date(startDate).getMinutes()));\n  var end = \"\".concat(transformTime(new Date(endDate).getHours()), \":\").concat(transformTime(new Date(endDate).getMinutes()));\n  return \"\".concat(start, \"-\").concat(end);\n}\n\nfunction setDateTime(date, start) {\n  var currentDate = new Date(date);\n  var min = new Date(start).getMinutes();\n  var hours = new Date(start).getHours();\n  currentDate = new Date(currentDate.setMinutes(min));\n  currentDate = new Date(currentDate.setHours(hours));\n  return new Date(currentDate);\n}\n\nexport var getStringFromDates = function getStringFromDates(dates, dateInfo, msg, newCurrantDate) {\n  var res = sortDatesByNumArray(dates).map(function (date) {\n    var timesArray = [];\n\n    for (var i = 0; i < 3; i++) {\n      if (!dateInfo.time[i]) break;\n      var nowPlusHour = newCurrantDate.setHours(newCurrantDate.getHours() + 1);\n      var dataBaseTime = new Date(dateInfo.time[i].start).setDate(date.getDate());\n\n      if (nowPlusHour < dataBaseTime) {\n        timesArray.push({\n          text: \"\".concat(getWeekString(new Date(), date, msg), \" \").concat(getTime(dateInfo.time[i].start, dateInfo.time[i].end)),\n          date: setDateTime(date, new Date(dateInfo.time[i].start))\n        });\n      }\n    }\n\n    return timesArray;\n  });\n  var newRes = [];\n  res.forEach(function (r) {\n    newRes.push.apply(newRes, _toConsumableArray(r));\n  });\n  return newRes;\n};","map":null,"metadata":{},"sourceType":"module"}