{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { handleActions } from 'redux-actions';\nimport { getSlides, getSlidesSuccess, getSlidesError } from './actions';\nconst initialState = {\n  data: [],\n  error: false,\n  loading: true\n};\nexport default handleActions({\n  [getSlides]: state => _objectSpread({}, state, {\n    loading: true,\n    error: false\n  }),\n  [getSlidesSuccess]: (state, {\n    payload: {\n      data\n    }\n  }) => ({\n    data,\n    loading: false,\n    error: false\n  }),\n  [getSlidesError]: state => _objectSpread({}, state, {\n    loading: false,\n    error: true\n  })\n}, initialState);","map":null,"metadata":{},"sourceType":"module"}