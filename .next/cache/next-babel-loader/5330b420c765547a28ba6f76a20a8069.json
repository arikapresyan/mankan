{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport Router from 'next/router';\nimport { selectRedirectRoute } from '../../store/change-page/reducer';\nexport default function useHeader({\n  toggleVisibilityAction,\n  hideAction,\n  fixedSearchVisible\n}) {\n  const headerRef = useRef(null);\n  const {\n    0: fixedNavVisible,\n    1: setFixedNavVisible\n  } = useState(false);\n  const {\n    messages\n  } = useIntl();\n  const redirectRoute = useSelector(selectRedirectRoute);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    isMenuOpen: false\n  });\n  useEffect(() => {\n    if (redirectRoute.route) {\n      Router.push(redirectRoute.route);\n    }\n  }, [redirectRoute]);\n  useEffect(() => {\n    if (!fixedNavVisible && fixedSearchVisible) {\n      hideAction({\n        name: 'fixedSearchVisible'\n      });\n    }\n  }, [fixedNavVisible]);\n  useEffect(() => {\n    const header = headerRef.current;\n\n    const detectMenuVisibility = () => {\n      const {\n        bottom\n      } = header.getBoundingClientRect();\n\n      if (bottom < 30) {\n        setFixedNavVisible(true);\n      } else {\n        setFixedNavVisible(false);\n      }\n    };\n\n    detectMenuVisibility();\n\n    const scrollEventHandler = e => {\n      e.preventDefault();\n      detectMenuVisibility();\n    };\n\n    const clickEventHandler = e => {\n      if (!e.target.closest('.search_container.open') && fixedSearchVisible) {\n        hideAction({\n          name: 'fixedSearchVisible'\n        });\n      }\n    };\n\n    window.addEventListener('scroll', scrollEventHandler);\n    window.addEventListener('click', clickEventHandler);\n    return () => {\n      window.removeEventListener('scroll', scrollEventHandler);\n      window.removeEventListener('click', clickEventHandler);\n    };\n  }, []);\n\n  const setRegistrationVisible = () => {\n    toggleVisibilityAction({\n      name: 'registrationVisible'\n    });\n  };\n\n  const hideLogin = () => {\n    toggleVisibilityAction({\n      name: 'loginVisible'\n    });\n  };\n\n  const handleOnHideModal = name => {\n    hideAction({\n      name\n    });\n  };\n\n  const handleOnOpenModals = name => {\n    toggleVisibilityAction({\n      name\n    });\n  };\n\n  const handleOnForgotPassword = () => {\n    hideAction({\n      name: 'loginVisible'\n    });\n    toggleVisibilityAction({\n      name: 'forgotVisible'\n    });\n  };\n\n  const handleOnLoginOpen = () => {\n    toggleVisibilityAction({\n      name: 'loginVisible'\n    });\n  };\n\n  const handleMoveToRegistration = callBack => {\n    hideAction({\n      name: 'loginVisible'\n    });\n    callBack();\n  };\n\n  const handleMenuToggle = () => {\n    setState({\n      isMenuOpen: !state.isMenuOpen\n    });\n  };\n\n  const handleToggleSearchVisibility = () => {\n    toggleVisibilityAction({\n      name: 'fixedSearchVisible'\n    });\n  };\n\n  return {\n    headerRef,\n    handleMenuToggle,\n    handleToggleSearchVisibility,\n    handleMoveToRegistration,\n    handleOnLoginOpen,\n    fixedNavVisible,\n    messages,\n    setRegistrationVisible,\n    hideLogin,\n    handleOnHideModal,\n    handleOnOpenModals,\n    handleOnForgotPassword,\n    state\n  };\n}","map":null,"metadata":{},"sourceType":"module"}