{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, put, call, takeEvery, select } from 'redux-saga/effects';\nimport Axios from '../services/Axios';\nimport { getSingleData, getSingleDataError, getSingleDataSuccess, resetSingleData } from './action';\nimport { selectLang } from '../user/reducer';\n\nasync function getPaymentDeliveryRequest() {\n  const {\n    data: {\n      result: {\n        week: days,\n        time\n      }\n    }\n  } = await Axios.request({\n    method: 'get',\n    url: '/api/user/deliveryWeekTime'\n  });\n\n  try {\n    const res = {\n      time: time.map(tameStr => {\n        const [hour, min] = tameStr.split(':');\n        const start = new Date(new Date().setHours(hour, min));\n        const end = new Date(new Date().setHours(+hour === 24 ? 1 : +hour + 1, min));\n        return {\n          start,\n          end\n        };\n      }),\n      days\n    };\n    return res;\n  } catch (e) {\n    return null;\n  }\n}\n\nasync function getPromoCode(promoCode) {\n  const {\n    data: {\n      result\n    }\n  } = await Axios({\n    method: 'get',\n    url: `/api/user/promoCode/${promoCode}`\n  });\n  return result;\n}\n\nasync function getUsages(data) {\n  const response = await Axios({\n    method: 'post',\n    url: '/api/product/usage',\n    data: {\n      lang: data.lang\n    }\n  });\n  return response.data.result;\n}\n\nasync function getRequest(data) {\n  let res;\n\n  switch (data.name) {\n    case 'paymentDelivery':\n      res = await getPaymentDeliveryRequest();\n      return res;\n\n    case 'promoCode':\n      res = await getPromoCode(data.promoCode);\n      return res;\n\n    case 'usage':\n      res = await getUsages(data);\n      return res;\n\n    default:\n      return null;\n  }\n}\n\nfunction* workGetSingleData({\n  payload: {\n    data\n  }\n}) {\n  try {\n    const lang = yield select(selectLang);\n    const result = yield call(getRequest, _objectSpread({}, data, {\n      lang\n    }));\n    yield put(getSingleDataSuccess({\n      data: result,\n      name: data.name\n    }));\n  } catch (error) {\n    yield put(getSingleDataError({\n      name: data.name\n    }));\n  } finally {\n    yield put(resetSingleData({\n      name: data.name\n    }));\n  }\n}\n\nfunction* watchGetSingleData() {\n  yield takeEvery(getSingleData, workGetSingleData);\n}\n\nexport default function* () {\n  yield all([watchGetSingleData()]);\n}","map":null,"metadata":{},"sourceType":"module"}