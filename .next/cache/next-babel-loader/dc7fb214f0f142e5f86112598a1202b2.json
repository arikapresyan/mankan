{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Form, Col, DatePicker, Checkbox, Button, Icon } from 'antd';\nimport { useIntl } from 'react-intl';\nimport InputFieldWidthLocalState from '../../../../../common/InputFieldWidthLocalState';\n\nfunction Experience(_ref) {\n  var fields = _ref.fields,\n      changeValue = _ref.changeValue,\n      inProcessText = _ref.inProcessText,\n      addText = _ref.addText,\n      formName = _ref.formName,\n      data = _ref.data,\n      addSubForm = _ref.addSubForm,\n      removeSubForm = _ref.removeSubForm,\n      errors = _ref.errors,\n      touched = _ref.touched;\n\n  var _useIntl = useIntl(),\n      messages = _useIntl.messages;\n\n  return __jsx(React.Fragment, null, data.map(function (dataItem, index) {\n    return __jsx(\"div\", {\n      key: \"\".concat(dataItem.id, \"experience\")\n    }, fields.map(function (_ref2, childeIndex) {\n      var title = _ref2.title,\n          placeholder = _ref2.placeholder,\n          name = _ref2.name;\n      return __jsx(Col, {\n        xs: 24,\n        key: \"\".concat(\"\".concat(dataItem.id, \"experience\"), childeIndex)\n      }, __jsx(Form.Item, {\n        label: title,\n        validateStatus: touched && touched[index] && touched[index][name] && errors && errors[index] && errors[index][name] && 'error',\n        help: touched && touched[index] && touched[index][name] && errors && errors[index] && errors[index][name]\n      }, __jsx(InputFieldWidthLocalState, {\n        placeholder: placeholder,\n        name: name,\n        onBlur: function onBlur(_ref3) {\n          var value = _ref3.target.value;\n          return changeValue(value, formName, name, index);\n        },\n        defaultValue: dataItem[name]\n      })));\n    }), __jsx(Col, {\n      xs: 24,\n      md: 12\n    }, __jsx(Form.Item, {\n      label: messages['local.startpoint'],\n      validateStatus: touched && touched[index] && touched[index].startDate && errors && errors[index] && errors[index].startDate && 'error',\n      help: touched && touched[index] && touched[index].startDate && errors && errors[index] && errors[index].startDate\n    }, __jsx(DatePicker, {\n      value: dataItem.startDate || undefined,\n      onChange: function onChange(value) {\n        return changeValue(value, formName, 'startDate', index);\n      }\n    }))), __jsx(Col, {\n      xs: 24,\n      md: 12\n    }, !dataItem.stillInProcess ? __jsx(Form.Item, {\n      label: messages['local.endpoint'],\n      validateStatus: touched && touched[index] && touched[index].endDate && errors && errors[index] && errors[index].endDate && 'error',\n      help: touched && touched[index] && touched[index].endDate && errors && errors[index] && errors[index].endDate\n    }, __jsx(DatePicker, {\n      onChange: function onChange(value) {\n        return changeValue(value, formName, 'endDate', index);\n      },\n      value: dataItem.endDate || undefined\n    })) : null), __jsx(Col, {\n      xs: 24\n    }, __jsx(Form.Item, null, __jsx(Checkbox, {\n      onChange: function onChange(_ref4) {\n        var checked = _ref4.target.checked;\n        return changeValue(checked, formName, 'stillInProcess', index);\n      },\n      checked: !!dataItem.stillInProcess\n    }, inProcessText)), index > 0 && __jsx(\"button\", {\n      type: \"button\",\n      onClick: function onClick() {\n        return removeSubForm(formName, index);\n      }\n    }, \"remove\")));\n  }), __jsx(Col, {\n    xs: 24\n  }, __jsx(Form.Item, null, __jsx(Button, {\n    type: \"dashed\",\n    onClick: function onClick() {\n      return addSubForm(formName);\n    }\n  }, __jsx(Icon, {\n    type: \"plus\"\n  }), ' ', addText))));\n}\n\nexport default Experience;","map":null,"metadata":{},"sourceType":"module"}