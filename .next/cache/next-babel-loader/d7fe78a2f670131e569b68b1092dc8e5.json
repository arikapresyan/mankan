{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { handleActions } from 'redux-actions';\nimport keys from '../../constants/keys';\nimport { catalogFilterChange, catalogFilterChangeSuccess, catalogFilterChangeError, resetCatalogFilterReducer, catalogFilterSetValues, catalogSetFilters, resetFilterView } from './action';\nconst initialState = {\n  classification: [],\n  price: [],\n  gender: [],\n  age: [],\n  type: [],\n  meaning: [],\n  brand: [],\n  isUserFilter: false,\n  loading: false,\n  filters: {\n    brand: {},\n    productSex: {},\n    extraFilter: {},\n    productAge: {},\n    productType: {},\n    productUsage: {}\n  }\n};\nexport default handleActions({\n  [catalogFilterChangeSuccess]: (state, {\n    payload: {\n      name,\n      value\n    }\n  }) => _objectSpread({}, state, {\n    [name]: value,\n    loading: false\n  }),\n  [catalogFilterSetValues]: (state, {\n    payload\n  }) => _objectSpread({}, state, {}, payload, {\n    loading: false\n  }),\n  [resetFilterView]: (state, {\n    payload: {\n      exception\n    }\n  }) => _objectSpread({}, state, {\n    classification: [],\n    price: [],\n    gender: [],\n    age: [],\n    type: [],\n    meaning: [],\n    brand: [],\n    [exception]: state[exception]\n  }),\n  [catalogFilterChange]: state => _objectSpread({}, state, {\n    loading: true\n  }),\n  [catalogSetFilters]: (state, {\n    payload: {\n      filters\n    }\n  }) => _objectSpread({}, state, {\n    filters\n  }),\n  [resetCatalogFilterReducer]: () => initialState,\n  [catalogFilterChangeError]: () => initialState\n}, initialState);\nexport const clearFilters = store => {\n  const filters = _objectSpread({}, store.catalogFilter);\n\n  const keysArray = Object.keys(filters);\n  keysArray.forEach(key => {\n    if (!filters[key].length) {\n      delete filters[key];\n    }\n  });\n  return filters;\n};\nexport const getIsUserFilter = store => !!store.catalogFilter.isUserFilter;\nexport const selectCatalogFilters = ({\n  catalogFilter\n}) => catalogFilter.filters;\nexport const getCatalogFilterByName = name => ({\n  catalogFilter\n}) => catalogFilter[name];","map":null,"metadata":{},"sourceType":"module"}