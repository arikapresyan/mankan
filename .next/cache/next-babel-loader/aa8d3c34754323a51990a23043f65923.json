{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-shadow */\n// eslint-disable-next-line no-unused-vars\nimport { useDispatch } from 'react-redux';\nimport message from 'antd/lib/message';\nimport { useIntl } from 'react-intl';\nimport { resetCartReducer, cartChangeProduct, changeCart } from './action';\nvar timersId = {};\n\nfunction useCartActions() {\n  var dispatch = useDispatch();\n\n  var _useIntl = useIntl(),\n      messages = _useIntl.messages;\n\n  function cartAddProductAction(ids, redirect) {\n    dispatch(changeCart({\n      ids: ids,\n      status: true,\n      redirect: redirect\n    }));\n\n    if (redirect !== true) {\n      message.success(messages['local.cart_added_success']);\n    }\n  }\n\n  function cartRemoveProductAction(ids) {\n    dispatch(changeCart({\n      ids: ids,\n      status: false\n    }));\n  }\n\n  function cartChangeProductAction(payload) {\n    dispatch(cartChangeProduct(_objectSpread({}, payload)));\n    clearTimeout(timersId[payload.id]);\n    timersId[payload.id] = setTimeout(function () {\n      var id = payload.id,\n          count = payload.changes.count;\n      dispatch(changeCart({\n        ids: _defineProperty({}, id, {\n          id: id,\n          count: count,\n          status: true\n        }),\n        status: true\n      }));\n    }, 400);\n  }\n\n  function resetCartReducerAction() {\n    dispatch(resetCartReducer());\n  }\n\n  return {\n    cartAddProductAction: cartAddProductAction,\n    cartChangeProductAction: cartChangeProductAction,\n    cartRemoveProductAction: cartRemoveProductAction,\n    resetCartReducerAction: resetCartReducerAction\n  };\n}\n\nexport default useCartActions;","map":null,"metadata":{},"sourceType":"module"}