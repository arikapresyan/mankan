{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport useGlobalAPI from '../../../hooks/useGlobalAPI';\nimport userAPI from '../../../API_Paths/userAPI';\nimport { getUserDataSuccess } from '../../../store/user/action';\nimport { getChangeInfoSchema } from '../../../utils/validationSchemas';\nexport default function usePersonalInfo(_ref) {\n  var APISendAction = _ref.APISendAction,\n      user = _ref.user;\n\n  var _useIntl = useIntl(),\n      messages = _useIntl.messages;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var dispatch = useDispatch();\n  var validationSchema = useMemo(function () {\n    return getChangeInfoSchema(messages);\n  }, [messages]);\n  var formik = useFormik({\n    initialValues: {\n      firstName: user.firstName,\n      lastName: user.lastName,\n      changePassMode: false,\n      retryPassword: '',\n      password: '',\n      phone: user.phone,\n      email: user.email\n    },\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values, _ref2) {\n      var setSubmitting = _ref2.setSubmitting;\n      var confirmMessage = values.email === user.email ? 'success' : messages['local.confirmEmail'];\n\n      var data = _objectSpread({}, values);\n\n      if (!values.password || !values.password.trim()) {\n        delete data.password;\n        delete data.retryPassword;\n      }\n\n      setLoading(true);\n      APISendAction({\n        method: 'put',\n        url: userAPI.change_userInfo,\n        successText: confirmMessage,\n        data: _objectSpread({}, data)\n      });\n      setSubmitting(false);\n    }\n  });\n  var setFieldValue = formik.setFieldValue,\n      values = formik.values,\n      handleChange = formik.handleChange,\n      handleBlur = formik.handleBlur,\n      handleSubmit = formik.handleSubmit,\n      errors = formik.errors,\n      touched = formik.touched;\n  useGlobalAPI({\n    onCancel: function onCancel() {\n      return setLoading(false);\n    },\n    onSuccess: function onSuccess() {\n      // setIsChangedEmail(values.email !== user.email);\n      // if (values.email !== user.email) message.success(messages['local.confirmEmail']);\n      dispatch(getUserDataSuccess({\n        firstName: values.firstName,\n        lastName: values.lastName,\n        phone: values.phone\n      }));\n      setLoading(false);\n    }\n  });\n\n  var openChangePass = function openChangePass() {\n    setFieldValue('changePassMode', !values.changePassMode);\n  };\n\n  return {\n    openChangePass: openChangePass,\n    handleChange: handleChange,\n    handleBlur: handleBlur,\n    handleSubmit: handleSubmit,\n    errors: errors,\n    touched: touched,\n    messages: messages,\n    values: values,\n    loading: loading\n  };\n}","map":null,"metadata":{},"sourceType":"module"}