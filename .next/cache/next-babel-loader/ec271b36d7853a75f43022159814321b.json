{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useMemo } from 'react';\nimport { Button, Form, Input, Modal, Tabs } from 'antd';\nimport { useFormik } from 'formik';\nimport { connect } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { getSuggestionSchema } from '../../../utils/validationSchemas';\nimport userAPI from '../../../API_Paths/userAPI';\nimport { APISend } from '../../../store/global-APIS/action';\nimport { hideAll } from '../../../store/userEventListeners/action';\nimport useGlobalAPI from '../../../hooks/useGlobalAPI';\nconst {\n  TextArea\n} = Input;\nconst {\n  TabPane\n} = Tabs;\n\nfunction SuggestionModal(props) {\n  const {\n    messages\n  } = useIntl();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: type,\n    1: setType\n  } = useState('suggestion');\n  const {\n    0: success,\n    1: setSuccess\n  } = useState('');\n  const validationSchema = useMemo(() => getSuggestionSchema(messages, type), [messages, type]);\n  const {\n    visible,\n    handleHideModal,\n    APISendAction,\n    hideAllAction\n  } = props;\n  useGlobalAPI({\n    onCancel: () => {\n      setLoading(false);\n    },\n    onSuccess: hideAllAction\n  });\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      suggestion: '',\n      Complaint: ''\n    },\n    onSubmit: values => {\n      setLoading(true);\n      APISendAction({\n        method: 'post',\n        url: userAPI.offer_complaint,\n        data: {\n          userEmail: values.email,\n          type: 'complain',\n          description: values[type],\n          title: type === 'suggestion' ? 'suggestion' : 'complain'\n        },\n        successText: messages['local.successText'],\n        errorText: messages['local.errorText'],\n        loadingText: messages['local.loadingText']\n      });\n      return true;\n    },\n    validationSchema\n  });\n  const {\n    errors,\n    values,\n    touched,\n    handleSubmit,\n    handleChange,\n    handleBlur\n  } = formik;\n\n  const decoratedHandelBlur = e => {\n    success && setSuccess('');\n    return handleBlur(e);\n  };\n\n  return __jsx(Modal, {\n    destroyOnClose: true,\n    title: messages['local.complain_suggestion'],\n    visible: visible,\n    onCancel: handleHideModal,\n    footer: null,\n    className: \"complain_suggestion_modal\"\n  }, __jsx(Form, {\n    onSubmit: handleSubmit\n  }, errors && errors.global, __jsx(Tabs, {\n    defaultActiveKey: \"suggestion\",\n    onChange: type => setType(type)\n  }, __jsx(TabPane, {\n    tab: messages['local.suggestion'],\n    key: \"suggestion\"\n  }, __jsx(Form.Item, {\n    validateStatus: errors.suggestion && touched.suggestion && 'error',\n    help: touched.suggestion && errors.suggestion\n  }, __jsx(TextArea, {\n    name: \"suggestion\",\n    value: values.suggestion,\n    onChange: handleChange,\n    onBlur: decoratedHandelBlur,\n    placeholder: messages['local.write_offer'],\n    autoSize: {\n      minRows: 3,\n      maxRows: 12\n    }\n  }))), __jsx(TabPane, {\n    tab: messages['local.complaint'],\n    key: \"Complaint\"\n  }, __jsx(Form.Item, {\n    validateStatus: errors.Complaint && touched.Complaint && 'error',\n    help: touched.Complaint && errors.Complaint\n  }, __jsx(TextArea, {\n    name: \"Complaint\",\n    value: values.Complaint,\n    onChange: handleChange,\n    onBlur: decoratedHandelBlur,\n    placeholder: messages['local.write_complaint'],\n    autoSize: {\n      minRows: 3,\n      maxRows: 12\n    }\n  })))), __jsx(Form.Item, {\n    validateStatus: errors.email && touched.email && 'error',\n    help: touched.email && errors.email\n  }, __jsx(Input, {\n    placeholder: messages['local.email'],\n    name: \"email\",\n    value: values.email,\n    onChange: handleChange,\n    onBlur: decoratedHandelBlur,\n    className: \"email\"\n  }), __jsx(Button, {\n    disabled: loading,\n    type: \"primary\",\n    className: \"send_suggestion_btn\",\n    htmlType: \"submit\"\n  }, messages['local.send']))));\n}\n\nfunction mapStateToProps({\n  globalAPIS\n}) {\n  return {\n    globalAPIS\n  };\n}\n\nexport default connect(mapStateToProps, {\n  APISendAction: APISend,\n  hideAllAction: hideAll\n})(SuggestionModal);","map":null,"metadata":{},"sourceType":"module"}