{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { handleActions } from 'redux-actions';\nimport { cartChangeProduct, resetCartReducer, changeCart, changeCartSuccess, changeCartError, cartSetAll, sendOrder, sendOrderSuccess, sendOrderError } from './action';\nimport { addLoadingItems } from './handleFunctions';\nconst initialState = {\n  loading: {},\n  error: false,\n  data: {},\n  order: {\n    loading: false,\n    error: false\n  },\n  cartSetCounter: 0\n};\nexport default handleActions({\n  [changeCart]: (state, {\n    payload: {\n      ids\n    }\n  }) => _objectSpread({}, state, {\n    loading: addLoadingItems(state, ids),\n    error: false\n  }),\n  [changeCartSuccess]: (state, {\n    payload: {\n      id,\n      data\n    }\n  }) => _objectSpread({}, state, {\n    loading: _objectSpread({}, state.loading, {\n      [id]: false\n    }),\n    error: false,\n    data\n  }),\n  [changeCartError]: (state, {\n    payload: {\n      ids\n    }\n  }) => _objectSpread({}, state, {\n    loading: _objectSpread({}, state.loading, {\n      loading: addLoadingItems(state, ids, true)\n    }),\n    error: true\n  }),\n  [cartChangeProduct]: (state, {\n    payload: {\n      id,\n      changes\n    }\n  }) => _objectSpread({}, state, {\n    data: _objectSpread({}, state.data, {\n      [id]: _objectSpread({}, state[id], {}, changes)\n    })\n  }),\n  [cartSetAll]: (state, {\n    payload: {\n      cart\n    }\n  }) => _objectSpread({}, state, {\n    data: cart,\n    cartSetCounter: state.cartSetCounter + 1\n  }),\n  [resetCartReducer]: state => _objectSpread({}, initialState, {\n    cartSetCounter: state.cartSetCounter\n  }),\n  [sendOrder]: state => _objectSpread({}, state, {\n    order: {\n      error: false,\n      loading: true\n    }\n  }),\n  [sendOrderSuccess]: state => _objectSpread({}, state, {\n    data: {},\n    order: {\n      error: false,\n      loading: false\n    }\n  }),\n  [sendOrderError]: state => _objectSpread({}, state, {\n    order: {\n      error: true,\n      loading: false\n    }\n  })\n}, initialState);\nexport function getTotalPrice(store) {\n  const {\n    cart: {\n      data\n    }\n  } = store;\n  const keys = Object.keys(data);\n  let total = 0;\n  keys.forEach(key => {\n    total += (data[key] && data[key].price || 200) * (data[key] && data[key].count || 1);\n  });\n  return total;\n}\nexport function getTotalCount(store) {\n  const {\n    cart\n  } = store;\n  return Object.keys(cart.data).length;\n}\nexport const selectCart = ({\n  cart\n}) => cart.data;","map":null,"metadata":{},"sourceType":"module"}