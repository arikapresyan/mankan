{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useFormik } from 'formik';\nimport { getRegistrationSchema } from '../../../utils/validationSchemas';\nexport default function useRegistration(_ref) {\n  _s();\n\n  var registrationAction = _ref.registrationAction,\n      hideAllAction = _ref.hideAllAction,\n      authSuccess = _ref.authSuccess,\n      errorText = _ref.errorText;\n\n  var _useIntl = useIntl(),\n      messages = _useIntl.messages,\n      formatMessage = _useIntl.formatMessage;\n\n  var validationSchema = useMemo(function () {\n    return getRegistrationSchema(messages);\n  }, [messages]);\n  var formik = useFormik({\n    initialValues: {\n      name: '',\n      surname: '',\n      email: '',\n      phone: '',\n      password: '',\n      repeatPassword: '',\n      agreeTerms: false\n    },\n    onSubmit: function onSubmit(values) {\n      registrationAction(_objectSpread(_objectSpread({}, values), {}, {\n        successText: messages['locale.confirm_email']\n      }));\n    },\n    validationSchema: validationSchema\n  });\n  useEffect(function () {\n    if (authSuccess) {\n      hideAllAction();\n    }\n  }, [authSuccess]);\n  useEffect(function () {\n    if (errorText) {\n      if (errorText.includes('email')) {\n        formik.setErrors({\n          email: messages['local.email_already_exist']\n        });\n      } else formik.setErrors({\n        globalError: errorText\n      });\n    }\n  }, [errorText]);\n  return {\n    formik: formik,\n    messages: messages,\n    formatMessage: formatMessage\n  };\n}\n\n_s(useRegistration, \"u9c2s1CYwRxd91e8ERkfUHt5JH8=\", false, function () {\n  return [useIntl, useFormik];\n});","map":{"version":3,"sources":["/var/www/mankan-front/components/modals/registration-modal/useRegistration.js"],"names":["useEffect","useMemo","useIntl","useFormik","getRegistrationSchema","useRegistration","registrationAction","hideAllAction","authSuccess","errorText","messages","formatMessage","validationSchema","formik","initialValues","name","surname","email","phone","password","repeatPassword","agreeTerms","onSubmit","values","successText","includes","setErrors","globalError"],"mappings":";;;;;;;;AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,qBAAT,QAAsC,kCAAtC;AAGA,eAAe,SAASC,eAAT,OAKZ;AAAA;;AAAA,MAJDC,kBAIC,QAJDA,kBAIC;AAAA,MAHDC,aAGC,QAHDA,aAGC;AAAA,MAFDC,WAEC,QAFDA,WAEC;AAAA,MADDC,SACC,QADDA,SACC;;AAAA,iBACmCP,OAAO,EAD1C;AAAA,MACOQ,QADP,YACOA,QADP;AAAA,MACiBC,aADjB,YACiBA,aADjB;;AAED,MAAMC,gBAAgB,GAAGX,OAAO,CAAC;AAAA,WAAMG,qBAAqB,CAACM,QAAD,CAA3B;AAAA,GAAD,EAAwC,CAACA,QAAD,CAAxC,CAAhC;AAEA,MAAMG,MAAM,GAAGV,SAAS,CAAC;AACvBW,IAAAA,aAAa,EAAE;AACbC,MAAAA,IAAI,EAAE,EADO;AAEbC,MAAAA,OAAO,EAAE,EAFI;AAGbC,MAAAA,KAAK,EAAE,EAHM;AAIbC,MAAAA,KAAK,EAAE,EAJM;AAKbC,MAAAA,QAAQ,EAAE,EALG;AAMbC,MAAAA,cAAc,EAAE,EANH;AAObC,MAAAA,UAAU,EAAE;AAPC,KADQ;AAUvBC,IAAAA,QAAQ,EAAE,kBAACC,MAAD,EAAY;AACpBjB,MAAAA,kBAAkB,iCAAMiB,MAAN;AAAcC,QAAAA,WAAW,EAAEd,QAAQ,CAAC,sBAAD;AAAnC,SAAlB;AACD,KAZsB;AAavBE,IAAAA,gBAAgB,EAAhBA;AAbuB,GAAD,CAAxB;AAgBAZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIQ,WAAJ,EAAiB;AACfD,MAAAA,aAAa;AACd;AACF,GAJQ,EAIN,CAACC,WAAD,CAJM,CAAT;AAMAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIS,SAAJ,EAAe;AACb,UAAIA,SAAS,CAACgB,QAAV,CAAmB,OAAnB,CAAJ,EAAiC;AAC/BZ,QAAAA,MAAM,CAACa,SAAP,CAAiB;AAAET,UAAAA,KAAK,EAAEP,QAAQ,CAAC,2BAAD;AAAjB,SAAjB;AACD,OAFD,MAEOG,MAAM,CAACa,SAAP,CAAiB;AAAEC,QAAAA,WAAW,EAAElB;AAAf,OAAjB;AACR;AACF,GANQ,EAMN,CAACA,SAAD,CANM,CAAT;AAQA,SAAO;AAAEI,IAAAA,MAAM,EAANA,MAAF;AAAUH,IAAAA,QAAQ,EAARA,QAAV;AAAoBC,IAAAA,aAAa,EAAbA;AAApB,GAAP;AACD;;GAxCuBN,e;UAMcH,O,EAGrBC,S","sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useFormik } from 'formik';\nimport { getRegistrationSchema } from '../../../utils/validationSchemas';\n\n\nexport default function useRegistration({\n  registrationAction,\n  hideAllAction,\n  authSuccess,\n  errorText,\n}) {\n  const { messages, formatMessage } = useIntl();\n  const validationSchema = useMemo(() => getRegistrationSchema(messages), [messages]);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      surname: '',\n      email: '',\n      phone: '',\n      password: '',\n      repeatPassword: '',\n      agreeTerms: false,\n    },\n    onSubmit: (values) => {\n      registrationAction({ ...values, successText: messages['locale.confirm_email'] });\n    },\n    validationSchema,\n  });\n\n  useEffect(() => {\n    if (authSuccess) {\n      hideAllAction();\n    }\n  }, [authSuccess]);\n\n  useEffect(() => {\n    if (errorText) {\n      if (errorText.includes('email')) {\n        formik.setErrors({ email: messages['local.email_already_exist'] });\n      } else formik.setErrors({ globalError: errorText });\n    }\n  }, [errorText]);\n\n  return { formik, messages, formatMessage };\n}\n"]},"metadata":{},"sourceType":"module"}