{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport { Layout, Input, Form, Checkbox, Button } from 'antd';\nimport { useFormik } from 'formik';\nimport { connect, useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { APISend } from '../../../store/global-APIS/action';\nimport userAPI from '../../../API_Paths/userAPI';\nimport { getNewPasswordSchema } from '../../../utils/validationSchemas';\nimport '../ChangePassowrd.less';\nimport { setCookie } from '../../../utils/cookies';\nimport { C_TOKEN } from '../../../constants/utils';\nimport { getUserData } from '../../../store/user/action';\nconst {\n  Content\n} = Layout;\n\nfunction PaymentDeliveryReturn({\n  APISendAction,\n  token,\n  globalAPIS\n}) {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    messages\n  } = useIntl();\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const validationSchema = useMemo(() => getNewPasswordSchema(messages), [messages]);\n  const formik = useFormik({\n    initialValues: {\n      password: '',\n      retryPassword: '',\n      token\n    },\n    validationSchema,\n    onSubmit: values => {\n      setLoading(true);\n      APISendAction({\n        method: 'put',\n        url: `${userAPI.change_password}/${values.token}`,\n        data: _objectSpread({}, values)\n      });\n    }\n  });\n  const {\n    handleBlur,\n    handleChange,\n    handleSubmit,\n    values,\n    touched,\n    errors\n  } = formik;\n  useEffect(() => {\n    if (globalAPIS.hasError) {\n      setLoading(false);\n    } else if (globalAPIS.success) {\n      if (values.rememberMe) {\n        setCookie(C_TOKEN, token, {\n          'max-age': 100 * 24 * 60 * 60\n        });\n      } else {\n        setCookie(C_TOKEN, token);\n      }\n\n      dispatch(getUserData());\n      router.push('/');\n    }\n  }, [globalAPIS]);\n  return __jsx(Content, null, __jsx(\"div\", {\n    className: \"changePasswordContainer\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"changePasswordForm\"\n  }, __jsx(\"h1\", null, messages['local.password_recovery']), __jsx(Form.Item, {\n    validateStatus: errors.password && touched.password && 'error',\n    help: touched.password && errors.password,\n    label: messages['local.password']\n  }, __jsx(Input, {\n    type: \"password\",\n    name: \"password\",\n    placeholder: messages['local.new_password'],\n    onBlur: handleBlur,\n    onChange: handleChange,\n    value: values.password\n  })), __jsx(Form.Item, {\n    validateStatus: errors.retryPassword && touched.retryPassword && 'error',\n    help: touched.retryPassword && errors.retryPassword,\n    label: messages['local.repeat_password']\n  }, __jsx(Input, {\n    type: \"password\",\n    name: \"retryPassword\",\n    placeholder: messages['local.repeat_new_password'],\n    onBlur: handleBlur,\n    onChange: handleChange,\n    value: values.retryPassword\n  })), __jsx(Form.Item, null, __jsx(Checkbox, {\n    name: \"rememberMe\",\n    checked: values.rememberMe,\n    onChange: handleChange\n  }, messages['local.remember'])), __jsx(Form.Item, null, __jsx(\"div\", {\n    className: \"login_btn\"\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading\n  }, ' ', messages['local.login']))))));\n}\n\nPaymentDeliveryReturn.getInitialProps = ({\n  query\n}) => {\n  const {\n    token\n  } = query;\n  return {\n    token\n  };\n};\n\nconst mapStateToProps = ({\n  globalAPIS\n}) => ({\n  globalAPIS\n});\n\nexport default connect(mapStateToProps, {\n  APISendAction: APISend\n})(PaymentDeliveryReturn);","map":null,"metadata":{},"sourceType":"module"}