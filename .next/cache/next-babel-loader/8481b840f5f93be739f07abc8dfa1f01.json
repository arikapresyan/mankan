{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { handleActions } from 'redux-actions';\nimport { catalogGetSuccess, catalogGetError, catalogSetPage, catalogGet } from './action';\nconst initialState = {\n  products: [],\n  page: 1,\n  pagesCount: 0,\n  loading: false,\n  error: false\n};\nexport default handleActions({\n  [catalogGet]: state => _objectSpread({}, state, {\n    loading: true,\n    error: false\n  }),\n  [catalogGetSuccess]: (state, {\n    payload: {\n      products,\n      pagesCount,\n      page\n    }\n  }) => _objectSpread({}, state, {\n    products,\n    pagesCount,\n    page: page || 1,\n    loading: false,\n    error: false\n  }),\n  [catalogGetError]: state => _objectSpread({}, state, {\n    loading: false,\n    error: true\n  }),\n  [catalogSetPage]: (state, {\n    payload: {\n      page\n    }\n  }) => _objectSpread({}, state, {\n    page\n  })\n}, initialState);","map":null,"metadata":{},"sourceType":"module"}