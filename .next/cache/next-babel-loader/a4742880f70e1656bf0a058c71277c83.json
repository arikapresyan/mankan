{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { searchProductReset } from '../../../store/search/action';\nimport { selectSearchData, selectSearchDataLoading } from '../../../store/search/reducer';\nimport useOnClickOutside from '../../../hooks/useOnOutClick';\nimport { catalogMainSearch } from '../../../store/catalog-filter/action';\nimport { selectCatalogFilters } from '../../../store/catalog-filter/reducer'; // eslint-disable-next-line import/prefer-default-export\n\nexport var useMainSearch = function useMainSearch(_ref) {\n  var onSearch = _ref.onSearch;\n\n  var _useState = useState(),\n      searchValue = _useState[0],\n      setValue = _useState[1];\n\n  var _useSelector = useSelector(selectCatalogFilters),\n      searchWord = _useSelector.searchWord;\n\n  var dispatch = useDispatch();\n\n  var resetSearch = function resetSearch() {\n    return dispatch(searchProductReset());\n  };\n\n  var data = useSelector(selectSearchData);\n  var loading = useSelector(selectSearchDataLoading);\n\n  var _useState2 = useState(false),\n      focused = _useState2[0],\n      setFocused = _useState2[1];\n\n  var ref = useRef(null);\n\n  var handleSearch = function handleSearch(value) {\n    if (value === null || value === void 0 ? void 0 : value.trim()) dispatch(catalogMainSearch({\n      searchWord: value\n    }));\n    resetSearch();\n    setFocused(false);\n  };\n\n  var handleSearchSuggested = function handleSearchSuggested(value) {\n    onSearch({\n      searchWord: value\n    });\n  };\n\n  var handleFocus = function handleFocus(_ref2) {\n    var value = _ref2.target.value;\n    resetSearch();\n\n    if (value && value !== searchValue) {\n      handleSearchSuggested(value);\n    }\n\n    if (value !== searchValue) setFocused(true);\n  };\n\n  var handleBlur = function handleBlur() {\n    setFocused(false);\n  };\n\n  var handleChange = function handleChange(_ref3) {\n    var eventValue = _ref3.target.value;\n    setValue(eventValue);\n    handleSearchSuggested(eventValue);\n    setFocused(true);\n  };\n\n  useOnClickOutside(ref, function () {\n    setFocused(false);\n  });\n  useEffect(function () {\n    setValue(searchWord);\n  }, [searchWord]);\n  return {\n    searchValue: searchValue,\n    data: data,\n    loading: loading,\n    focused: focused,\n    handleFocus: handleFocus,\n    handleBlur: handleBlur,\n    ref: ref,\n    setValue: setValue,\n    handleChange: handleChange,\n    handleSearch: handleSearch\n  };\n};","map":null,"metadata":{},"sourceType":"module"}