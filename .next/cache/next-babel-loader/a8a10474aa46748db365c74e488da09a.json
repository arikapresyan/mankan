{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, takeEvery, put, select, call, delay } from 'redux-saga/effects';\nimport Router from 'next/router';\nimport { message } from 'antd';\nimport { changeCart, changeCartSuccess, changeCartError, cartSetAll, populateCart, sendOrder, sendOrderError, sendOrderSuccess } from './action';\nimport { selectCart } from './reducer';\nimport { changePage, resetChangePage } from '../change-page/action';\nimport { selectAuthorized, selectUser } from '../user/reducer';\nimport { setLocalStorageObj, getLocalStorageObj, removeLocalStorageObj } from '../../constants/utils';\nimport Axios from '../services/Axios';\nimport { paymentTypes } from '../../components/modals/confirm-order-modal/components/constants';\n\nfunction* workPopulateCart() {\n  try {\n    const userCart = (_objectSpread({}, (yield select(selectUser))).cartList || []).map(({\n      productId,\n      count,\n      battery\n    }) => ({\n      id: productId,\n      count,\n      battery\n    }));\n    const userCartObj = {};\n    userCart.forEach(cart => {\n      userCartObj[cart.id] = {\n        count: cart.count || 1,\n        id: cart.id,\n        status: true,\n        battery: cart.battery\n      };\n    });\n    const cartData = Object.keys(userCartObj).length && userCartObj || getLocalStorageObj('cart') || {};\n    setLocalStorageObj('cart', cartData);\n    yield put(cartSetAll({\n      cart: cartData\n    }));\n  } catch (error) {}\n}\n\nfunction* watchPopulateCart() {\n  yield takeEvery(populateCart, workPopulateCart);\n}\n\nfunction setToWishlistRequest(products) {\n  return Axios.request({\n    method: 'post',\n    url: '/api/user/addWish',\n    data: {\n      products,\n      type: 'cart'\n    }\n  });\n}\n\nfunction removeFromWishlistRequest({\n  toRemove: products,\n  clearBatteryOwners\n}) {\n  const data = _objectSpread({\n    productId: products[0],\n    type: 'cart'\n  }, clearBatteryOwners ? {\n    removeBatteryId: products[0]\n  } : {});\n\n  return Axios.request({\n    method: 'delete',\n    url: '/api/user/removeWish',\n    data\n  });\n}\n\nfunction* workChangeCart({\n  payload: {\n    ids,\n    status,\n    redirect\n  }\n}) {\n  const authorized = yield select(selectAuthorized);\n\n  try {\n    const cart = _objectSpread({}, (yield select(selectCart) || {}));\n\n    const idsKeys = Object.keys(ids);\n    const toRemove = [];\n    const toAdd = [];\n    let clearBatteryOwners = null;\n    idsKeys.forEach(key => {\n      if (ids[key].status && status) {\n        if (cart[key] && !ids[key].batteryId) {\n          delete cart[key].batteryId;\n        }\n\n        const count = cart[key] && cart[key].count;\n        cart[key] = _objectSpread({}, cart[key] || {}, {}, ids[key]);\n\n        if (cart[key] && cart[key].type === 'battery' && count) {\n          cart[key].count += count;\n        }\n\n        toAdd.push(cart[key]);\n      } else {\n        const cartKeys = Object.keys(cart);\n        const batteryOwners = [];\n        cartKeys.forEach(cartKey => {\n          if (cart[cartKey].batteryId === ids[key]) {\n            batteryOwners.push(cart[cartKey].batteryId);\n            delete cart[cartKey].batteryId;\n          }\n        });\n\n        if (batteryOwners.length) {\n          clearBatteryOwners = {\n            ids: batteryOwners,\n            id: ids[key]\n          };\n        }\n\n        delete cart[ids[key]];\n        toRemove.push(ids[key]);\n      }\n    });\n\n    if (authorized) {\n      if (toRemove.length) {\n        yield call(removeFromWishlistRequest, {\n          toRemove,\n          clearBatteryOwners\n        });\n      } else {\n        yield call(setToWishlistRequest, toAdd);\n      }\n    }\n\n    setLocalStorageObj('cart', cart);\n    yield put(changeCartSuccess({\n      data: cart,\n      ids\n    }));\n\n    if (redirect === true) {\n      yield put(changePage({\n        route: '/cart'\n      }));\n      yield delay(200);\n      yield put(resetChangePage());\n    }\n  } catch (error) {\n    yield put(changeCartError({\n      ids\n    }));\n  }\n}\n\nfunction* watchChangeCart() {\n  yield takeEvery(changeCart, workChangeCart);\n}\n\nfunction* sendOrderRequest(data, auth) {\n  return yield call(Axios.request, {\n    method: 'post',\n    url: auth ? '/api/user/orders' : '/api/product/createOrder',\n    data\n  });\n}\n\nfunction* workSendOrder({\n  payload: {\n    values,\n    messageTexts,\n    promo\n  }\n}) {\n  const {\n    errorText,\n    successText\n  } = messageTexts;\n  const cart = yield select(selectCart);\n  const auth = yield select(selectAuthorized);\n  const data = {\n    productIds: Object.keys(cart).map(item => cart[item]),\n    deliveryAddress: {\n      street: values.street,\n      building: values.house,\n      entry: values.entry\n    },\n    firstName: values.firstName,\n    lastName: values.lastName,\n    paymentType: paymentTypes[values.method],\n    deliveryTime: new Date(values.deliveryPeriod).toLocaleString(),\n    phone: values.phone,\n    email: values.email,\n    promoCode: promo\n  };\n\n  try {\n    const res = yield call(sendOrderRequest, data, auth);\n\n    if (paymentTypes[values.method] === paymentTypes[2] || paymentTypes[values.method] === paymentTypes[3]) {\n      removeLocalStorageObj('cart');\n      yield put(sendOrderSuccess());\n      message.success(successText);\n      yield put(changePage({\n        route: '/'\n      }));\n      yield delay(200);\n      yield put(resetChangePage());\n    } else {\n      const {\n        data: {\n          response: {\n            formUrl\n          }\n        }\n      } = res;\n      window.location.href = formUrl;\n    }\n  } catch (e) {\n    message.error(errorText);\n    yield put(sendOrderError());\n  }\n}\n\nfunction* watchSendOrder() {\n  yield takeEvery(sendOrder, workSendOrder);\n}\n\nexport default function* () {\n  yield all([watchChangeCart(), watchPopulateCart(), watchSendOrder()]);\n}","map":null,"metadata":{},"sourceType":"module"}