{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useMemo, useState } from 'react';\nimport Head from 'next/head';\nimport dynamic from 'next/dynamic';\nimport { connect } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport { IntlProvider } from 'react-intl';\nimport CategoryMenuMobile from './components/mobile/category-menu-mobile/CategoryMenuContent';\nimport CategorySubmenuMobile from './components/mobile/category-menu-mobile/CategorySubmenuContent';\nimport FilterListSidebar from './components/mobile/filter-list-sidebar/FilterListWrapper';\nimport messages from './staticText/messages';\nimport PagesLoader from './components/pages-loader/PagesLoader';\nimport { resetCatalogFilterReducer } from './store/catalog-filter/action';\nimport { hideAll } from './store/userEventListeners/action';\nimport { resetPageData } from './store/pages-data/action';\nimport { getTextFromPath } from './components/common/constants';\nconst BuyProductModal = dynamic(() => import('./components/modals/buy-product-modal/BuyProductModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./components/modals/buy-product-modal/BuyProductModal')],\n    modules: ['./components/modals/buy-product-modal/BuyProductModal']\n  }\n});\nconst SiteHeader = dynamic(() => import('./layout/header/SiteHeader'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./layout/header/SiteHeader')],\n    modules: ['./layout/header/SiteHeader']\n  }\n});\nconst MobileMenuBar = dynamic(() => import('./layout/mobile-menu/MobileMenuBar'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./layout/mobile-menu/MobileMenuBar')],\n    modules: ['./layout/mobile-menu/MobileMenuBar']\n  }\n});\nconst SiteFooter = dynamic(() => import('./layout/footer/SiteFooter'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./layout/footer/SiteFooter')],\n    modules: ['./layout/footer/SiteFooter']\n  }\n});\n\nfunction App({\n  Component,\n  pageProps,\n  lang,\n  hideAllAction,\n  resetPageDataAction\n}) {\n  const router = useRouter();\n  const {\n    pathname\n  } = router;\n  const title = useMemo(() => getTextFromPath(pathname, messages[lang]) || 'Mankan', [lang, pathname]);\n  const {\n    0: isPageLoading,\n    1: setIsPageLoading\n  } = useState(false);\n  useEffect(() => {\n    router.events.on('routeChangeStart', () => {\n      resetPageDataAction();\n      window.scrollTo(0, 0);\n      setIsPageLoading(true);\n      hideAllAction();\n    });\n    router.events.on('routeChangeComplete', () => {\n      setIsPageLoading(false);\n    });\n  }, []);\n  return __jsx(IntlProvider, {\n    locale: \"en\",\n    defaultLocale: \"ARM\",\n    messages: messages[lang]\n  }, __jsx(Head, null, __jsx(\"title\", null, title)), __jsx(\"div\", {\n    className: \"App\"\n  }, __jsx(BuyProductModal, null), __jsx(SiteHeader, null), __jsx(MobileMenuBar, null), __jsx(FilterListSidebar, null), __jsx(CategorySubmenuMobile, null), __jsx(CategoryMenuMobile, null), isPageLoading ? __jsx(PagesLoader, null) : null, __jsx(\"div\", {\n    style: isPageLoading ? {\n      display: 'none'\n    } : {}\n  }, __jsx(Component, pageProps)), __jsx(SiteFooter, null)));\n}\n\nfunction mapStateToProps({\n  user: {\n    lang\n  }\n}) {\n  return {\n    lang\n  };\n}\n\nexport default connect(mapStateToProps, {\n  resetCatalogFilterReducerAction: resetCatalogFilterReducer,\n  hideAllAction: hideAll,\n  resetPageDataAction: resetPageData\n})(App);","map":null,"metadata":{},"sourceType":"module"}