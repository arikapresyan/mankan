{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { map, first } from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport nextId from 'react-id-generator';\nimport ArrowIcon from '../../../assets/images/icons/arrow.png';\n\nconst ProductThumbnailSlider = ({\n  images: img,\n  onPreviewImage\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    images: img.map(image => _objectSpread({}, image, {\n      id: nextId()\n    })),\n    start: 0,\n    finish: 3,\n    selectedItem: null,\n    index: 0\n  });\n  const {\n    0: changeInterval,\n    1: setChangeInterval\n  } = useState(null);\n\n  const handleOnPreview = (item, userClick) => {\n    const index = state.images.findIndex(i => i === item);\n    setState(_objectSpread({}, state, {\n      start: index - 2 >= 0 ? index - 2 : 0,\n      finish: index + 3,\n      selectedItem: item,\n      index\n    }));\n    onPreviewImage(item);\n    if (userClick) clearInterval(changeInterval);\n  };\n\n  useEffect(() => {\n    const {\n      images\n    } = state;\n    setState(_objectSpread({}, state, {\n      selectedItem: first(images),\n      index: 0\n    }));\n    onPreviewImage(first(images)); // let counter = 0;\n\n    const intervalId = setInterval(() => {// let item = state.images[0];\n      //\n      // if (counter + 1 < state.images.length) {\n      //   counter += 1;\n      //   item = state.images[counter];\n      // } else {\n      //   counter = 0;\n      // }\n      // handleOnPreview(item);\n    }, 7000);\n    setChangeInterval(intervalId);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  const handleOnUp = () => {\n    setState(prevState => {\n      return _objectSpread({}, prevState, {\n        start: prevState.start += 1,\n        finish: prevState.finish += 1,\n        index: prevState.index + 1,\n        selectedItem: prevState.images[prevState.index + 1]\n      });\n    });\n    handleOnPreview(state.images[state.index + 1], 1);\n  };\n\n  const handleOnDown = () => {\n    setState(prevState => _objectSpread({}, prevState, {\n      start: prevState.start -= 1,\n      finish: prevState.finish -= 1,\n      index: prevState.index - 1,\n      selectedItem: prevState.images[prevState.index - 1]\n    }));\n    handleOnPreview(state.images[state.index - 1], 1);\n  };\n\n  const renderImages = () => {\n    const {\n      start,\n      finish\n    } = state;\n    const visibleImages = state.images.filter((item, index) => index >= start && index <= finish);\n    return visibleImages;\n  };\n\n  const validationForUp = useMemo(() => {\n    var _state$images;\n\n    return state.finish - 3 + 1 < ((_state$images = state.images) === null || _state$images === void 0 ? void 0 : _state$images.length);\n  }, [state.finish, state.images]);\n  const validationForDown = useMemo(() => state.start - 1 >= 0, [state.start]);\n  return __jsx(\"div\", {\n    className: \"thumbnail_slider\"\n  }, validationForDown && __jsx(\"span\", {\n    className: \"prev\",\n    onClick: handleOnDown\n  }, __jsx(\"img\", {\n    src: ArrowIcon,\n    alt: \"\"\n  })), __jsx(\"div\", {\n    className: \"thumbnail_image_list\"\n  }, state.images.length > 0 && map(renderImages(), (item, index) => __jsx(\"div\", {\n    className: \"thumb_image\",\n    key: index,\n    style: state.selectedItem && item.id === state.selectedItem.id ? {\n      border: '3px solid red'\n    } : {}\n  }, __jsx(\"img\", {\n    src: item.url,\n    alt: item.alt,\n    title: item.title,\n    onClick: () => handleOnPreview(item, 1)\n  })))), validationForUp && __jsx(\"span\", {\n    className: \"next\",\n    style: {\n      zIndex: '9'\n    },\n    onClick: handleOnUp\n  }, __jsx(\"img\", {\n    src: ArrowIcon,\n    alt: \"\"\n  })));\n};\n\nexport default ProductThumbnailSlider;","map":null,"metadata":{},"sourceType":"module"}