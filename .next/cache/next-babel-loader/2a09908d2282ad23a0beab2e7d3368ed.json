{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, takeEvery, select, call, put } from 'redux-saga/effects';\nimport { getPageData, getPageDataSuccess, getPageDataError } from './action';\nimport { selectCurrentPage, selectPageId, selectHelperData } from './reducer'; // eslint-disable-next-line import/no-cycle\n\nimport Axios from '../services/Axios';\nimport { selectAuthorized, selectLang } from '../user/reducer';\nimport { cartSetAll } from '../cart/action';\nimport { setLocalStorageObj } from '../../constants/utils';\n\nconst getHomePageData = async lang => {\n  try {\n    const {\n      data: {\n        result: {\n          rows: orders\n        }\n      }\n    } = await Axios.request({\n      url: '/api/product/sliders',\n      method: 'get'\n    });\n    const {\n      data: {\n        result\n      }\n    } = await Axios.request({\n      url: '/api/product/homePage',\n      method: 'post',\n      data: {\n        lang\n      }\n    });\n    const homePageData = [];\n    const newHomePageData = [];\n    const {\n      ExtraProducts\n    } = result;\n    delete result.ExtraProducts;\n    const resultKeys = Object.keys(result);\n    orders.forEach((currentOrder, index) => {\n      let data = {};\n      resultKeys.forEach(key => {\n        if (result[key].sliderId === currentOrder.id) {\n          data = result[key];\n        }\n      });\n      ExtraProducts.forEach(extra => {\n        if (extra.sliderId === currentOrder.id) {\n          data = extra;\n        }\n      });\n      homePageData[currentOrder.order || 100 * index] = _objectSpread({}, currentOrder, {}, data);\n    });\n    homePageData.forEach(dataItem => {\n      if (dataItem) newHomePageData.push(dataItem);\n    });\n    return newHomePageData;\n  } catch (error) {\n    return [];\n  }\n};\n\nconst getProfilePageData = async () => ({\n  myOrders: [],\n  viewedProducts: [],\n  untilNextBonusPercent: 50000,\n  nextBonusPercent: 3\n});\n\nconst getOneProductData = async (lang, id) => {\n  const {\n    data: {\n      result\n    }\n  } = await Axios.request({\n    method: 'post',\n    url: `/api/product/${id}`,\n    data: {\n      id,\n      lang\n    }\n  });\n  return {\n    result\n  };\n};\n\nfunction* changeUserCart(products) {\n  yield call(Axios.request, {\n    method: 'post',\n    url: '/api/user/addWish/byIds',\n    data: {\n      type: 'cart',\n      products\n    }\n  });\n}\n\nfunction* getCartPageData({\n  lang,\n  cart\n}) {\n  const ids = Object.keys(cart);\n  const {\n    data: {\n      result: cartData\n    }\n  } = yield call(Axios.request, {\n    url: '/api/product/byIds',\n    data: {\n      lang,\n      ids\n    },\n    method: 'post'\n  });\n\n  if (ids.length !== cartData.length) {\n    const isAuth = yield select(selectAuthorized);\n    const newCart = {};\n    cartData.forEach(({\n      id\n    }) => {\n      newCart[id] = _objectSpread({}, cart[id]);\n    });\n    yield put(cartSetAll({\n      cart: newCart\n    }));\n    setLocalStorageObj('cart', newCart);\n\n    if (isAuth) {\n      yield call(changeUserCart, Object.keys(newCart).map(key => newCart[key]));\n    }\n  }\n\n  const {\n    data: {\n      result: bugsData\n    }\n  } = yield call(Axios.request, {\n    url: '/api/product/bugs',\n    data: {\n      lang\n    },\n    method: 'post'\n  });\n  return {\n    cartData,\n    bugsData\n  };\n}\n\nconst getVacancyPageData = async ({\n  lang\n}) => {\n  const res = await Axios.request({\n    url: '/api/vocation/',\n    data: {\n      lang\n    },\n    method: 'post'\n  });\n  return res;\n};\n\nfunction* getDataByPage({\n  page,\n  lang,\n  id,\n  data\n}) {\n  if (page === 'home') {\n    const res = yield call(getHomePageData, lang);\n    return res;\n  }\n\n  if (page === 'profile') {\n    const res = yield call(getProfilePageData, lang);\n    return res;\n  }\n\n  if (page === 'oneProduct') {\n    const res = yield call(getOneProductData, lang, id);\n    return res;\n  }\n\n  if (page === 'cart') {\n    const res = yield call(getCartPageData, {\n      lang,\n      cart: data.cart\n    });\n    return res;\n  }\n\n  if (page === 'vacancy') {\n    const {\n      data: {\n        result\n      }\n    } = yield call(getVacancyPageData, {\n      lang\n    });\n    return result;\n  }\n\n  return null;\n}\n\nfunction* workGetPageData(action) {\n  try {\n    const {\n      payload: {\n        page,\n        id,\n        data\n      }\n    } = action;\n    const lang = yield select(selectLang);\n    const currentId = id || (yield select(selectPageId));\n    const currentPage = page || (yield select(selectCurrentPage));\n    const helperData = data || (yield select(selectHelperData)) || null;\n    const res = yield call(getDataByPage, {\n      page: currentPage,\n      lang,\n      id: currentId,\n      data: helperData\n    });\n    yield put(getPageDataSuccess({\n      data: res,\n      page: currentPage,\n      id: currentId,\n      helperData\n    }));\n  } catch (error) {\n    yield put(getPageDataError());\n  }\n}\n\nfunction* watchGetPageData() {\n  yield takeEvery(getPageData, workGetPageData);\n}\n\nexport default function* () {\n  yield all([watchGetPageData()]);\n}","map":null,"metadata":{},"sourceType":"module"}