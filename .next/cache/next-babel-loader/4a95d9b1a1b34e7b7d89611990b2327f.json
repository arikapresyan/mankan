{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useFormik } from 'formik';\nimport { getRegistrationSchema } from '../../../utils/validationSchemas';\nexport default function useRegistration(_ref) {\n  var registrationAction = _ref.registrationAction,\n      hideAllAction = _ref.hideAllAction,\n      authSuccess = _ref.authSuccess,\n      errorText = _ref.errorText;\n\n  var _useIntl = useIntl(),\n      messages = _useIntl.messages,\n      formatMessage = _useIntl.formatMessage;\n\n  var validationSchema = useMemo(function () {\n    return getRegistrationSchema(messages);\n  }, [messages]);\n  var formik = useFormik({\n    initialValues: {\n      name: '',\n      surname: '',\n      email: '',\n      phone: '',\n      password: '',\n      repeatPassword: '',\n      agreeTerms: false\n    },\n    onSubmit: function onSubmit(values) {\n      registrationAction(_objectSpread({}, values));\n    },\n    validationSchema: validationSchema\n  });\n  useEffect(function () {\n    if (authSuccess) {\n      hideAllAction();\n    }\n  }, [authSuccess]);\n  useEffect(function () {\n    if (errorText) {\n      if (errorText.includes('email')) {\n        formik.setErrors({\n          email: messages['local.email_already_exist']\n        });\n      } else formik.setErrors({\n        globalError: errorText\n      });\n    }\n  }, [errorText]);\n  return {\n    formik: formik,\n    messages: messages,\n    formatMessage: formatMessage\n  };\n}","map":null,"metadata":{},"sourceType":"module"}