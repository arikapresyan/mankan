{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(workGetSlides),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetSlides),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(_callee);\n\nimport { takeEvery, call, all, put } from 'redux-saga/effects';\nimport Axios from '../services/Axios';\nimport { getSlides, getSlidesSuccess, getSlidesError } from './actions';\n\nvar getSlidesRequest = function getSlidesRequest() {\n  return Axios.get('/api/product/mainSlider');\n};\n\nfunction workGetSlides() {\n  var _yield$call, rows, data;\n\n  return _regeneratorRuntime.wrap(function workGetSlides$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(getSlidesRequest);\n\n        case 3:\n          _yield$call = _context.sent;\n          rows = _yield$call.data.result.rows;\n          data = rows.sort(function () {\n            return Math.random() - 0.5;\n          });\n          _context.next = 8;\n          return put(getSlidesSuccess({\n            data: data\n          }));\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put(getSlidesError());\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction watchGetSlides() {\n  return _regeneratorRuntime.wrap(function watchGetSlides$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(getSlides, workGetSlides);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([watchGetSlides()]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":null,"metadata":{},"sourceType":"module"}