{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Checkbox } from 'antd';\nimport { useSelector } from 'react-redux';\nimport useCartActions from '../../../store/cart/useCartActions';\nimport { getBonus, addToCartObj } from '../../../constants/utils';\nimport { selectCart } from '../../../store/cart/reducer';\n\nconst useProductFullInfo = ({\n  product,\n  user,\n  wishlistChangeItemAction\n}) => {\n  const cart = useSelector(selectCart);\n  const isInCart = !!(cart === null || cart === void 0 ? void 0 : cart[product.id]);\n  const {\n    0: hasBattery,\n    1: setHasBattery\n  } = useState(false);\n  const {\n    messages\n  } = useIntl();\n  const {\n    0: count,\n    1: setCount\n  } = useState(1);\n  const text = useCallback(() => __jsx(\"span\", null, messages['local.can_use_bonus_if']), [messages['local.can_use_bonus_if']]);\n  const text2 = useCallback(() => __jsx(\"span\", null, \"\\u0532\\u0578\\u0576\\u0578\\u0582\\u057D\\u056B\\u0581 \\u056F\\u0561\\u0580\\u0578\\u0572 \\u0565\\u0584 \\u0585\\u0563\\u057F\\u057E\\u0565\\u056C \\u0574\\u0578\\u0582\\u057F\\u0584 \\u0563\\u0578\\u0580\\u056E\\u0565\\u056C\\u0578\\u0582 \\u0564\\u0565\\u057A\\u0584\\u0578\\u0582\\u0574\\u0589\"), []);\n  const {\n    cartAddProductAction\n  } = useCartActions();\n  const name = useMemo(() => product.langs[0].name, [product.name]);\n  const Price = useCallback(() => __jsx(\"span\", {\n    key: \"product_price\",\n    className: \"product_price\"\n  }, product.price * count, ' ', messages['local.dr'], \"\\u2024\"), [product.price, count]);\n  const LastPrice = useCallback(() => product.xmlPrice !== product.price ? __jsx(\"span\", {\n    className: \"old_price\"\n  }, product.xmlPrice * count, ' ', messages['local.dr'], \"\\u2024\") : null, [product.xmlPrice, product.price, count]);\n  const bonus = useMemo(() => user.bonusPercent && getBonus(product.price, user.bonusPercent, count), [user, product.price, user.bonusPercent, count]);\n  const battery = useMemo(() => {\n    const bat = product.accessories.find(accessory => accessory.ProductAccessoriesMap.type === 'battery');\n    if (bat === null || bat === void 0 ? void 0 : bat.xmlCount) return bat;\n    return null;\n  }, []);\n  const batteryPrice = useMemo(() => battery && battery.price, [battery]);\n  const AddBattery = useCallback(() => battery ? __jsx(\"div\", {\n    className: \"add_prod\"\n  }, __jsx(Checkbox, {\n    checked: hasBattery,\n    onChange: () => setHasBattery(!hasBattery)\n  }, messages['local.add_batteries'])) : '', [hasBattery, battery, setHasBattery, messages['local.add_batteries']]);\n\n  const addToCart = redirect => {\n    cartAddProductAction(addToCartObj({\n      hasBattery,\n      battery,\n      count,\n      product\n    }), redirect);\n  };\n\n  const addToCartAndRedirect = () => {\n    addToCart(true);\n  };\n\n  const changeWishlist = useCallback(() => {\n    wishlistChangeItemAction({\n      productId: product.id\n    });\n  });\n  return {\n    setHasBattery,\n    AddBattery,\n    hasBattery,\n    text,\n    setCount,\n    text2,\n    count,\n    messages,\n    name,\n    Price,\n    LastPrice,\n    bonus,\n    isInCart,\n    batteryPrice,\n    addToCart,\n    addToCartAndRedirect,\n    changeWishlist,\n    xmlCount: product.xmlCount\n  };\n};\n\nexport default useProductFullInfo;","map":null,"metadata":{},"sourceType":"module"}