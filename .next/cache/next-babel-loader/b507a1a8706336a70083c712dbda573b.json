{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, put, all, call, select } from '@redux-saga/core/effects';\nimport Router from 'next/router';\nimport message from 'antd/lib/message';\nimport Axios from '../services/Axios';\nimport { registration, loginSuccess, logoutSuccess, login, setLang, authorizationError, resetUserReducer, logout, authorizationLoading, getUserData, getUserDataSuccess, getUserDataError } from './action';\nimport { hideAll } from '../userEventListeners/action';\nimport { wishlistPopulate } from '../wishlist/action';\nimport { C_TOKEN, removeLocalStorageObj } from '../../constants/utils';\nimport { populateCart } from '../cart/action';\nimport { selectAuthorized, selectLang, selectUser } from './reducer';\nimport { getPageData } from '../pages-data/action';\nimport { deleteCookie, getCookie, setCookie } from '../../utils/cookies';\n\nfunction loginRequest(params) {\n  return Axios.request({\n    method: 'post',\n    url: '/api/user/signIn',\n    data: params\n  });\n}\n\nfunction* workLogin({\n  payload: {\n    emailOrPhone,\n    password,\n    rememberMe\n  }\n}) {\n  try {\n    const lang = yield select(selectLang);\n    yield put(authorizationLoading());\n    const {\n      data: {\n        token,\n        result\n      }\n    } = yield call(loginRequest, {\n      userName: emailOrPhone,\n      password,\n      rememberMe,\n      lang\n    });\n\n    if (rememberMe) {\n      setCookie(C_TOKEN, token, {\n        'max-age': 100 * 24 * 60 * 60\n      });\n    } else {\n      setCookie(C_TOKEN, token);\n    }\n\n    yield put(loginSuccess(_objectSpread({}, result)));\n    removeLocalStorageObj('cart');\n    removeLocalStorageObj('products');\n    yield put(getPageData({}));\n    yield put(wishlistPopulate());\n    yield put(populateCart());\n  } catch (error) {\n    var _error$response, _error$response$data;\n\n    const errorMessage = (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Something went wrong';\n    yield all([put(authorizationError({\n      errorText: errorMessage\n    })), put(resetUserReducer())]);\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(login, workLogin);\n}\n\nfunction registrationRequest(params) {\n  return Axios.request({\n    method: 'post',\n    url: '/api/user/signUp',\n    data: params\n  });\n}\n\nfunction* workRegistration({\n  payload: {\n    email,\n    password,\n    phone,\n    agreeTerms,\n    name,\n    surname,\n    successText = 'Please, confirm email'\n  }\n}) {\n  yield put(authorizationLoading());\n\n  try {\n    yield call(registrationRequest, {\n      email,\n      password,\n      retryPassword: password,\n      phone,\n      agreeTerms,\n      firstName: name,\n      lastName: surname,\n      isAcceptedRules: agreeTerms\n    });\n    message.success({\n      content: successText,\n      duration: 5\n    });\n    yield all([put(hideAll()), put(resetUserReducer())]);\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n\n    yield all([put(authorizationError({\n      errorText: (error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'No server response'\n    })), put(resetUserReducer())]);\n  }\n}\n\nfunction* watchRegistration() {\n  yield takeEvery(registration, workRegistration);\n}\n\nfunction getUserDataRequest(token) {\n  return Axios.request({\n    method: 'get',\n    url: `/api/user/info/${token}`\n  });\n}\n\nfunction* workGetUserData() {\n  const token = getCookie(C_TOKEN);\n\n  try {\n    if (!token) throw new Error();\n    const {\n      data: {\n        result\n      }\n    } = yield call(getUserDataRequest, token);\n    yield put(getUserDataSuccess());\n    yield put(loginSuccess(_objectSpread({}, result)));\n    localStorage.setItem('lang', result.lang);\n  } catch (error) {\n    if (error.response) {\n      localStorage.removeItem('cart');\n      sessionStorage.removeItem('cart');\n      localStorage.removeItem('products');\n      sessionStorage.removeItem('products');\n    }\n\n    deleteCookie(C_TOKEN);\n    yield put(getUserDataError());\n  }\n\n  try {\n    yield all([put(wishlistPopulate()), put(populateCart())]);\n  } catch (error) {}\n}\n\nfunction* watchGetUserData() {\n  yield takeEvery(getUserData, workGetUserData);\n}\n\nfunction* workLogout() {\n  try {\n    const user = yield select(selectUser);\n    if (!user.id) return;\n    deleteCookie(C_TOKEN);\n    localStorage.removeItem('products');\n    localStorage.removeItem('cart');\n    Router.push('/');\n    yield put(logoutSuccess());\n    yield put(wishlistPopulate());\n    yield put(populateCart());\n  } catch (error) {\n    yield put(authorizationError({\n      errorText: 'logout error'\n    }));\n  }\n}\n\nfunction changeLangRequest(data) {\n  return Axios.request({\n    url: '/api/user/changeLang',\n    method: 'put',\n    data\n  });\n}\n\nfunction* workSetLang({\n  payload\n}) {\n  try {\n    const isAuth = yield select(selectAuthorized);\n\n    if (isAuth) {\n      yield call(changeLangRequest, payload);\n    }\n\n    localStorage.setItem('lang', payload.lang);\n  } catch (e) {}\n}\n\nfunction* watchSetLang() {\n  yield takeEvery(setLang, workSetLang);\n}\n\nfunction* watchLogout() {\n  yield takeEvery(logout, workLogout);\n}\n\nexport { watchLogin, watchRegistration, watchLogout, watchGetUserData, watchSetLang };","map":null,"metadata":{},"sourceType":"module"}