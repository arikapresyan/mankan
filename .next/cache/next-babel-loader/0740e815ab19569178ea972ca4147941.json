{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, call, put } from '@redux-saga/core/effects';\nimport message from 'antd/lib/message';\nimport Axios from '../services/Axios';\nimport { APISuccess, APIError, APILoading, APISend, APIClear } from './action';\nconst LOADER_KEY = 'loaderKey';\n\nfunction sendAPIRequest(data) {\n  return Axios.request(_objectSpread({}, data));\n}\n\nexport function* workAPISend(action) {\n  const {\n    method,\n    url,\n    data,\n    headers,\n    successText = 'Success',\n    errorText = 'Something went wrong',\n    loadingText = 'Loading...'\n  } = action.payload;\n  yield put(APILoading());\n\n  try {\n    message.loading({\n      content: loadingText,\n      key: LOADER_KEY,\n      duration: 0\n    });\n    const res = yield call(sendAPIRequest, {\n      method,\n      url,\n      headers: headers || {},\n      data: data || null\n    });\n    const {\n      status\n    } = res;\n    message.success({\n      content: successText,\n      key: LOADER_KEY,\n      duration: 5\n    });\n    yield put(APISuccess({\n      responseText: successText,\n      status\n    }));\n  } catch (error) {\n    message.error({\n      content: errorText,\n      key: LOADER_KEY,\n      duration: 5\n    });\n    yield put(APIError({\n      responseText: errorText\n    }));\n  } finally {\n    yield put(APIClear());\n  }\n}\nexport function* watchAPISend() {\n  yield takeEvery(APISend, workAPISend);\n}","map":{"version":3,"sources":["/var/www/mankan-front/store/global-APIS/saga.js"],"names":["takeEvery","call","put","message","Axios","APISuccess","APIError","APILoading","APISend","APIClear","LOADER_KEY","sendAPIRequest","data","request","workAPISend","action","method","url","headers","successText","errorText","loadingText","payload","loading","content","key","duration","res","status","success","responseText","error","watchAPISend"],"mappings":";;;;;;AAAA,SACEA,SADF,EACaC,IADb,EACmBC,GADnB,QAEO,0BAFP;AAGA,OAAQC,OAAR,MAAsB,kBAAtB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SACEC,UADF,EACcC,QADd,EACwBC,UADxB,EACoCC,OADpC,EAC6CC,QAD7C,QAEO,UAFP;AAIA,MAAMC,UAAU,GAAG,WAAnB;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAOR,KAAK,CAACS,OAAN,mBACFD,IADE,EAAP;AAGD;;AAED,OAAO,UAAUE,WAAV,CAAsBC,MAAtB,EAA8B;AACnC,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,GAFI;AAGJL,IAAAA,IAHI;AAIJM,IAAAA,OAJI;AAKJC,IAAAA,WAAW,GAAG,SALV;AAMJC,IAAAA,SAAS,GAAG,sBANR;AAOJC,IAAAA,WAAW,GAAG;AAPV,MAQFN,MAAM,CAACO,OARX;AASA,QAAMpB,GAAG,CAACK,UAAU,EAAX,CAAT;;AACA,MAAI;AACFJ,IAAAA,OAAO,CAACoB,OAAR,CAAgB;AAAEC,MAAAA,OAAO,EAAEH,WAAX;AAAwBI,MAAAA,GAAG,EAAEf,UAA7B;AAAyCgB,MAAAA,QAAQ,EAAE;AAAnD,KAAhB;AACA,UAAMC,GAAG,GAAG,MAAM1B,IAAI,CAACU,cAAD,EAAiB;AACrCK,MAAAA,MADqC;AAErCC,MAAAA,GAFqC;AAGrCC,MAAAA,OAAO,EAAEA,OAAO,IAAI,EAHiB;AAIrCN,MAAAA,IAAI,EAAEA,IAAI,IAAI;AAJuB,KAAjB,CAAtB;AAMA,UAAM;AAAEgB,MAAAA;AAAF,QAAaD,GAAnB;AACAxB,IAAAA,OAAO,CAAC0B,OAAR,CAAgB;AAAEL,MAAAA,OAAO,EAAEL,WAAX;AAAwBM,MAAAA,GAAG,EAAEf,UAA7B;AAAyCgB,MAAAA,QAAQ,EAAE;AAAnD,KAAhB;AACA,UAAMxB,GAAG,CAACG,UAAU,CAAC;AAAEyB,MAAAA,YAAY,EAAEX,WAAhB;AAA6BS,MAAAA;AAA7B,KAAD,CAAX,CAAT;AACD,GAXD,CAWE,OAAOG,KAAP,EAAc;AACd5B,IAAAA,OAAO,CAAC4B,KAAR,CAAc;AAAEP,MAAAA,OAAO,EAAEJ,SAAX;AAAsBK,MAAAA,GAAG,EAAEf,UAA3B;AAAuCgB,MAAAA,QAAQ,EAAE;AAAjD,KAAd;AACA,UAAMxB,GAAG,CACPI,QAAQ,CAAC;AACPwB,MAAAA,YAAY,EAAEV;AADP,KAAD,CADD,CAAT;AAKD,GAlBD,SAkBU;AACR,UAAMlB,GAAG,CAACO,QAAQ,EAAT,CAAT;AACD;AACF;AAGD,OAAO,UAAUuB,YAAV,GAAyB;AAC9B,QAAMhC,SAAS,CAACQ,OAAD,EAAUM,WAAV,CAAf;AACD","sourcesContent":["import {\n  takeEvery, call, put,\n} from '@redux-saga/core/effects';\nimport  message  from 'antd/lib/message';\nimport Axios from '../services/Axios';\nimport {\n  APISuccess, APIError, APILoading, APISend, APIClear,\n} from './action';\n\nconst LOADER_KEY = 'loaderKey';\n\nfunction sendAPIRequest(data) {\n  return Axios.request({\n    ...data,\n  });\n}\n\nexport function* workAPISend(action) {\n  const {\n    method,\n    url,\n    data,\n    headers,\n    successText = 'Success',\n    errorText = 'Something went wrong',\n    loadingText = 'Loading...',\n  } = action.payload;\n  yield put(APILoading());\n  try {\n    message.loading({ content: loadingText, key: LOADER_KEY, duration: 0 });\n    const res = yield call(sendAPIRequest, {\n      method,\n      url,\n      headers: headers || {},\n      data: data || null,\n    });\n    const { status } = res;\n    message.success({ content: successText, key: LOADER_KEY, duration: 5 });\n    yield put(APISuccess({ responseText: successText, status }));\n  } catch (error) {\n    message.error({ content: errorText, key: LOADER_KEY, duration: 5 });\n    yield put(\n      APIError({\n        responseText: errorText,\n      }),\n    );\n  } finally {\n    yield put(APIClear());\n  }\n}\n\n\nexport function* watchAPISend() {\n  yield takeEvery(APISend, workAPISend);\n}\n"]},"metadata":{},"sourceType":"module"}