{"ast":null,"code":"var _jsxFileName = \"/var/www/mankan-front/components/modals/login-modal/LoginModal.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useMemo } from 'react';\nimport Button from 'antd/lib/button';\nimport Checkbox from 'antd/lib/checkbox';\nimport Form from 'antd/lib/form';\nimport Input from 'antd/lib/input';\nimport Modal from 'antd/lib/modal';\nimport { useFormik } from 'formik';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { login } from '../../../store/user/action';\nimport { hideAll } from '../../../store/userEventListeners/action';\nimport { getLoginSchema } from '../../../utils/validationSchemas';\n\nfunction LoginModal(props) {\n  const {\n    messages\n  } = useIntl();\n  const {\n    visible,\n    handleHideModal,\n    onForgotPassword,\n    onMoveToRegistration,\n    loginAction,\n    hideAllAction,\n    userAuthorisationLoading,\n    authSuccess,\n    errorText\n  } = props;\n  const validationSchema = useMemo(() => getLoginSchema(messages), [messages]);\n  const formik = useFormik({\n    initialValues: {\n      emailOrPhone: '',\n      password: '',\n      rememberMe: false\n    },\n    onSubmit: values => {\n      loginAction(_objectSpread({}, values));\n    },\n    validationSchema\n  });\n  useEffect(() => {\n    if (authSuccess) {\n      hideAllAction();\n    }\n  }, [authSuccess]);\n  useEffect(() => {\n    if (errorText) {\n      if (errorText.includes('Wrong email')) {\n        formik.setErrors({\n          globalError: messages['local.wrong_email_or_password']\n        });\n      } else {\n        formik.setErrors({\n          globalError: errorText\n        });\n      }\n    }\n  }, [errorText]);\n  const {\n    values,\n    touched,\n    errors,\n    handleChange,\n    handleSubmit\n  } = formik;\n  return __jsx(Modal, {\n    destroyOnClose: true,\n    title: \"\",\n    centered: true,\n    visible: visible,\n    onCancel: handleHideModal,\n    footer: null,\n    className: \"login_modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, messages['local.login']), __jsx(Form, {\n    className: \"login-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, errors.globalError && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 32\n    }\n  }, errors.globalError), __jsx(Form.Item, {\n    validateStatus: errors.emailOrPhone && touched.emailOrPhone && 'error',\n    help: touched.emailOrPhone && errors.emailOrPhone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    name: \"emailOrPhone\",\n    placeholder: messages['local.email'],\n    value: values.emailOrPhone,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    validateStatus: errors.password && touched.password && 'error',\n    help: touched.password && errors.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    name: \"password\",\n    type: \"password\",\n    placeholder: messages['local.password'],\n    value: values.password,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, __jsx(Checkbox, {\n    name: \"rememberMe\",\n    checked: +values.rememberMe,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, messages['local.remember']), __jsx(\"span\", {\n    className: \"forgot_password\",\n    onClick: onForgotPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, messages['local.forgot_password'])), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"login_btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, userAuthorisationLoading && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 42\n    }\n  }, \"loading ...\"), __jsx(Button, {\n    disabled: userAuthorisationLoading,\n    type: \"primary\",\n    htmlType: \"submit\",\n    className: \"login-form-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, messages['local.login1'])), __jsx(\"div\", {\n    className: \"move_to_registration\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    onClick: onMoveToRegistration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, messages['local.registration'])))));\n}\n\nfunction mapStateToProps({\n  user: {\n    loading,\n    authSuccess,\n    errorText\n  }\n}) {\n  return {\n    userAuthorisationLoading: loading,\n    authSuccess,\n    errorText\n  };\n}\n\nLoginModal.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  handleHideModal: PropTypes.func.isRequired,\n  onForgotPassword: PropTypes.func.isRequired,\n  onMoveToRegistration: PropTypes.func.isRequired,\n  loginAction: PropTypes.func.isRequired,\n  hideAllAction: PropTypes.func,\n  userAuthorisationLoading: PropTypes.bool,\n  authSuccess: PropTypes.bool,\n  errorText: PropTypes.string\n};\nexport default connect(mapStateToProps, {\n  loginAction: login,\n  hideAllAction: hideAll\n})(LoginModal);","map":{"version":3,"sources":["/var/www/mankan-front/components/modals/login-modal/LoginModal.js"],"names":["React","useEffect","useMemo","Button","Checkbox","Form","Input","Modal","useFormik","connect","PropTypes","useIntl","login","hideAll","getLoginSchema","LoginModal","props","messages","visible","handleHideModal","onForgotPassword","onMoveToRegistration","loginAction","hideAllAction","userAuthorisationLoading","authSuccess","errorText","validationSchema","formik","initialValues","emailOrPhone","password","rememberMe","onSubmit","values","includes","setErrors","globalError","touched","errors","handleChange","handleSubmit","mapStateToProps","user","loading","propTypes","bool","isRequired","func","string"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react';\r\n\r\nimport Button from 'antd/lib/button';\r\nimport Checkbox from 'antd/lib/checkbox';\r\nimport Form from 'antd/lib/form';\r\nimport Input from 'antd/lib/input';\r\nimport Modal from 'antd/lib/modal';\r\nimport { useFormik } from 'formik';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { useIntl } from 'react-intl';\r\nimport { login } from '../../../store/user/action';\r\nimport { hideAll } from '../../../store/userEventListeners/action';\r\nimport { getLoginSchema } from '../../../utils/validationSchemas';\r\n\r\n\r\nfunction LoginModal(props) {\r\n  const { messages } = useIntl();\r\n  const {\r\n    visible,\r\n    handleHideModal,\r\n    onForgotPassword,\r\n    onMoveToRegistration,\r\n    loginAction,\r\n    hideAllAction,\r\n    userAuthorisationLoading,\r\n    authSuccess,\r\n    errorText,\r\n  } = props;\r\n  const validationSchema = useMemo(() => getLoginSchema(messages), [messages]);\r\n  const formik = useFormik({\r\n    initialValues: { emailOrPhone: '', password: '', rememberMe: false },\r\n    onSubmit: (values) => {\r\n      loginAction({ ...values });\r\n    },\r\n    validationSchema,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (authSuccess) {\r\n      hideAllAction();\r\n    }\r\n  }, [authSuccess]);\r\n\r\n  useEffect(() => {\r\n    if (errorText) {\r\n      if (errorText.includes('Wrong email')) {\r\n        formik.setErrors({ globalError: messages['local.wrong_email_or_password'] });\r\n      } else {\r\n        formik.setErrors({ globalError: errorText });\r\n      }\r\n    }\r\n  }, [errorText]);\r\n  const {\r\n    values,\r\n    touched,\r\n    errors,\r\n    handleChange,\r\n    handleSubmit,\r\n  } = formik;\r\n  return (\r\n    <Modal\r\n      destroyOnClose\r\n      title=\"\"\r\n      centered\r\n      visible={visible}\r\n      onCancel={handleHideModal}\r\n      footer={null}\r\n      className=\"login_modal\"\r\n    >\r\n      <h2>{messages['local.login']}</h2>\r\n      <Form className=\"login-form\" onSubmit={handleSubmit}>\r\n        {errors.globalError && <p>{errors.globalError}</p>}\r\n        <Form.Item\r\n          validateStatus={errors.emailOrPhone && touched.emailOrPhone && 'error'}\r\n          help={touched.emailOrPhone && errors.emailOrPhone}\r\n        >\r\n          <Input\r\n            name=\"emailOrPhone\"\r\n            placeholder={messages['local.email']}\r\n            value={values.emailOrPhone}\r\n            onChange={handleChange}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          validateStatus={errors.password && touched.password && 'error'}\r\n          help={touched.password && errors.password}\r\n        >\r\n          <Input\r\n            name=\"password\"\r\n            type=\"password\"\r\n            placeholder={messages['local.password']}\r\n            value={values.password}\r\n            onChange={handleChange}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Checkbox\r\n            name=\"rememberMe\"\r\n            checked={+values.rememberMe}\r\n            onChange={handleChange}\r\n          >\r\n\r\n            {messages['local.remember']}\r\n\r\n          </Checkbox>\r\n          <span className=\"forgot_password\" onClick={onForgotPassword}>\r\n            {messages['local.forgot_password']}\r\n          </span>\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <div className=\"login_btn\">\r\n\r\n            {/*  TODO: ask about preloader */}\r\n            {userAuthorisationLoading && <p>loading ...</p>}\r\n            <Button disabled={userAuthorisationLoading} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n              {messages['local.login1']}\r\n            </Button>\r\n          </div>\r\n          <div className=\"move_to_registration\">\r\n            <span onClick={onMoveToRegistration}>{messages['local.registration']}</span>\r\n          </div>\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps({ user: { loading, authSuccess, errorText } }) {\r\n  return {\r\n    userAuthorisationLoading: loading,\r\n    authSuccess,\r\n    errorText,\r\n  };\r\n}\r\n\r\n\r\nLoginModal.propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  handleHideModal: PropTypes.func.isRequired,\r\n  onForgotPassword: PropTypes.func.isRequired,\r\n  onMoveToRegistration: PropTypes.func.isRequired,\r\n  loginAction: PropTypes.func.isRequired,\r\n  hideAllAction: PropTypes.func,\r\n  userAuthorisationLoading: PropTypes.bool,\r\n  authSuccess: PropTypes.bool,\r\n  errorText: PropTypes.string,\r\n};\r\n\r\nexport default connect(mapStateToProps, { loginAction: login, hideAllAction: hideAll })(LoginModal);\r\n"]},"metadata":{},"sourceType":"module"}