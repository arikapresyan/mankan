{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useFormik } from 'formik';\nimport { getRegistrationSchema } from '../../../utils/validationSchemas';\nexport default function useRegistration({\n  registrationAction,\n  hideAllAction,\n  authSuccess,\n  errorText\n}) {\n  const {\n    messages,\n    formatMessage\n  } = useIntl();\n  const validationSchema = useMemo(() => getRegistrationSchema(messages), [messages]);\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      surname: '',\n      email: '',\n      phone: '',\n      password: '',\n      repeatPassword: '',\n      agreeTerms: false\n    },\n    onSubmit: values => {\n      registrationAction(_objectSpread(_objectSpread({}, values), {}, {\n        successText: messages['locale.confirm_email']\n      }));\n    },\n    validationSchema\n  });\n  useEffect(() => {\n    if (authSuccess) {\n      hideAllAction();\n    }\n  }, [authSuccess]);\n  useEffect(() => {\n    if (errorText) {\n      if (errorText.includes('email')) {\n        formik.setErrors({\n          email: messages['local.email_already_exist']\n        });\n      } else formik.setErrors({\n        globalError: errorText\n      });\n    }\n  }, [errorText]);\n  return {\n    formik,\n    messages,\n    formatMessage\n  };\n}","map":null,"metadata":{},"sourceType":"module"}