{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeLatest, put, select, call, delay } from '@redux-saga/core/effects';\nimport { getMenuList, getMenuListSuccess } from './action'; // eslint-disable-next-line import/no-cycle\n\nimport Axios from '../services/Axios';\nimport { selectLang } from '../user/reducer';\nimport { getProductAge } from '../../constants/utils'; // import apiPaths from '../../API_Paths/userAPI';\n// import Axios from 'axios';\n\nfunction getRequestBody(name) {\n  // boys own infant girls all\n  switch (name) {\n    case 'own':\n      return {\n        ownBrand: true\n      };\n\n    case 'infant':\n    case 'infants':\n      return {\n        infant: true\n      };\n\n    case 'boy':\n    case 'boys':\n      return {\n        sex: 'BOY'\n      };\n\n    case 'girl':\n    case 'girls':\n      return {\n        sex: 'GIRL'\n      };\n\n    default:\n      return {};\n  }\n}\n\nfunction getMenuListRequest(data) {\n  return Axios.request({\n    url: '/api/product/navFilters',\n    method: 'post',\n    data\n  });\n}\n\nfunction getBestSellerRequest(data) {\n  return Axios.request({\n    url: '/api/product/navFiltersBestSeller',\n    method: 'post',\n    data\n  });\n}\n\nfunction getNavFilteredDataToView({\n  brand,\n  meaning,\n  age,\n  type,\n  messages\n}) {\n  const brandKeys = Object.keys(brand);\n  const brandToSend = [];\n  brandKeys.forEach(key => {\n    brandToSend.push({\n      id: brand[key].id,\n      name: brand[key].name,\n      text: brand[key].name\n    });\n  });\n  const meaningKeys = Object.keys(meaning);\n  const meaningToSend = [];\n  meaningKeys.forEach(key => {\n    meaningToSend.push({\n      id: meaning[key].id,\n      name: meaning[key].langs[0].name,\n      text: meaning[key].langs[0].name\n    });\n  });\n  const ageToSend = [];\n  const ageKeys = Object.keys(age);\n  ageKeys.forEach(key => {\n    ageToSend.push({\n      id: age[key].id,\n      name: getProductAge(age[key].minAge, age[key].maxAge, messages),\n      text: getProductAge(age[key].minAge, age[key].maxAge, messages)\n    });\n  });\n  const typeKeys = Object.keys(type);\n  const typeToSend = [];\n  typeKeys.forEach(key => {\n    typeToSend.push({\n      name: type[key].langs[0].name,\n      text: type[key].langs[0].name,\n      id: type[key].id\n    });\n  });\n  return {\n    type: typeToSend,\n    brand: brandToSend,\n    age: ageToSend,\n    meaning: meaningToSend\n  };\n}\n\nfunction* workMenuList({\n  payload: {\n    name,\n    messages\n  }\n}) {\n  const lang = yield select(selectLang);\n\n  try {\n    const filterData = _objectSpread({}, getRequestBody(name), {\n      lang\n    });\n\n    const {\n      data: {\n        filters: {\n          brand,\n          productUsage: meaning,\n          productAge: age,\n          productType: type\n        }\n      }\n    } = yield call(getMenuListRequest, filterData);\n    const {\n      data: {\n        result: {\n          rows\n        }\n      }\n    } = yield call(getBestSellerRequest, filterData);\n    yield put(getMenuListSuccess({\n      data: getNavFilteredDataToView({\n        brand,\n        meaning,\n        age,\n        type,\n        messages\n      }),\n      name,\n      bestseller: rows[0]\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* watchMenuList() {\n  yield takeLatest(getMenuList, workMenuList);\n}\n\nexport { // eslint-disable-next-line import/prefer-default-export\nwatchMenuList };","map":null,"metadata":{},"sourceType":"module"}