{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useMemo } from 'react';\nimport { Form, Row, Col, Button, Divider, message } from 'antd';\nimport { useIntl } from 'react-intl';\nimport nextId from 'react-id-generator';\nimport InputFieldWidthLocalState from '../../../common/InputFieldWidthLocalState';\nimport useApplyOnlineForm from './useApplyOnlineForm';\nimport SkillsFields from './components/skills-fields/SkillsFields';\nimport Experience from './components/experiance/Experience';\nimport ImageUpload from '../../../vacancy/components/ImageUpload';\nimport { initialEducationObj } from './constants';\n\nfunction ApplyOnlineForm({\n  handleClose,\n  id\n}) {\n  const {\n    messages\n  } = useIntl();\n  const {\n    changeField,\n    formik,\n    loading\n  } = useApplyOnlineForm(handleClose, id);\n  const {\n    setFieldTouched,\n    setFieldValue,\n    handleSubmit,\n    touched,\n    values,\n    errors,\n    isValid,\n    submitCount\n  } = formik;\n  const educationFields = useMemo(() => [{\n    title: `${messages['local.degree_of_education']} *`,\n    placeholder: messages['local.ex.bachelor'],\n    name: 'degreeOfEducation'\n  }, {\n    title: messages['local.educational_complex'],\n    placeholder: messages['local.ex.YSU'],\n    name: 'educationalComplex'\n  }, {\n    title: messages['local.faculty'],\n    placeholder: messages['local.ex.economics'],\n    name: 'faculty'\n  }], [messages]);\n  const professionalExperience = useMemo(() => [{\n    title: messages['local.company'],\n    placeholder: messages['local.ex․Mankan'],\n    name: 'company'\n  }, {\n    title: messages['local.position'],\n    placeholder: messages['local.ex․cashier'],\n    name: 'position'\n  }], [messages]);\n\n  const setSkillValue = (index, event, name) => {\n    setFieldValue(`${name}[${index}].value`, event.target.value);\n  };\n\n  const setSkillPoints = (index, val, name) => {\n    setFieldValue(`${name}[${index}].points`, val[val.length - 1]);\n  };\n\n  const addMorSkills = name => {\n    const cloneValues = [...values[name]];\n    cloneValues.push({\n      name: '',\n      points: null,\n      id: nextId()\n    });\n    setFieldValue(name, cloneValues);\n  };\n\n  const removeFromSkills = (name, index) => {\n    const cloneValues = [...values[name]];\n    cloneValues.splice(index, 1);\n    setFieldValue(name, cloneValues);\n  };\n\n  const changeSubFormValue = (value, formName, name, index) => {\n    setFieldValue(`${formName}[${index}]${name}`, value);\n    setTimeout(() => {\n      setFieldTouched(`${formName}[${index}]${name}`, true);\n    }, 0);\n  };\n\n  const addSubForm = formName => {\n    const cloneSubForm = [...values[formName]];\n    cloneSubForm.push(_objectSpread({\n      id: nextId()\n    }, formName === 'education' ? _objectSpread({}, initialEducationObj) : {}));\n    setFieldValue(formName, cloneSubForm);\n  };\n\n  const removeSubForm = (formName, index) => {\n    const cloneValues = [...values[formName]];\n    cloneValues.splice(index, 1);\n    setFieldValue(formName, cloneValues);\n  };\n\n  const handleUploadChange = info => {\n    const isJpgOrPng = info.file.type === 'image/jpeg' || info.file.type === 'image/png';\n\n    if (!isJpgOrPng) {\n      message.error('You can only upload JPG/PNG file!');\n    } else setFieldValue('imgList', [...info.fileList]);\n\n    if (info.file.status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully`);\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n      setFieldValue('imgList', []);\n    }\n  };\n\n  return __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: \"form_info_box\"\n  }, __jsx(Row, {\n    gutter: 32\n  }, __jsx(ImageUpload, {\n    onChange: handleUploadChange,\n    listType: \"picture\",\n    name: \"imgList\",\n    fileList: values.imgList,\n    error: touched.imgList && errors.imgList\n  }), __jsx(Col, {\n    xs: 24\n  }, __jsx(Form.Item, {\n    label: `${messages['local.name_surname']} *`,\n    validateStatus: errors.fullName && touched.fullName && 'error',\n    help: touched.fullName && errors.fullName\n  }, __jsx(InputFieldWidthLocalState, {\n    placeholder: messages['local.not_listed'],\n    name: \"fullName\",\n    defaultValue: values.fullName,\n    type: \"text\",\n    onBlur: changeField\n  }))), __jsx(Col, {\n    xs: 24\n  }, __jsx(Form.Item, {\n    label: `${messages['local.tel']} *`,\n    validateStatus: errors.phone && touched.phone && 'error',\n    help: touched.phone && errors.phone\n  }, __jsx(InputFieldWidthLocalState, {\n    placeholder: messages['local.not_listed'],\n    name: \"phone\",\n    defaultValue: values.phone,\n    type: \"text\",\n    onBlur: changeField\n  }))), __jsx(Col, {\n    xs: 24\n  }, __jsx(Form.Item, {\n    label: `${messages['local.email']}*`,\n    validateStatus: errors.email && touched.email && 'error',\n    help: touched.email && errors.email\n  }, __jsx(InputFieldWidthLocalState, {\n    placeholder: messages['local.not_listed'],\n    name: \"email\",\n    defaultValue: values.email,\n    type: \"email\",\n    onBlur: changeField\n  }))), __jsx(SkillsFields, {\n    name: \"languages\",\n    hasPoints: true,\n    items: values.languages,\n    label: messages['local.knowledge_of_languages'],\n    onBlur: setSkillValue,\n    onChangePoints: setSkillPoints,\n    addMorSkills: addMorSkills,\n    removeFromSkills: removeFromSkills,\n    addText: messages['local.add_another_language'],\n    placeholder: messages['local.Armenian']\n  }))), __jsx(Divider, null), __jsx(\"div\", {\n    className: \"form_info_box\"\n  }, __jsx(\"h3\", null, messages['local.education']), __jsx(Row, {\n    gutter: 32\n  }, __jsx(Experience, {\n    formName: \"education\",\n    fields: educationFields,\n    inProcessText: messages['local.still_learning'],\n    addText: messages['local.add_another_educational_complex'],\n    data: values.education,\n    changeValue: changeSubFormValue,\n    addSubForm: addSubForm,\n    removeSubForm: removeSubForm,\n    errors: errors.education || [],\n    touched: touched.education || []\n  }))), __jsx(Divider, null), __jsx(\"div\", {\n    className: \"form_info_box\"\n  }, __jsx(\"h3\", null, messages['local.professional_experience']), __jsx(Row, {\n    gutter: 32\n  }, __jsx(Experience, {\n    formName: \"professionalExperience\",\n    fields: professionalExperience,\n    inProcessText: messages['local.still_working'],\n    addText: messages['local.add_other_business_exp'],\n    data: values.professionalExperience,\n    changeValue: changeSubFormValue,\n    addSubForm: addSubForm,\n    removeSubForm: removeSubForm,\n    errors: errors.professionalExperience || [],\n    touched: touched.professionalExperience || []\n  }))), __jsx(Divider, null), __jsx(\"div\", {\n    className: \"form_info_box\"\n  }, __jsx(\"h3\", null, messages['local.software_skills']), __jsx(Row, {\n    gutter: 32\n  }, __jsx(SkillsFields, {\n    name: \"softwareSkills\",\n    hasPoints: true,\n    items: values.softwareSkills,\n    label: messages['local.project_name'],\n    onBlur: setSkillValue,\n    onChangePoints: setSkillPoints,\n    addMorSkills: addMorSkills,\n    removeFromSkills: removeFromSkills,\n    placeholder: messages['local.ex.word'],\n    addText: messages['local.add_another_social']\n  }))), __jsx(Divider, null), __jsx(\"div\", {\n    className: \"form_info_box\"\n  }, __jsx(\"h3\", null, messages['local.preferences']), __jsx(Row, {\n    gutter: 32\n  }, __jsx(SkillsFields, {\n    name: \"favorite\",\n    hasPoints: false,\n    items: values.favorite,\n    label: messages['local.project_name'],\n    onBlur: setSkillValue,\n    onChangePoints: setSkillPoints,\n    addMorSkills: addMorSkills,\n    removeFromSkills: removeFromSkills,\n    placeholder: messages['local.ex.reading'],\n    addText: messages['local.add_another_favorite']\n  }))), __jsx(Divider, null), __jsx(\"div\", {\n    className: \"form_info_box\"\n  }, __jsx(\"h3\", null, messages['local.social_networks']), __jsx(Row, {\n    gutter: 32\n  }, __jsx(SkillsFields, {\n    name: \"socialNetwork\",\n    hasPoints: false,\n    fullWidth: true,\n    items: values.socialNetwork,\n    label: messages['local.project_name'],\n    onBlur: setSkillValue,\n    onChangePoints: setSkillPoints,\n    addMorSkills: addMorSkills,\n    removeFromSkills: removeFromSkills,\n    placeholder: messages['local.ex․facebook'],\n    addText: messages['local.add_another_social']\n  }))), __jsx(Divider, null), __jsx(\"div\", {\n    className: \"form_info_box\"\n  }, __jsx(Row, {\n    gutter: 32\n  }, __jsx(Col, {\n    xs: 24\n  }, __jsx(Form.Item, {\n    label: messages['local.expect_from_our_team']\n  }, __jsx(InputFieldWidthLocalState, {\n    placeholder: messages['locaol.write_a_review'],\n    name: \"description1\",\n    defaultValue: values.description1,\n    type: \"description1\",\n    onBlur: changeField\n  }))), __jsx(Col, {\n    xs: 24\n  }, __jsx(Form.Item, {\n    label: messages['local.future_position']\n  }, __jsx(InputFieldWidthLocalState, {\n    placeholder: messages['locaol.write_a_review'],\n    name: \"description2\",\n    defaultValue: values.description2,\n    type: \"description2\",\n    onBlur: changeField\n  }))))), __jsx(Form.Item, null, submitCount > 0 && !isValid && messages['local.errorText'], __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    className: \"send_btn\"\n  }, messages['local.send'])));\n}\n\nexport default ApplyOnlineForm;","map":null,"metadata":{},"sourceType":"module"}