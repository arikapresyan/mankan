{"ast":null,"code":"import { useFormik } from 'formik';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport message from 'antd/lib/message';\nimport { selectUser } from '../../../../store/user/reducer';\nimport { getSingleData } from '../../../../store/single-data/action';\nimport { selectSingleData } from '../../../../store/single-data/reducer';\nimport { getInitialValues } from './constants';\nimport { sendOrder } from '../../../../store/cart/action';\nimport { getOrderSchema } from '../../../../utils/validationSchemas';\nimport { getBonus } from '../../../../constants/utils';\nimport useCartPrices from '../../../../hooks/useCartPrices';\nexport default function useConfirmOrder(handleHideModal, data) {\n  var _useIntl = useIntl(),\n      messages = _useIntl.messages;\n\n  var user = useSelector(selectUser);\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(selectSingleData),\n      singleData = _useSelector.paymentDelivery;\n\n  var orderStatus = useSelector(function (_ref) {\n    var cart = _ref.cart;\n    return cart.order;\n  });\n  var initialValues = useMemo(function () {\n    return getInitialValues(user);\n  }, []);\n  var sendOrderAction = useCallback(function (payload) {\n    dispatch(sendOrder(payload));\n  }, []);\n  var cartData = data.cartData,\n      promoCodeData = data.promoCodeData,\n      bonusPercent = data.bonusPercent;\n\n  var _useCartPrices = useCartPrices(cartData, promoCodeData),\n      deliveryPrice = _useCartPrices.deliveryPrice,\n      fullNewPrice = _useCartPrices.fullNewPrice,\n      fullPrice = _useCartPrices.fullPrice,\n      total = _useCartPrices.total;\n\n  var bonus = useMemo(function () {\n    return getBonus(fullNewPrice || fullPrice, bonusPercent || 2, 1);\n  }, [bonusPercent, fullNewPrice, fullPrice]);\n\n  var _useState = useState([]),\n      dateInfo = _useState[0],\n      setDateInfo = _useState[1];\n\n  useEffect(function () {\n    dispatch(getSingleData({\n      data: {\n        name: 'paymentDelivery'\n      }\n    }));\n  }, [getSingleData, dispatch]);\n  useEffect(function () {\n    if (singleData.data && !dateInfo.length) {\n      setDateInfo(singleData.data);\n    }\n  }, [singleData]);\n  var validationSchema = useMemo(function () {\n    return getOrderSchema(messages);\n  }, [messages]);\n  var formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values) {\n      if (values.method === 3 && user.bonus < total) {\n        message.warning(messages['local.not_enough_bonus']);\n        return;\n      }\n\n      var messageTexts = {\n        errorText: messages['local.errorText'],\n        successText: messages['local.successText']\n      };\n      sendOrderAction({\n        values: values,\n        messageTexts: messageTexts,\n        promo: promoCodeData === null || promoCodeData === void 0 ? void 0 : promoCodeData.code\n      });\n    }\n  });\n  useEffect(function () {\n    if (!orderStatus.loading && !orderStatus.error && formik.isSubmitting) handleHideModal();\n  }, [orderStatus]);\n  return {\n    formik: formik,\n    dateInfo: dateInfo,\n    loading: orderStatus.loading,\n    other: {\n      bonus: bonus,\n      total: total,\n      deliveryPrice: deliveryPrice,\n      fullNewPrice: fullNewPrice,\n      fullPrice: fullPrice\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}