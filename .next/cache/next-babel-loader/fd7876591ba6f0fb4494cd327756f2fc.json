{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, put, call, takeEvery, select } from 'redux-saga/effects';\nimport Axios from '../services/Axios';\nimport { getSingleData, getSingleDataError, getSingleDataSuccess, resetSingleData } from './action';\nimport { selectLang } from '../user/reducer';\n\nasync function getPaymentDeliveryRequest() {\n  try {\n    const {\n      data: {\n        result\n      }\n    } = await Axios.request({\n      method: 'get',\n      url: '/api/user/deliveryWeekTimeNew'\n    }); // const { data: { result: { week: days, time } } } = await Axios.request({ method: 'get', url: '/api/user/deliveryWeekTime' });\n    //\n    //\n    //   const res = {\n    //     time: time.filter((day) => day).map((tameStr) => {\n    //       const [hour, min] = tameStr.split(':');\n    //       const start = new Date(new Date().setHours(hour, min));\n    //       const end = new Date(new Date().setHours(+hour === 24 ? 1 : +hour + 1, min));\n    //       return {\n    //         start,\n    //         end,\n    //       };\n    //     }),\n    //     days,\n    //   };\n\n    return result;\n  } catch (e) {\n    return null;\n  }\n}\n\nasync function getPromoCode(promoCode) {\n  const {\n    data: {\n      result\n    }\n  } = await Axios({\n    method: 'get',\n    url: `/api/user/promoCode/${promoCode}`\n  });\n  return result;\n}\n\nasync function getUsages(data) {\n  const response = await Axios({\n    method: 'post',\n    url: '/api/product/usage',\n    data: {\n      lang: data.lang\n    }\n  });\n  return response.data.result;\n}\n\nasync function getRequest(data) {\n  let res;\n\n  switch (data.name) {\n    case 'paymentDelivery':\n      res = await getPaymentDeliveryRequest();\n      return res;\n\n    case 'promoCode':\n      res = await getPromoCode(data.promoCode);\n      return res;\n\n    case 'usage':\n      res = await getUsages(data);\n      return res;\n\n    default:\n      return null;\n  }\n}\n\nfunction* workGetSingleData({\n  payload: {\n    data\n  }\n}) {\n  try {\n    const lang = yield select(selectLang);\n    const result = yield call(getRequest, _objectSpread(_objectSpread({}, data), {}, {\n      lang\n    }));\n    yield put(getSingleDataSuccess({\n      data: result,\n      name: data.name\n    }));\n  } catch (error) {\n    yield put(getSingleDataError({\n      name: data.name\n    }));\n  } finally {\n    yield put(resetSingleData({\n      name: data.name\n    }));\n  }\n}\n\nfunction* watchGetSingleData() {\n  yield takeEvery(getSingleData, workGetSingleData);\n}\n\nexport default function* () {\n  yield all([watchGetSingleData()]);\n}","map":{"version":3,"sources":["/var/www/mankan-front/store/single-data/saga.js"],"names":["all","put","call","takeEvery","select","Axios","getSingleData","getSingleDataError","getSingleDataSuccess","resetSingleData","selectLang","getPaymentDeliveryRequest","data","result","request","method","url","e","getPromoCode","promoCode","getUsages","response","lang","getRequest","res","name","workGetSingleData","payload","error","watchGetSingleData"],"mappings":"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","sourcesContent":["import {\n  all, put, call, takeEvery, select,\n} from 'redux-saga/effects';\nimport Axios from '../services/Axios';\nimport {\n  getSingleData,\n  getSingleDataError,\n  getSingleDataSuccess,\n  resetSingleData,\n} from './action';\nimport { selectLang } from '../user/reducer';\n\nasync function getPaymentDeliveryRequest() {\n  try {\n    const { data: { result } } = await Axios.request({ method: 'get', url: '/api/user/deliveryWeekTimeNew' });\n    // const { data: { result: { week: days, time } } } = await Axios.request({ method: 'get', url: '/api/user/deliveryWeekTime' });\n    //\n    //\n    //   const res = {\n    //     time: time.filter((day) => day).map((tameStr) => {\n    //       const [hour, min] = tameStr.split(':');\n    //       const start = new Date(new Date().setHours(hour, min));\n    //       const end = new Date(new Date().setHours(+hour === 24 ? 1 : +hour + 1, min));\n    //       return {\n    //         start,\n    //         end,\n    //       };\n    //     }),\n    //     days,\n    //   };\n\n\n    return result;\n  } catch (e) {\n    return null;\n  }\n}\n\nasync function getPromoCode(promoCode) {\n  const { data: { result } } = await Axios({\n    method: 'get',\n    url: `/api/user/promoCode/${promoCode}`,\n  });\n  return result;\n}\nasync function getUsages(data) {\n  const response = await Axios({\n    method: 'post',\n    url: '/api/product/usage',\n    data: {\n      lang: data.lang,\n    },\n  });\n  return response.data.result;\n}\n\nasync function getRequest(data) {\n  let res;\n  switch (data.name) {\n    case 'paymentDelivery':\n      res = await getPaymentDeliveryRequest();\n      return res;\n    case 'promoCode':\n      res = await getPromoCode(data.promoCode);\n      return res;\n    case 'usage':\n      res = await getUsages(data);\n      return res;\n    default:\n      return null;\n  }\n}\n\n\nfunction* workGetSingleData({ payload: { data } }) {\n  try {\n    const lang = yield select(selectLang);\n    const result = yield call(getRequest, { ...data, lang });\n    yield put(getSingleDataSuccess({ data: result, name: data.name }));\n  } catch (error) {\n    yield put(getSingleDataError({ name: data.name }));\n  } finally {\n    yield put(resetSingleData({ name: data.name }));\n  }\n}\nfunction* watchGetSingleData() {\n  yield takeEvery(getSingleData, workGetSingleData);\n}\n\n\nexport default function* () {\n  yield all([\n    watchGetSingleData(),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}