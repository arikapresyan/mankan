{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Button, Form, Input, Modal } from 'antd';\nimport { useFormik } from 'formik';\nimport { connect } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport userAPI from '../../../API_Paths/userAPI';\nimport { APISend } from '../../../store/global-APIS/action';\nimport { hideAll } from '../../../store/userEventListeners/action';\nimport { getFeedbackSchema } from '../../../utils/validationSchemas';\nconst {\n  TextArea\n} = Input;\n\nfunction ForgotPasswordModal(props) {\n  const {\n    messages\n  } = useIntl();\n  const {\n    visible,\n    handleHideModal,\n    APISendAction,\n    globalAPIS,\n    hideAllAction\n  } = props;\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const validationSchema = useMemo(() => getFeedbackSchema(messages), [messages]);\n  useEffect(() => {\n    if (globalAPIS.hasError) {\n      setLoading(false);\n    } else if (globalAPIS.success) {\n      hideAllAction();\n    }\n  }, [globalAPIS]);\n  const resTextsForGlobal = useMemo(() => ({\n    errorText: messages['local.errorText'],\n    successText: messages['local.successText'],\n    loadingText: messages['local.loadingText']\n  }), [messages]);\n  const formik = useFormik({\n    initialValues: {\n      phone: '',\n      email: '',\n      fullName: '',\n      message: ''\n    },\n    validationSchema,\n    onSubmit: values => {\n      setLoading(true);\n      APISendAction(_objectSpread({\n        method: 'post',\n        url: userAPI.feedback,\n        data: {\n          userEmail: values.email,\n          firstLastNames: values.fullName,\n          phone: values.phone,\n          description: values.message\n        }\n      }, resTextsForGlobal));\n    }\n  });\n  const {\n    errors,\n    values,\n    touched,\n    handleSubmit,\n    handleChange,\n    handleBlur\n  } = formik;\n  return __jsx(Modal, {\n    destroyOnClose: true,\n    title: messages['local.feedback'],\n    visible: visible,\n    onCancel: handleHideModal,\n    footer: null,\n    className: \"callback_modal\"\n  }, __jsx(\"div\", {\n    className: \"phone\"\n  }, __jsx(\"a\", {\n    href: \"tel:+37499530311\"\n  }, __jsx(\"span\", null, `${messages['local.tel']}:`), \"(+374) 99 530 311\")), __jsx(\"div\", {\n    className: \"email\"\n  }, __jsx(\"a\", {\n    href: \"mailto:contact@mankan.am\"\n  }, __jsx(\"span\", null, `${messages['local.email']}:`), \"contact@mankan.am\")), __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Form.Item, {\n    validateStatus: errors.fullName && touched.fullName && 'error',\n    help: touched.fullName && errors.fullName\n  }, __jsx(Input, {\n    placeholder: messages['local.name_surname'],\n    name: \"fullName\",\n    value: values.fullName,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(Form.Item, {\n    validateStatus: errors.email && touched.email && 'error',\n    help: touched.email && errors.email\n  }, __jsx(Input, {\n    placeholder: messages['local.email'],\n    name: \"email\",\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(Form.Item, {\n    validateStatus: errors.phone && touched.phone && 'error',\n    help: touched.phone && errors.phone\n  }, __jsx(Input, {\n    placeholder: messages['local.tel'],\n    name: \"phone\",\n    value: values.phone,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(Form.Item, {\n    validateStatus: errors.message && touched.message && 'error',\n    help: touched.message && errors.message\n  }, __jsx(TextArea, {\n    placeholder: messages['local.message'],\n    name: \"message\",\n    value: values.message,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    autoSize: {\n      minRows: 5,\n      maxRows: 10\n    }\n  })), __jsx(Form.Item, null, __jsx(\"div\", {\n    className: \"send_btn\"\n  }, __jsx(Button, {\n    disabled: loading,\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, messages['local.send'])))));\n}\n\nfunction mapStateToProps({\n  globalAPIS\n}) {\n  return {\n    globalAPIS\n  };\n}\n\nexport default connect(mapStateToProps, {\n  APISendAction: APISend,\n  hideAllAction: hideAll\n})(ForgotPasswordModal);","map":null,"metadata":{},"sourceType":"module"}