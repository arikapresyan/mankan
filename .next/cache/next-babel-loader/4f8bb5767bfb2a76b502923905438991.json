{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeLatest, put, select, call } from '@redux-saga/core/effects';\nimport { getMenuList, getMenuListSuccess } from './action'; // eslint-disable-next-line import/no-cycle\n\nimport Axios from '../services/Axios';\nimport { selectLang } from '../user/reducer';\nimport { getProductAge } from '../../constants/utils';\n\nfunction getRequestBody(name) {\n  switch (name) {\n    case 'own':\n      return {\n        ownBrand: true,\n        urlPostfix: 'mankan'\n      };\n\n    case 'infant':\n    case 'infants':\n      return {\n        infant: true,\n        urlPostfix: 'infant'\n      };\n\n    case 'boy':\n    case 'boys':\n      return {\n        sex: 'BOY',\n        urlPostfix: 'boy'\n      };\n\n    case 'girl':\n    case 'girls':\n      return {\n        sex: 'GIRL',\n        urlPostfix: 'girl'\n      };\n\n    default:\n      return {\n        urlPostfix: 'all'\n      };\n  }\n}\n\nfunction getMenuListRequest({\n  urlPostfix,\n  lang\n}) {\n  return Axios.request({\n    url: `/api/product/hoverFilters/${urlPostfix}/?lang=${lang}`,\n    method: 'get'\n  });\n}\n\nfunction getBestSellerRequest(data) {\n  return Axios.request({\n    url: '/api/product/navFiltersBestSeller',\n    method: 'post',\n    data\n  });\n}\n\nfunction getNavFilteredDataToView({\n  brand,\n  usage: meaning,\n  age,\n  type,\n  messages\n}) {\n  const ageToSend = (age || []).map(({\n    id,\n    minAge,\n    maxAge\n  }) => ({\n    id,\n    name: getProductAge(minAge, maxAge, messages),\n    text: getProductAge(minAge, maxAge, messages)\n  }));\n  return {\n    type,\n    age: ageToSend,\n    brand,\n    meaning\n  };\n}\n\nfunction* workMenuList({\n  payload: {\n    name,\n    messages\n  }\n}) {\n  const lang = yield select(selectLang);\n\n  try {\n    const filterData = _objectSpread(_objectSpread({}, getRequestBody(name)), {}, {\n      lang\n    });\n\n    const res = yield call(getMenuListRequest, filterData);\n    const {\n      data: {\n        result: {\n          rows\n        }\n      }\n    } = yield call(getBestSellerRequest, filterData);\n    yield put(getMenuListSuccess({\n      data: getNavFilteredDataToView(_objectSpread(_objectSpread({}, res.data), {}, {\n        messages\n      })),\n      name,\n      bestseller: rows[0]\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* watchMenuList() {\n  yield takeLatest(getMenuList, workMenuList);\n}\n\nexport { // eslint-disable-next-line import/prefer-default-export\nwatchMenuList };","map":null,"metadata":{},"sourceType":"module"}