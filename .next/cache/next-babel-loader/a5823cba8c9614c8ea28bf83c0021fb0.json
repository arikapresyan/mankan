{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useIntl } from 'react-intl';\nimport router from 'next/router';\nimport useCartActions from '../../../store/cart/useCartActions';\nimport { getProductSizeFromObj, getBonus, getProductBrand, getProductAge, getProductBattery, addToCartObj } from '../../../constants/utils';\nimport keys from '../../../constants/keys';\nimport useGetProductPrice from '../../../hooks/useGetProductPrice';\nvar IMAGE_POSTFIX = keys.IMAGE_POSTFIX;\n\nfunction useBuyProductModal(_ref) {\n  var product = _ref.product,\n      localChanges = _ref.localChanges,\n      handleHideModal = _ref.handleHideModal,\n      bonus = _ref.bonus;\n\n  var _useCartActions = useCartActions(),\n      cartAddProductAction = _useCartActions.cartAddProductAction;\n\n  var _useIntl = useIntl(),\n      messages = _useIntl.messages;\n\n  var text = __jsx(\"span\", null, messages['local.modal_battery']);\n\n  var size = product.size,\n      brand = product.brand,\n      id = product.id,\n      percent = product.percent,\n      price = product.price,\n      accessories = product.accessories,\n      photos = product.photos,\n      xmlCount = product.xmlCount,\n      xmlBarCode = product.xmlBarCode;\n\n  var _useState = useState(false),\n      hasBattery = _useState[0],\n      setHasBattery = _useState[1];\n\n  var _useState2 = useState(localChanges[product.id] && localChanges[product.id].count || product.count || 1),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  var battery = useMemo(function () {\n    return getProductBattery(accessories);\n  }, [accessories]);\n  useEffect(function () {\n    if (battery && localChanges[id] && (localChanges[id].hasBattery || localChanges[id].batteryId) && battery.xmlCount) {\n      setHasBattery(true);\n    }\n  }, [battery, localChanges]);\n  var batteryText = useMemo(function () {\n    return battery && \"\".concat(battery.ProductAccessoriesMap.count, \"  \").concat(messages['local.item(s)'], \" \").concat(battery.name);\n  }, [battery, messages]);\n  var brandName = useMemo(function () {\n    return getProductBrand(brand);\n  }, [brand]);\n  var sizeText = useMemo(function () {\n    return getProductSizeFromObj(size);\n  }, [size]);\n  var productAga = useMemo(function () {\n    return getProductAge(product.minAge, product.maxAge);\n  }, [product.minAge, product.maxAge]);\n  var photo = useMemo(function () {\n    var firstPhoto = photos ? photos.sort(function (a, b) {\n      return a.order - b.order;\n    })[0] : null;\n    if (!firstPhoto) return {};\n    return {\n      url: \"\".concat(IMAGE_POSTFIX).concat(id, \"/\").concat(firstPhoto.url),\n      alt: firstPhoto.alt,\n      title: firstPhoto.title\n    };\n  }, [photos]);\n\n  var _useGetProductPrice = useGetProductPrice(product),\n      newPrice = _useGetProductPrice.newPrice,\n      oldPrice = _useGetProductPrice.oldPrice;\n\n  var bonusText = useMemo(function () {\n    return getBonus(newPrice, bonus || 2, count);\n  }, [newPrice, bonus, count]);\n  var priceBayCount = useMemo(function () {\n    return newPrice * count;\n  }, [newPrice, count]);\n\n  var addToCart = function addToCart(redirect) {\n    cartAddProductAction(addToCartObj({\n      hasBattery: hasBattery,\n      battery: battery,\n      count: count,\n      product: product\n    }), router.router.route === '/cart' || redirect);\n    handleHideModal();\n  };\n\n  var addToCartAndRedirect = function addToCartAndRedirect() {\n    addToCart(true);\n  };\n\n  var text2 = useCallback(function () {\n    return __jsx(\"span\", null, messages['local.can_use_bonus_if']);\n  }, [messages]);\n  return {\n    addToCartAndRedirect: addToCartAndRedirect,\n    addToCart: addToCart,\n    bonusText: bonusText,\n    batteryText: batteryText,\n    brandName: brandName,\n    sizeText: sizeText,\n    photo: photo,\n    text: text,\n    setCount: setCount,\n    messages: messages,\n    xmlPrice: oldPrice,\n    percent: percent,\n    battery: battery,\n    productAga: productAga,\n    text2: text2,\n    id: id,\n    count: count,\n    hasBattery: hasBattery,\n    setHasBattery: setHasBattery,\n    price: price,\n    xmlCount: xmlCount,\n    xmlBarCode: xmlBarCode,\n    priceBayCount: priceBayCount\n  };\n}\n\nexport default useBuyProductModal;","map":null,"metadata":{},"sourceType":"module"}