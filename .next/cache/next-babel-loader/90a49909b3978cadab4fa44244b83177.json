{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(workGetSlides),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetSlides),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(_callee);\n\nimport { takeEvery, call, all, put } from 'redux-saga/effects';\nimport Axios from '../services/Axios';\nimport { getSlides, getSlidesSuccess, getSlidesError } from './actions';\n\nvar getSlidesRequest = function getSlidesRequest() {\n  return Axios.get('/api/product/mainSlider');\n};\n\nfunction workGetSlides() {\n  var _yield$call, rows, data;\n\n  return _regeneratorRuntime.wrap(function workGetSlides$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(getSlidesRequest);\n\n        case 3:\n          _yield$call = _context.sent;\n          rows = _yield$call.data.result.rows;\n          data = rows.sort(function () {\n            return Math.random() - 0.5;\n          });\n          _context.next = 8;\n          return put(getSlidesSuccess({\n            data: data\n          }));\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put(getSlidesError());\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction watchGetSlides() {\n  return _regeneratorRuntime.wrap(function watchGetSlides$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(getSlides, workGetSlides);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([watchGetSlides()]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/var/www/mankan-front/store/main-slides/saga.js"],"names":["workGetSlides","watchGetSlides","takeEvery","call","all","put","Axios","getSlides","getSlidesSuccess","getSlidesError","getSlidesRequest","get","rows","data","result","sort","Math","random"],"mappings":";;oDAQUA,a;qDAUAC,c;;;AAlBV,SACEC,SADF,EACaC,IADb,EACmBC,GADnB,EACwBC,GADxB,QAEO,oBAFP;AAGA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SAASC,SAAT,EAAoBC,gBAApB,EAAsCC,cAAtC,QAA4D,WAA5D;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAMJ,KAAK,CAACK,GAAN,CAAU,yBAAV,CAAN;AAAA,CAAzB;;AAEA,SAAUX,aAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE2C,iBAAMG,IAAI,CAACO,gBAAD,CAAV;;AAF3C;AAAA;AAE8BE,UAAAA,IAF9B,eAEYC,IAFZ,CAEoBC,MAFpB,CAE8BF,IAF9B;AAGUC,UAAAA,IAHV,GAGiBD,IAAI,CAACG,IAAL,CAAU;AAAA,mBAAMC,IAAI,CAACC,MAAL,KAAgB,GAAtB;AAAA,WAAV,CAHjB;AAAA;AAII,iBAAMZ,GAAG,CAACG,gBAAgB,CAAC;AAAEK,YAAAA,IAAI,EAAJA;AAAF,WAAD,CAAjB,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMI,iBAAMR,GAAG,CAACI,cAAc,EAAf,CAAT;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAUR,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMC,SAAS,CAACK,SAAD,EAAYP,aAAZ,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMI,GAAG,CAAC,CAACH,cAAc,EAAf,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n  takeEvery, call, all, put,\n} from 'redux-saga/effects';\nimport Axios from '../services/Axios';\nimport { getSlides, getSlidesSuccess, getSlidesError } from './actions';\n\nconst getSlidesRequest = () => Axios.get('/api/product/mainSlider');\n\nfunction* workGetSlides() {\n  try {\n    const { data: { result: { rows } } } = yield call(getSlidesRequest);\n    const data = rows.sort(() => Math.random() - 0.5);\n    yield put(getSlidesSuccess({ data }));\n  } catch (e) {\n    yield put(getSlidesError());\n  }\n}\n\nfunction* watchGetSlides() {\n  yield takeEvery(getSlides, workGetSlides);\n}\nexport default function* () {\n  yield all([watchGetSlides()]);\n}\n"]},"metadata":{},"sourceType":"module"}