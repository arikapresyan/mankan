{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport useGlobalAPI from '../../../hooks/useGlobalAPI';\nimport userAPI from '../../../API_Paths/userAPI';\nimport { getUserDataSuccess } from '../../../store/user/action';\nimport { getChangeInfoSchema } from '../../../utils/validationSchemas';\nexport default function usePersonalInfo({\n  APISendAction,\n  user\n}) {\n  const {\n    messages\n  } = useIntl();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const dispatch = useDispatch();\n  const validationSchema = useMemo(() => getChangeInfoSchema(messages), [messages]);\n  const formik = useFormik({\n    initialValues: {\n      firstName: user.firstName,\n      lastName: user.lastName,\n      changePassMode: false,\n      retryPassword: '',\n      password: '',\n      phone: user.phone,\n      email: user.email\n    },\n    validationSchema,\n\n    onSubmit(values, {\n      setSubmitting\n    }) {\n      const confirmMessage = values.email === user.email ? 'success' : messages['local.confirmEmail'];\n\n      const data = _objectSpread({}, values);\n\n      if (!values.password || !values.password.trim()) {\n        delete data.password;\n        delete data.retryPassword;\n      }\n\n      setLoading(true);\n      APISendAction({\n        method: 'put',\n        url: userAPI.change_userInfo,\n        successText: confirmMessage,\n        data: _objectSpread({}, data)\n      });\n      setSubmitting(false);\n    }\n\n  });\n  const {\n    setFieldValue,\n    values,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    errors,\n    touched\n  } = formik;\n  useGlobalAPI({\n    onCancel: () => setLoading(false),\n    onSuccess: () => {\n      // setIsChangedEmail(values.email !== user.email);\n      // if (values.email !== user.email) message.success(messages['local.confirmEmail']);\n      dispatch(getUserDataSuccess({\n        firstName: values.firstName,\n        lastName: values.lastName,\n        phone: values.phone\n      }));\n      setLoading(false);\n    }\n  });\n\n  const openChangePass = () => {\n    setFieldValue('changePassMode', !values.changePassMode);\n  };\n\n  return {\n    openChangePass,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    errors,\n    touched,\n    messages,\n    values,\n    loading\n  };\n}","map":null,"metadata":{},"sourceType":"module"}