{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { handleActions } from 'redux-actions';\nimport { wishlistSet, wishlistGet, wishlistItemLoading, wishlistItemError, wishlistChangeItemSuccess, wishlistPopulateLoading, wishlistPopulateError, wishlistPopulateSuccess, wishlistProductsReset, wishlistError } from './action';\nconst initialState = {\n  productIds: {},\n  products: [],\n  loading: {},\n  populateLoading: false,\n  loadWishlist: false,\n  wishlistError: false\n};\nexport default handleActions({\n  [wishlistSet]: (state, {\n    payload: {\n      products,\n      productIds\n    }\n  }) => _objectSpread({}, state, {\n    products,\n    productIds: _objectSpread({}, productIds || {}),\n    loadWishlist: false,\n    wishlistError: false\n  }),\n  [wishlistGet]: state => _objectSpread({}, state, {\n    loadWishlist: true,\n    wishlistError: false\n  }),\n  [wishlistError]: state => _objectSpread({}, state, {\n    loadWishlist: false,\n    wishlistError: true\n  }),\n  [wishlistItemLoading]: (state, {\n    payload: {\n      id\n    }\n  }) => _objectSpread({}, state, {\n    loading: _objectSpread({}, state.loading, {\n      [id]: true\n    })\n  }),\n  [wishlistChangeItemSuccess]: (state, {\n    payload: {\n      wishlistIds,\n      wishlist,\n      id\n    }\n  }) => _objectSpread({}, state, {\n    productIds: wishlistIds,\n    wishlist: wishlist || state.wishlist,\n    loading: _objectSpread({}, state.loading, {\n      [id]: false\n    })\n  }),\n  [wishlistItemError]: (state, {\n    payload: {\n      product: {\n        id\n      }\n    }\n  }) => _objectSpread({}, state, {\n    loading: _objectSpread({}, state.loading, {\n      [id]: false\n    })\n  }),\n  [wishlistPopulateLoading]: state => _objectSpread({}, state, {\n    populateLoading: true\n  }),\n  [wishlistPopulateSuccess]: (state, {\n    payload: {\n      wishlistIds\n    }\n  }) => _objectSpread({}, state, {\n    populateLoading: false,\n    productIds: wishlistIds\n  }),\n  [wishlistPopulateError]: state => _objectSpread({}, state, {\n    populateLoading: false\n  }),\n  [wishlistProductsReset]: state => _objectSpread({}, state, {\n    products: []\n  })\n}, initialState);\nexport const selectWishlistIds = ({\n  wishlist: {\n    productIds\n  }\n}) => productIds;\nexport function getWishlist({\n  wishlist: {\n    products\n  }\n}) {\n  return products;\n}\nexport function getWishlistLength({\n  wishlist: {\n    productIds\n  }\n}) {\n  return Object.keys(productIds).length;\n}","map":null,"metadata":{},"sourceType":"module"}