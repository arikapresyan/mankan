{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Layout, Row, Col, Button, Pagination } from 'antd';\nimport { connect } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Breadcrumb, ProductList, ViewedProductsList, AccompanyingProductList } from '../../components';\nimport FilterWrapper from '../../components/mobile/filter-list-sidebar/FilterListWrapper';\nimport { toggleVisibility } from '../../store/userEventListeners/action';\nimport { resetCatalogFilterReducer, catalogFilterSetValues } from '../../store/catalog-filter/action';\nimport { catalogGet } from '../../store/catalog/action';\nimport { getIsUserFilter, clearFilters } from '../../store/catalog-filter/reducer';\nimport IndexFilterList from '../../components/catalog/index-filter-list/IndexFilterList';\nimport CatalogLoader from '../../components/catalog/catalog-loader/CatalogLoader';\nimport CatalogEmpty from '../../components/catalog/catalog-empty/CatalogEmpty';\nvar Content = Layout.Content;\n\nfunction itemRender(current, type, originalBattery) {\n  if (type === 'prev') {\n    return __jsx(\"a\", null, \"Previous\");\n  }\n\n  if (type === 'next') {\n    return __jsx(\"a\", null, \"Next\");\n  }\n\n  return originalBattery;\n}\n\nfunction Catalog(_ref) {\n  var toggleVisibilityAction = _ref.toggleVisibilityAction,\n      products = _ref.products,\n      pagesCount = _ref.pagesCount,\n      page = _ref.page,\n      catalogGetAction = _ref.catalogGetAction,\n      loading = _ref.loading,\n      resetCatalogFilterReducerAction = _ref.resetCatalogFilterReducerAction,\n      lang = _ref.lang;\n\n  var _useIntl = useIntl(),\n      formatMessage = _useIntl.formatMessage,\n      messages = _useIntl.messages;\n\n  var _useState = useState(0),\n      count = _useState[0],\n      setCount = _useState[1];\n\n  useEffect(function () {\n    return function () {\n      resetCatalogFilterReducerAction();\n      catalogGetAction();\n    };\n  }, []); // const { toggleFilterMobile } = useContext(Context);\n\n  function changePage(clickedPage) {\n    window.scrollTo(0, 0);\n    catalogGetAction({\n      page: clickedPage\n    });\n  }\n\n  useEffect(function () {\n    if (count === 1) {\n      catalogGetAction({\n        page: page\n      });\n    }\n\n    setCount(1);\n  }, [lang]);\n  return __jsx(Content, {\n    className: \"catalog_page\"\n  }, __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"div\", {\n    className: \"top_content\"\n  }, __jsx(Breadcrumb, null), __jsx(\"div\", {\n    className: \"delivery_terms\"\n  }, formatMessage({\n    id: 'local.free_shipping_message'\n  }, {\n    price: __jsx(\"span\", {\n      className: \"toChangePrice\"\n    }, \"20000\", ' ', formatMessage({\n      id: 'local.dr'\n    }))\n  }))), __jsx(Row, {\n    gutter: [32, {\n      xs: 32,\n      sm: 32,\n      md: 32,\n      lg: 32\n    }]\n  }, __jsx(Col, {\n    className: \"filter_col\",\n    md: 24,\n    lg: 8,\n    xl: 8,\n    xxl: 7\n  }, __jsx(\"div\", {\n    className: \"filter_wrapper\"\n  }, __jsx(IndexFilterList, null)), __jsx(FilterWrapper, null), __jsx(ViewedProductsList, null)), __jsx(Col, {\n    className: \"prod_list_col\",\n    md: 24,\n    lg: 16,\n    xl: 16,\n    xxl: 17\n  }, loading ? __jsx(CatalogLoader, null) : __jsx(React.Fragment, null, __jsx(ProductList, {\n    products: products\n  }), __jsx(AccompanyingProductList, {\n    products: products\n  }), pagesCount > 1 ? __jsx(Pagination, {\n    total: pagesCount * 10,\n    current: page,\n    itemRender: itemRender,\n    onChange: changePage\n  }) : pagesCount !== 1 && __jsx(CatalogEmpty, null)))), __jsx(Button, {\n    type: \"primary\",\n    className: \"filter_btn\",\n    onClick: function onClick() {\n      return toggleVisibilityAction({\n        name: 'isFilterListOpen'\n      });\n    }\n  }, __jsx(\"img\", {\n    src: \"/images/icons/controls.png\",\n    alt: \"\"\n  }), messages['local.filter'])));\n}\n\nCatalog.getInitialProps = function _callee(_ref2) {\n  var store, query, age, gender, classification, type, brand, meaning, filter, isUserFilter;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          store = _ref2.store, query = _ref2.query;\n          age = query.age, gender = query.gender, classification = query.classification, type = query.type, brand = query.brand, meaning = query.meaning;\n          filter = {};\n\n          if (age) {\n            filter.age = age;\n          }\n\n          if (gender) {\n            filter.gender = [gender];\n          }\n\n          if (brand) {\n            filter.brand = [brand];\n          }\n\n          if (classification) {\n            filter.classification = [classification];\n          }\n\n          if (type) {\n            filter.type = [type];\n          }\n\n          if (meaning) {\n            filter.meaning = [meaning];\n          } // filter.price = [...keys.DEFAULT_PRICE];\n\n\n          isUserFilter = getIsUserFilter(store.getState());\n\n          if (!isUserFilter) {\n            store.dispatch(resetCatalogFilterReducer());\n            store.dispatch(catalogFilterSetValues(_objectSpread({}, filter)));\n          } else {\n            store.dispatch(catalogFilterSetValues(_objectSpread({}, clearFilters(store.getState()), {\n              isUserFilter: false\n            })));\n          }\n\n          store.dispatch(catalogGet());\n          return _context.abrupt(\"return\", {});\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nfunction mapStateToProps(_ref3) {\n  var _ref3$catalog = _ref3.catalog,\n      products = _ref3$catalog.products,\n      pagesCount = _ref3$catalog.pagesCount,\n      page = _ref3$catalog.page,\n      loading = _ref3$catalog.loading,\n      lang = _ref3.user.lang;\n  return {\n    products: products,\n    pagesCount: pagesCount,\n    page: page,\n    loading: loading,\n    lang: lang\n  };\n}\n\nexport default connect(mapStateToProps, {\n  toggleVisibilityAction: toggleVisibility,\n  resetCatalogFilterReducerAction: resetCatalogFilterReducer,\n  catalogGetAction: catalogGet\n})(Catalog);","map":null,"metadata":{},"sourceType":"module"}