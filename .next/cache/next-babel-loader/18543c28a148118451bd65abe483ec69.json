{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback, useState, useEffect, memo } from 'react';\nimport Input from 'antd/lib/input';\n\nfunction InputFieldWidthLocalState(_ref) {\n  let {\n    defaultValue\n  } = _ref,\n      res = _objectWithoutProperties(_ref, [\"defaultValue\"]);\n\n  const {\n    0: value,\n    1: setValue\n  } = useState('');\n  const handleSetValue = useCallback(({\n    target: {\n      value: targetValue\n    }\n  }) => {\n    setValue(targetValue);\n  }, []);\n  useEffect(() => {\n    setValue(defaultValue);\n  }, [defaultValue]);\n  return __jsx(Input, _extends({\n    value: value,\n    onChange: handleSetValue\n  }, res));\n}\n\nexport default memo(InputFieldWidthLocalState);","map":null,"metadata":{},"sourceType":"module"}