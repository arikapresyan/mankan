{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useMemo } from 'react';\nimport { Button, Checkbox, Form, Input, Modal } from 'antd';\nimport { useFormik } from 'formik';\nimport { connect } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { login } from '../../../store/user/action';\nimport { hideAll } from '../../../store/userEventListeners/action';\nimport { getLoginSchema } from '../../../utils/validationSchemas';\n\nfunction LoginModal(props) {\n  const {\n    messages\n  } = useIntl();\n  const {\n    visible,\n    handleHideModal,\n    onForgotPassword,\n    onMoveToRegistration,\n    loginAction,\n    hideAllAction,\n    userAuthorisationLoading,\n    authSuccess,\n    errorText\n  } = props;\n  const validationSchema = useMemo(() => getLoginSchema(messages), [messages]);\n  const formik = useFormik({\n    initialValues: {\n      emailOrPhone: '',\n      password: '',\n      rememberMe: false\n    },\n    onSubmit: values => {\n      loginAction(_objectSpread({}, values));\n    },\n    validationSchema\n  });\n  useEffect(() => {\n    if (authSuccess) {\n      hideAllAction();\n    }\n  }, [authSuccess]);\n  useEffect(() => {\n    if (errorText) {\n      if (errorText.includes('Wrong email')) {\n        formik.setErrors({\n          globalError: messages['local.wrong_email_or_password']\n        });\n      } else {\n        formik.setErrors({\n          globalError: errorText\n        });\n      }\n    }\n  }, [errorText]);\n  const {\n    values,\n    touched,\n    errors,\n    handleChange,\n    handleSubmit\n  } = formik;\n  return __jsx(Modal, {\n    destroyOnClose: true,\n    title: \"\",\n    centered: true,\n    visible: visible,\n    onCancel: handleHideModal,\n    footer: null,\n    className: \"login_modal\"\n  }, __jsx(\"h2\", null, messages['local.login']), __jsx(Form, {\n    className: \"login-form\",\n    onSubmit: handleSubmit\n  }, errors.globalError && __jsx(\"p\", null, errors.globalError), __jsx(Form.Item, {\n    validateStatus: errors.emailOrPhone && touched.emailOrPhone && 'error',\n    help: touched.emailOrPhone && errors.emailOrPhone\n  }, __jsx(Input, {\n    name: \"emailOrPhone\",\n    placeholder: messages['local.email'],\n    value: values.emailOrPhone,\n    onChange: handleChange\n  })), __jsx(Form.Item, {\n    validateStatus: errors.password && touched.password && 'error',\n    help: touched.password && errors.password\n  }, __jsx(Input, {\n    name: \"password\",\n    type: \"password\",\n    placeholder: messages['local.password'],\n    value: values.password,\n    onChange: handleChange\n  })), __jsx(Form.Item, null, __jsx(Checkbox, {\n    name: \"rememberMe\",\n    checked: +values.rememberMe,\n    onChange: handleChange\n  }, messages['local.remember']), __jsx(\"span\", {\n    className: \"forgot_password\",\n    onClick: onForgotPassword\n  }, messages['local.forgot_password'])), __jsx(Form.Item, null, __jsx(\"div\", {\n    className: \"login_btn\"\n  }, userAuthorisationLoading && __jsx(\"p\", null, \"loading ...\"), __jsx(Button, {\n    disabled: userAuthorisationLoading,\n    type: \"primary\",\n    htmlType: \"submit\",\n    className: \"login-form-button\"\n  }, messages['local.login'])), __jsx(\"div\", {\n    className: \"move_to_registration\"\n  }, __jsx(\"span\", {\n    onClick: onMoveToRegistration\n  }, messages['local.registration'])))));\n}\n\nfunction mapStateToProps({\n  user: {\n    loading,\n    authSuccess,\n    errorText\n  }\n}) {\n  return {\n    userAuthorisationLoading: loading,\n    authSuccess,\n    errorText\n  };\n}\n\nexport default connect(mapStateToProps, {\n  loginAction: login,\n  hideAllAction: hideAll\n})(LoginModal);","map":null,"metadata":{},"sourceType":"module"}