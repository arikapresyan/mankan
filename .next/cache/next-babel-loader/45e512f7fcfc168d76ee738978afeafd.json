{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useMemo, useState } from 'react';\nimport Tooltip from 'antd/lib/tooltip';\nimport Input from 'antd/lib/input';\nimport Button from 'antd/lib/button';\nimport message from 'antd/lib/message';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ConfirmOrderModal from '../modals/confirm-order-modal/ConfirmOrderModal';\nimport { getBonus, getTooltipTexts } from '../../constants/utils';\nimport { getSingleData } from '../../store/single-data/action';\nimport { selectSingleData } from '../../store/single-data/reducer';\nimport useCartPrices from '../../hooks/useCartPrices';\nimport { MIN_TOTAL } from './constants';\n\nfunction TotalResult({\n  cartData,\n  bonusPercent\n}) {\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: promo,\n    1: setPromo\n  } = useState(null);\n  const {\n    0: promoCode,\n    1: setPromoCode\n  } = useState('');\n  const {\n    messages,\n    formatMessage\n  } = useIntl();\n  const dispatch = useDispatch();\n  const {\n    total\n  } = useCartPrices(cartData, promo);\n  const {\n    bonusText,\n    promoText\n  } = useMemo(() => getTooltipTexts(messages), [messages]);\n  const {\n    promoCode: {\n      data: promoCodeData,\n      loading: promoCodeLoading,\n      error: promoCodeError\n    }\n  } = useSelector(selectSingleData) || {};\n  useEffect(() => {\n    if (promoCodeError) {\n      message.warning(messages['local.wrong_promo_code']);\n    }\n  }, [promoCodeError]);\n\n  const handleShowModal = () => {\n    if (total < MIN_TOTAL) {\n      message.warning(formatMessage({\n        id: 'local.min_price_of_order'\n      }, {\n        price: MIN_TOTAL\n      }));\n      return false;\n    }\n\n    setVisible(true);\n    return true;\n  };\n\n  useSelector(() => {\n    if (promoCodeData && !visible && !promo) {\n      const shown = handleShowModal();\n      if (shown) setPromo(promoCodeData);\n    }\n  }, [promoCodeData]);\n\n  const showModal = () => {\n    if (promoCode && promoCode.trim()) {\n      dispatch(getSingleData({\n        data: {\n          name: 'promoCode',\n          promoCode\n        }\n      }));\n      return;\n    }\n\n    handleShowModal();\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    setPromo(null);\n  };\n\n  let totalPrice = 0;\n  let totalCount = 0;\n  cartData.forEach(cartItem => {\n    totalPrice += cartItem.count * cartItem.price;\n    totalCount += 1;\n  });\n  return __jsx(\"div\", {\n    className: \"result_container\"\n  }, __jsx(\"div\", {\n    className: \"total_item product_total\"\n  }, __jsx(\"div\", {\n    className: \"name\"\n  }, messages['local.my_basket'], ' '), __jsx(\"div\", {\n    className: \"description\"\n  }, `${totalCount} ${messages['local.products']}`)), __jsx(\"div\", {\n    className: \"total_item price_total\"\n  }, __jsx(\"div\", {\n    className: \"name\"\n  }, messages['local.total']), __jsx(\"div\", {\n    className: \"description\"\n  }, `${totalPrice} `, ' ', messages['local.dr'], ' ', \".\")), __jsx(\"div\", {\n    className: \"total_item bonus_total\"\n  }, __jsx(\"div\", {\n    className: \"name\"\n  }, messages['local.bonus']), __jsx(\"div\", {\n    className: \"description\"\n  }, getBonus(totalPrice, bonusPercent || 2, 1), messages['local.dr'], __jsx(Tooltip, {\n    placement: \"bottom\",\n    title: bonusText,\n    className: \"info_tooltip\"\n  }, __jsx(\"span\", null, __jsx(\"img\", {\n    src: \"/images/icons/info.png\",\n    alt: \"\"\n  }))))), __jsx(\"div\", {\n    className: \"total_item promo_code\"\n  }, __jsx(\"div\", {\n    className: \"name\"\n  }, messages['local.promo_code']), __jsx(\"div\", {\n    className: \"description\"\n  }, __jsx(Input, {\n    placeholder: messages['local.example'],\n    onChange: ({\n      target: {\n        value\n      }\n    }) => setPromoCode(value),\n    value: promoCode\n  }), __jsx(Tooltip, {\n    placement: \"bottom\",\n    title: () => __jsx(\"span\", null, promoText),\n    className: \"info_tooltip\"\n  }, __jsx(\"span\", null, __jsx(\"img\", {\n    src: \"/images/icons/info.png\",\n    alt: \"\"\n  }))))), __jsx(Button, {\n    loading: promoCodeLoading,\n    className: \"confirm_btn\",\n    onClick: showModal\n  }, messages['local.confirm']), __jsx(ConfirmOrderModal, {\n    visible: visible,\n    handleHideModal: handleCancel,\n    data: {\n      cartData,\n      bonusPercent,\n      promoCodeData: promo\n    }\n  }));\n}\n\nexport default TotalResult;","map":null,"metadata":{},"sourceType":"module"}