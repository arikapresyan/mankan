{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { memo, useCallback, useMemo, useState } from 'react';\nimport { Select, Button, Form, Tooltip } from 'antd';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport InputField from '../../../../common/InputField';\nimport { getStringFromDates } from '../handleFunctions';\nimport InfoIcon from '../../../../../assets/images/icons/info.png';\nconst {\n  Option\n} = Select;\nconst FormItemInput = memo(props => {\n  const inputProps = _objectSpread({}, props);\n\n  delete inputProps.formItemClassName;\n  delete inputProps.error;\n  return __jsx(Form.Item, {\n    className: props.formItemClassName || '',\n    validateStatus: props.error && 'error',\n    help: props.error\n  }, __jsx(InputField, inputProps));\n});\n\nfunction SendForm({\n  modalLogic\n}) {\n  const isUser = useSelector(({\n    user\n  }) => user.authSuccess);\n  const {\n    messages\n  } = useIntl();\n  const {\n    0: openSelect,\n    1: setOpenSelect\n  } = useState(false);\n  const {\n    formik: {\n      values,\n      errors,\n      touched,\n      handleChange,\n      handleBlur,\n      setFieldValue,\n      setFieldTouched\n    },\n    dateInfo\n  } = modalLogic;\n  const optionsData = useMemo(() => getStringFromDates(dateInfo.days, dateInfo, messages) || [], [dateInfo.days, dateInfo, messages]);\n  const setMode = useCallback(mode => () => setFieldValue('method', mode), []);\n  const blurSelect = useCallback(() => {\n    setOpenSelect(false);\n    setFieldTouched('deliveryPeriodString', true);\n  }, []);\n  const focusSelect = useCallback(() => setOpenSelect(true), []);\n  const changeSelectValue = useCallback((value, reactElement) => {\n    setFieldValue('deliveryPeriod', value);\n    setFieldValue('deliveryPeriodString', reactElement.props.children);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(FormItemInput, {\n    value: values.firstName,\n    name: \"firstName\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    placeholder: `${messages['local.name']}*`,\n    error: touched.firstName && errors.firstName\n  }), __jsx(FormItemInput, {\n    value: values.lastName,\n    name: \"lastName\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    placeholder: `${messages['local.last_name']}*`,\n    error: touched.lastName && errors.lastName\n  }), __jsx(FormItemInput, {\n    value: values.phone,\n    name: \"phone\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    placeholder: `${messages['local.mobile_phone']} *`,\n    error: touched.phone && errors.phone\n  }), __jsx(FormItemInput, {\n    value: values.email,\n    name: \"email\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    placeholder: `${messages['local.email']}*`,\n    error: touched.email && errors.email\n  }), __jsx(\"div\", {\n    className: \"d-flex justify-content_space-between\"\n  }, __jsx(\"div\", {\n    className: \"d-flex align-items_center mt--15\"\n  }, __jsx(\"div\", {\n    className: \"bonus_quantity\"\n  }, __jsx(Tooltip, {\n    placement: \"bottomLeft\",\n    title: messages['local.delivery_only_in_yerevan'],\n    className: \"info_tooltip\"\n  }, __jsx(\"span\", null, __jsx(\"img\", {\n    src: InfoIcon,\n    alt: \"\"\n  })))), messages['local.yerevan_cty']), __jsx(FormItemInput, {\n    className: \"street\",\n    value: values.street,\n    name: \"street\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    placeholder: `${messages['local.city_street']}*`,\n    error: touched.street && errors.street\n  })), __jsx(FormItemInput, {\n    formItemClassName: \"apartment clearfix\",\n    value: values.house,\n    name: \"house\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    placeholder: `${messages['local.apartment_house']}*`,\n    error: touched.house && errors.house\n  }), __jsx(FormItemInput, {\n    formItemClassName: \"entrance clearfix\",\n    value: values.entry,\n    name: \"entry\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    placeholder: `${messages['local.enter']}`,\n    error: touched.entry && errors.entry\n  }), __jsx(Form.Item, {\n    className: \"delivery_date\",\n    validateStatus: errors.deliveryPeriodString && touched.deliveryPeriodString && 'error',\n    help: touched.deliveryPeriodString && errors.deliveryPeriodString\n  }, __jsx(Select, {\n    placeholder: `${messages['local.delivery_period']} *`,\n    onFocus: focusSelect,\n    onBlur: blurSelect,\n    onChange: changeSelectValue,\n    name: \"deliveryPeriod\"\n  }, optionsData.map(optionData => __jsx(Option, {\n    value: +optionData.date,\n    key: optionData.date\n  }, optionData.text)))), __jsx(\"div\", {\n    className: \"payment_type\"\n  }, __jsx(\"p\", null, messages['local.payment_method']), __jsx(\"div\", {\n    className: `payment_type_item ${values.method === 1 ? 'selected' : ''}`\n  }, __jsx(Button, {\n    shape: \"circle\",\n    onClick: setMode(1),\n    className: \"credit_card_btn\"\n  }), messages['local.credit_card']), __jsx(\"div\", {\n    className: `payment_type_item ${values.method === 2 ? 'selected' : ''}`\n  }, __jsx(Button, {\n    shape: \"circle\",\n    onClick: setMode(2),\n    className: \"cash_btn\"\n  }), messages['local.cash']), isUser && __jsx(\"div\", {\n    className: `payment_type_item ${values.method === 3 ? 'selected' : ''}`\n  }, __jsx(Button, {\n    shape: \"circle\",\n    onClick: setMode(3),\n    className: \"bonus_btn\"\n  }), messages['local.bonus_Wey'])));\n}\n\nexport default SendForm;","map":null,"metadata":{},"sourceType":"module"}