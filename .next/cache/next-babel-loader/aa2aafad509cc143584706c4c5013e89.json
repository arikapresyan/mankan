{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-shadow */\n// eslint-disable-next-line no-unused-vars\nimport { useDispatch } from 'react-redux';\nimport message from 'antd/lib/message';\nimport { useIntl } from 'react-intl';\nimport { resetCartReducer, cartChangeProduct, changeCart } from './action';\nconst timersId = {};\n\nfunction useCartActions() {\n  const dispatch = useDispatch();\n  const {\n    messages\n  } = useIntl();\n\n  function cartAddProductAction(ids, redirect) {\n    dispatch(changeCart({\n      ids,\n      status: true,\n      redirect\n    }));\n\n    if (redirect !== true) {\n      message.success(messages['local.cart_added_success']);\n    }\n  }\n\n  function cartRemoveProductAction(ids) {\n    dispatch(changeCart({\n      ids,\n      status: false\n    }));\n  }\n\n  function cartChangeProductAction(payload) {\n    dispatch(cartChangeProduct(_objectSpread({}, payload)));\n    clearTimeout(timersId[payload.id]);\n    timersId[payload.id] = setTimeout(() => {\n      const {\n        id,\n        changes: {\n          count\n        }\n      } = payload;\n      dispatch(changeCart({\n        ids: {\n          [id]: {\n            id,\n            count,\n            status: true\n          }\n        },\n        status: true\n      }));\n    }, 400);\n  }\n\n  function resetCartReducerAction() {\n    dispatch(resetCartReducer());\n  }\n\n  return {\n    cartAddProductAction,\n    cartChangeProductAction,\n    cartRemoveProductAction,\n    resetCartReducerAction\n  };\n}\n\nexport default useCartActions;","map":{"version":3,"sources":["/var/www/mankan-front/store/cart/useCartActions.js"],"names":["useDispatch","message","useIntl","resetCartReducer","cartChangeProduct","changeCart","timersId","useCartActions","dispatch","messages","cartAddProductAction","ids","redirect","status","success","cartRemoveProductAction","cartChangeProductAction","payload","clearTimeout","id","setTimeout","changes","count","resetCartReducerAction"],"mappings":";;;;;;AAAA;AACA;AACA,SAASA,WAAT,QAA4B,aAA5B;AACA,OAAQC,OAAR,MAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SACEC,gBADF,EAEEC,iBAFF,EAGEC,UAHF,QAIO,UAJP;AAMA,MAAMC,QAAQ,GAAG,EAAjB;;AAEA,SAASC,cAAT,GAA0B;AACxB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM;AAAES,IAAAA;AAAF,MAAeP,OAAO,EAA5B;;AAEA,WAASQ,oBAAT,CAA8BC,GAA9B,EAAmCC,QAAnC,EAA6C;AAC3CJ,IAAAA,QAAQ,CAACH,UAAU,CAAC;AAAEM,MAAAA,GAAF;AAAOE,MAAAA,MAAM,EAAE,IAAf;AAAqBD,MAAAA;AAArB,KAAD,CAAX,CAAR;;AACA,QAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrBX,MAAAA,OAAO,CAACa,OAAR,CAAgBL,QAAQ,CAAC,0BAAD,CAAxB;AACD;AACF;;AACD,WAASM,uBAAT,CAAiCJ,GAAjC,EAAsC;AACpCH,IAAAA,QAAQ,CAACH,UAAU,CAAC;AAAEM,MAAAA,GAAF;AAAOE,MAAAA,MAAM,EAAE;AAAf,KAAD,CAAX,CAAR;AACD;;AACD,WAASG,uBAAT,CAAiCC,OAAjC,EAA0C;AACxCT,IAAAA,QAAQ,CAACJ,iBAAiB,mBAAMa,OAAN,EAAlB,CAAR;AAEAC,IAAAA,YAAY,CAACZ,QAAQ,CAACW,OAAO,CAACE,EAAT,CAAT,CAAZ;AACAb,IAAAA,QAAQ,CAACW,OAAO,CAACE,EAAT,CAAR,GAAwBC,UAAU,CAAC,MAAM;AACvC,YAAM;AAAED,QAAAA,EAAF;AAAME,QAAAA,OAAO,EAAE;AAAEC,UAAAA;AAAF;AAAf,UAA6BL,OAAnC;AACAT,MAAAA,QAAQ,CAACH,UAAU,CAAC;AAClBM,QAAAA,GAAG,EAAE;AACH,WAACQ,EAAD,GAAM;AACJA,YAAAA,EADI;AAEJG,YAAAA,KAFI;AAGJT,YAAAA,MAAM,EAAE;AAHJ;AADH,SADa;AAQlBA,QAAAA,MAAM,EAAE;AARU,OAAD,CAAX,CAAR;AAUD,KAZiC,EAY/B,GAZ+B,CAAlC;AAaD;;AACD,WAASU,sBAAT,GAAkC;AAChCf,IAAAA,QAAQ,CAACL,gBAAgB,EAAjB,CAAR;AACD;;AACD,SAAO;AACLO,IAAAA,oBADK;AAELM,IAAAA,uBAFK;AAGLD,IAAAA,uBAHK;AAILQ,IAAAA;AAJK,GAAP;AAMD;;AAGD,eAAehB,cAAf","sourcesContent":["/* eslint-disable no-shadow */\n// eslint-disable-next-line no-unused-vars\nimport { useDispatch } from 'react-redux';\nimport  message  from 'antd/lib/message';\nimport { useIntl } from 'react-intl';\nimport {\n  resetCartReducer,\n  cartChangeProduct,\n  changeCart,\n} from './action';\n\nconst timersId = {};\n\nfunction useCartActions() {\n  const dispatch = useDispatch();\n  const { messages } = useIntl();\n\n  function cartAddProductAction(ids, redirect) {\n    dispatch(changeCart({ ids, status: true, redirect }));\n    if (redirect !== true) {\n      message.success(messages['local.cart_added_success']);\n    }\n  }\n  function cartRemoveProductAction(ids) {\n    dispatch(changeCart({ ids, status: false }));\n  }\n  function cartChangeProductAction(payload) {\n    dispatch(cartChangeProduct({ ...payload }));\n\n    clearTimeout(timersId[payload.id]);\n    timersId[payload.id] = (setTimeout(() => {\n      const { id, changes: { count } } = payload;\n      dispatch(changeCart({\n        ids: {\n          [id]: {\n            id,\n            count,\n            status: true,\n          },\n        },\n        status: true,\n      }));\n    }, 400));\n  }\n  function resetCartReducerAction() {\n    dispatch(resetCartReducer());\n  }\n  return {\n    cartAddProductAction,\n    cartChangeProductAction,\n    cartRemoveProductAction,\n    resetCartReducerAction,\n  };\n}\n\n\nexport default useCartActions;\n"]},"metadata":{},"sourceType":"module"}