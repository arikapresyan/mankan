{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback, useMemo, useState } from 'react';\nimport { useFormik } from 'formik';\nimport nextId from 'react-id-generator';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { getValidationSchema, formatDateFromValues, initialEducationObj } from './constants';\nimport useGlobalAPI from '../../../../hooks/useGlobalAPI';\nimport { APISend } from '../../../../store/global-APIS/action';\nimport userAPI from '../../../../API_Paths/userAPI';\n\nfunction useApplyOnlineForm(handleClose, id) {\n  const dispatch = useDispatch();\n  const {\n    messages\n  } = useIntl();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useGlobalAPI({\n    onCancel: () => {\n      setLoading(false);\n    },\n    onSuccess: handleClose\n  });\n  const validationSchema = useMemo(() => getValidationSchema(messages), [messages]);\n  const formik = useFormik({\n    initialValues: {\n      fullName: '',\n      phone: '',\n      email: '',\n      languages: [{\n        value: '',\n        points: null,\n        id: nextId()\n      }],\n      softwareSkills: [{\n        id: nextId()\n      }],\n      favorite: [{\n        id: nextId()\n      }],\n      socialNetwork: [{\n        id: nextId()\n      }],\n      education: [_objectSpread({\n        id: nextId()\n      }, initialEducationObj)],\n      professionalExperience: [{\n        id: nextId()\n      }],\n      imgList: [],\n      description1: '',\n      description2: ''\n    },\n    validationSchema,\n\n    onSubmit(values) {\n      const _formatDateFromValues = formatDateFromValues(values),\n            {\n        image\n      } = _formatDateFromValues,\n            rest = _objectWithoutProperties(_formatDateFromValues, [\"image\"]);\n\n      rest.id = id;\n      const FD = new FormData();\n      FD.set('image', image);\n      FD.set('data', JSON.stringify(rest));\n      setLoading(true);\n      dispatch(APISend({\n        method: 'post',\n        url: userAPI.vacancy,\n        data: FD\n      }));\n    }\n\n  });\n  const changeField = useCallback(({\n    target: {\n      value,\n      name\n    }\n  }) => {\n    formik.setFieldValue(name, value);\n    setTimeout(() => {\n      formik.setFieldTouched(name, true);\n    }, 0);\n  }, []);\n  return {\n    formik,\n    changeField,\n    loading\n  };\n}\n\nexport default useApplyOnlineForm;","map":null,"metadata":{},"sourceType":"module"}