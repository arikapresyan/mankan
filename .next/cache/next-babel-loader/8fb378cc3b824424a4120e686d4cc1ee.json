{"ast":null,"code":"import { takeEvery, call, all, put } from 'redux-saga/effects';\nimport Axios from '../services/Axios';\nimport { getSlides, getSlidesSuccess, getSlidesError } from './actions';\n\nconst getSlidesRequest = () => Axios.get('/api/product/mainSlider');\n\nfunction* workGetSlides() {\n  try {\n    const {\n      data: {\n        result: {\n          rows\n        }\n      }\n    } = yield call(getSlidesRequest);\n    const data = rows.sort(() => Math.random() - 0.5);\n    yield put(getSlidesSuccess({\n      data\n    }));\n  } catch (e) {\n    yield put(getSlidesError());\n  }\n}\n\nfunction* watchGetSlides() {\n  yield takeEvery(getSlides, workGetSlides);\n}\n\nexport default function* () {\n  yield all([watchGetSlides()]);\n}","map":{"version":3,"sources":["/var/www/mankan-front/store/main-slides/saga.js"],"names":["takeEvery","call","all","put","Axios","getSlides","getSlidesSuccess","getSlidesError","getSlidesRequest","get","workGetSlides","data","result","rows","sort","Math","random","e","watchGetSlides"],"mappings":"AAAA,SACEA,SADF,EACaC,IADb,EACmBC,GADnB,EACwBC,GADxB,QAEO,oBAFP;AAGA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SAASC,SAAT,EAAoBC,gBAApB,EAAsCC,cAAtC,QAA4D,WAA5D;;AAEA,MAAMC,gBAAgB,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,yBAAV,CAA/B;;AAEA,UAAUC,aAAV,GAA0B;AACxB,MAAI;AACF,UAAM;AAAEC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAEC,UAAAA;AAAF;AAAV;AAAR,QAAiC,MAAMZ,IAAI,CAACO,gBAAD,CAAjD;AACA,UAAMG,IAAI,GAAGE,IAAI,CAACC,IAAL,CAAU,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAhC,CAAb;AACA,UAAMb,GAAG,CAACG,gBAAgB,CAAC;AAAEK,MAAAA;AAAF,KAAD,CAAjB,CAAT;AACD,GAJD,CAIE,OAAOM,CAAP,EAAU;AACV,UAAMd,GAAG,CAACI,cAAc,EAAf,CAAT;AACD;AACF;;AAED,UAAUW,cAAV,GAA2B;AACzB,QAAMlB,SAAS,CAACK,SAAD,EAAYK,aAAZ,CAAf;AACD;;AACD,eAAe,aAAa;AAC1B,QAAMR,GAAG,CAAC,CAACgB,cAAc,EAAf,CAAD,CAAT;AACD","sourcesContent":["import {\n  takeEvery, call, all, put,\n} from 'redux-saga/effects';\nimport Axios from '../services/Axios';\nimport { getSlides, getSlidesSuccess, getSlidesError } from './actions';\n\nconst getSlidesRequest = () => Axios.get('/api/product/mainSlider');\n\nfunction* workGetSlides() {\n  try {\n    const { data: { result: { rows } } } = yield call(getSlidesRequest);\n    const data = rows.sort(() => Math.random() - 0.5);\n    yield put(getSlidesSuccess({ data }));\n  } catch (e) {\n    yield put(getSlidesError());\n  }\n}\n\nfunction* watchGetSlides() {\n  yield takeEvery(getSlides, workGetSlides);\n}\nexport default function* () {\n  yield all([watchGetSlides()]);\n}\n"]},"metadata":{},"sourceType":"module"}