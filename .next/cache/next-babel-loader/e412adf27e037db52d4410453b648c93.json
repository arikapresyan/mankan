{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(workAPISend),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAPISend);\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeEvery, call, put } from '@redux-saga/core/effects';\nimport message from 'antd/lib/message';\nimport Axios from '../services/Axios';\nimport { APISuccess, APIError, APILoading, APISend, APIClear } from './action';\nvar LOADER_KEY = 'loaderKey';\n\nfunction sendAPIRequest(data) {\n  return Axios.request(_objectSpread({}, data));\n}\n\nexport function workAPISend(action) {\n  var _action$payload, method, url, data, headers, _action$payload$succe, successText, _action$payload$error, errorText, _action$payload$loadi, loadingText, res, status;\n\n  return _regeneratorRuntime.wrap(function workAPISend$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _action$payload = action.payload, method = _action$payload.method, url = _action$payload.url, data = _action$payload.data, headers = _action$payload.headers, _action$payload$succe = _action$payload.successText, successText = _action$payload$succe === void 0 ? 'Success' : _action$payload$succe, _action$payload$error = _action$payload.errorText, errorText = _action$payload$error === void 0 ? 'Something went wrong' : _action$payload$error, _action$payload$loadi = _action$payload.loadingText, loadingText = _action$payload$loadi === void 0 ? 'Loading...' : _action$payload$loadi;\n          _context.next = 3;\n          return put(APILoading());\n\n        case 3:\n          _context.prev = 3;\n          message.loading({\n            content: loadingText,\n            key: LOADER_KEY,\n            duration: 0\n          });\n          _context.next = 7;\n          return call(sendAPIRequest, {\n            method: method,\n            url: url,\n            headers: headers || {},\n            data: data || null\n          });\n\n        case 7:\n          res = _context.sent;\n          status = res.status;\n          message.success({\n            content: successText,\n            key: LOADER_KEY,\n            duration: 5\n          });\n          _context.next = 12;\n          return put(APISuccess({\n            responseText: successText,\n            status: status\n          }));\n\n        case 12:\n          _context.next = 19;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](3);\n          message.error({\n            content: errorText,\n            key: LOADER_KEY,\n            duration: 5\n          });\n          _context.next = 19;\n          return put(APIError({\n            responseText: errorText\n          }));\n\n        case 19:\n          _context.prev = 19;\n          _context.next = 22;\n          return put(APIClear());\n\n        case 22:\n          return _context.finish(19);\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[3, 14, 19, 23]]);\n}\nexport function watchAPISend() {\n  return _regeneratorRuntime.wrap(function watchAPISend$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(APISend, workAPISend);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/var/www/mankan-front/store/global-APIS/saga.js"],"names":["workAPISend","watchAPISend","takeEvery","call","put","message","Axios","APISuccess","APIError","APILoading","APISend","APIClear","LOADER_KEY","sendAPIRequest","data","request","action","payload","method","url","headers","successText","errorText","loadingText","loading","content","key","duration","res","status","success","responseText","error"],"mappings":";;;oDAiBiBA,W;qDAmCAC,Y;;;;;;AApDjB,SACEC,SADF,EACaC,IADb,EACmBC,GADnB,QAEO,0BAFP;AAGA,OAAQC,OAAR,MAAsB,kBAAtB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SACEC,UADF,EACcC,QADd,EACwBC,UADxB,EACoCC,OADpC,EAC6CC,QAD7C,QAEO,UAFP;AAIA,IAAMC,UAAU,GAAG,WAAnB;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAOR,KAAK,CAACS,OAAN,mBACFD,IADE,EAAP;AAGD;;AAED,OAAO,SAAUd,WAAV,CAAsBgB,MAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BASDA,MAAM,CAACC,OATN,EAEHC,MAFG,mBAEHA,MAFG,EAGHC,GAHG,mBAGHA,GAHG,EAIHL,IAJG,mBAIHA,IAJG,EAKHM,OALG,mBAKHA,OALG,0CAMHC,WANG,EAMHA,WANG,sCAMW,SANX,kEAOHC,SAPG,EAOHA,SAPG,sCAOS,sBAPT,kEAQHC,WARG,EAQHA,WARG,sCAQW,YARX;AAAA;AAUL,iBAAMnB,GAAG,CAACK,UAAU,EAAX,CAAT;;AAVK;AAAA;AAYHJ,UAAAA,OAAO,CAACmB,OAAR,CAAgB;AAAEC,YAAAA,OAAO,EAAEF,WAAX;AAAwBG,YAAAA,GAAG,EAAEd,UAA7B;AAAyCe,YAAAA,QAAQ,EAAE;AAAnD,WAAhB;AAZG;AAaS,iBAAMxB,IAAI,CAACU,cAAD,EAAiB;AACrCK,YAAAA,MAAM,EAANA,MADqC;AAErCC,YAAAA,GAAG,EAAHA,GAFqC;AAGrCC,YAAAA,OAAO,EAAEA,OAAO,IAAI,EAHiB;AAIrCN,YAAAA,IAAI,EAAEA,IAAI,IAAI;AAJuB,WAAjB,CAAV;;AAbT;AAaGc,UAAAA,GAbH;AAmBKC,UAAAA,MAnBL,GAmBgBD,GAnBhB,CAmBKC,MAnBL;AAoBHxB,UAAAA,OAAO,CAACyB,OAAR,CAAgB;AAAEL,YAAAA,OAAO,EAAEJ,WAAX;AAAwBK,YAAAA,GAAG,EAAEd,UAA7B;AAAyCe,YAAAA,QAAQ,EAAE;AAAnD,WAAhB;AApBG;AAqBH,iBAAMvB,GAAG,CAACG,UAAU,CAAC;AAAEwB,YAAAA,YAAY,EAAEV,WAAhB;AAA6BQ,YAAAA,MAAM,EAANA;AAA7B,WAAD,CAAX,CAAT;;AArBG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuBHxB,UAAAA,OAAO,CAAC2B,KAAR,CAAc;AAAEP,YAAAA,OAAO,EAAEH,SAAX;AAAsBI,YAAAA,GAAG,EAAEd,UAA3B;AAAuCe,YAAAA,QAAQ,EAAE;AAAjD,WAAd;AAvBG;AAwBH,iBAAMvB,GAAG,CACPI,QAAQ,CAAC;AACPuB,YAAAA,YAAY,EAAET;AADP,WAAD,CADD,CAAT;;AAxBG;AAAA;AAAA;AA8BH,iBAAMlB,GAAG,CAACO,QAAQ,EAAT,CAAT;;AA9BG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCP,OAAO,SAAUV,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMC,SAAS,CAACQ,OAAD,EAAUV,WAAV,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n  takeEvery, call, put,\n} from '@redux-saga/core/effects';\nimport  message  from 'antd/lib/message';\nimport Axios from '../services/Axios';\nimport {\n  APISuccess, APIError, APILoading, APISend, APIClear,\n} from './action';\n\nconst LOADER_KEY = 'loaderKey';\n\nfunction sendAPIRequest(data) {\n  return Axios.request({\n    ...data,\n  });\n}\n\nexport function* workAPISend(action) {\n  const {\n    method,\n    url,\n    data,\n    headers,\n    successText = 'Success',\n    errorText = 'Something went wrong',\n    loadingText = 'Loading...',\n  } = action.payload;\n  yield put(APILoading());\n  try {\n    message.loading({ content: loadingText, key: LOADER_KEY, duration: 0 });\n    const res = yield call(sendAPIRequest, {\n      method,\n      url,\n      headers: headers || {},\n      data: data || null,\n    });\n    const { status } = res;\n    message.success({ content: successText, key: LOADER_KEY, duration: 5 });\n    yield put(APISuccess({ responseText: successText, status }));\n  } catch (error) {\n    message.error({ content: errorText, key: LOADER_KEY, duration: 5 });\n    yield put(\n      APIError({\n        responseText: errorText,\n      }),\n    );\n  } finally {\n    yield put(APIClear());\n  }\n}\n\n\nexport function* watchAPISend() {\n  yield takeEvery(APISend, workAPISend);\n}\n"]},"metadata":{},"sourceType":"module"}