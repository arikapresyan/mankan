{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, call, put } from '@redux-saga/core/effects';\nimport { message } from 'antd';\nimport Axios from '../services/Axios';\nimport { APISuccess, APIError, APILoading, APISend, APIClear } from './action';\nconst LOADER_KEY = 'loaderKey';\n\nfunction sendAPIRequest(data) {\n  return Axios.request(_objectSpread({}, data));\n}\n\nexport function* workAPISend(action) {\n  const {\n    method,\n    url,\n    data,\n    headers,\n    successText = 'Success',\n    errorText = 'Something went wrong',\n    loadingText = 'Loading...'\n  } = action.payload;\n  yield put(APILoading());\n\n  try {\n    message.loading({\n      content: loadingText,\n      key: LOADER_KEY,\n      duration: 0\n    });\n    const res = yield call(sendAPIRequest, {\n      method,\n      url,\n      headers: headers || {},\n      data: data || null\n    });\n    const {\n      status\n    } = res;\n    message.success({\n      content: successText,\n      key: LOADER_KEY,\n      duration: 5\n    });\n    yield put(APISuccess({\n      responseText: successText,\n      status\n    }));\n  } catch (error) {\n    message.error({\n      content: errorText,\n      key: LOADER_KEY,\n      duration: 5\n    });\n    yield put(APIError({\n      responseText: errorText\n    }));\n  } finally {\n    yield put(APIClear());\n  }\n}\nexport function* watchAPISend() {\n  yield takeEvery(APISend, workAPISend);\n}","map":null,"metadata":{},"sourceType":"module"}