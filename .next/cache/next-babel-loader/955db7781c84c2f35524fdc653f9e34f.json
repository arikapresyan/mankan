{"ast":null,"code":"import { takeLatest, put, select, takeEvery } from '@redux-saga/core/effects';\nimport { catalogFilterChange, catalogFilterChangeSuccess, catalogFilterSetValues, resetFilterView } from './action';\nimport { catalogGet } from '../catalog/action';\nimport { getCatalogFilterByName } from './reducer';\n\nfunction* workCatalogFilterChange({\n  payload: {\n    name,\n    value\n  }\n}) {\n  try {\n    // disabled all until loading end then change filters and show result\n    // todo reset filters if all'\n    if (name === 'classification' && (value === null || value === void 0 ? void 0 : value[0]) === 'all') {\n      yield put(resetFilterView());\n    } else {\n      const classificationAll = yield select(getCatalogFilterByName('classification'));\n\n      if (classificationAll[0] === 'all') {\n        yield put(catalogFilterChangeSuccess({\n          name: 'classification',\n          value: []\n        }));\n      }\n    }\n\n    yield put(catalogFilterChangeSuccess({\n      name,\n      value\n    }));\n    yield put(catalogGet({\n      name,\n      value\n    }));\n  } catch (error) {\n    console.log('filter error', error);\n  }\n}\n\nfunction* watchCatalogFilterChange() {\n  yield takeLatest(catalogFilterChange, workCatalogFilterChange);\n}\n\nfunction* workCatalogFilterSetValues({\n  payload\n}) {\n  try {\n    var _payload$classificati;\n\n    const all = payload === null || payload === void 0 ? void 0 : (_payload$classificati = payload.classification) === null || _payload$classificati === void 0 ? void 0 : _payload$classificati[0];\n\n    if (all) {\n      yield put(resetFilterView({\n        exception: 'classification'\n      }));\n    } else {\n      const classificationAll = yield select(getCatalogFilterByName('classification'));\n\n      if (classificationAll[0] === 'all') {\n        yield put(catalogFilterChangeSuccess({\n          name: 'classification',\n          value: []\n        }));\n      }\n    }\n  } catch (e) {// todo handle\n  }\n}\n\nfunction* watchCatalogFilterSetValues() {\n  yield takeEvery(catalogFilterSetValues, workCatalogFilterSetValues);\n}\n\nexport { watchCatalogFilterChange, watchCatalogFilterSetValues };","map":null,"metadata":{},"sourceType":"module"}