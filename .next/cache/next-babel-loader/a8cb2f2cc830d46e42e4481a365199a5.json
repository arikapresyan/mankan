{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useIntl } from 'react-intl';\nimport router from 'next/router';\nimport useCartActions from '../../../store/cart/useCartActions';\nimport { getProductSizeFromObj, getBonus, getProductBrand, getProductAge, getProductBattery, addToCartObj } from '../../../constants/utils';\nimport keys from '../../../constants/keys';\nimport useGetProductPrice from '../../../hooks/useGetProductPrice';\nconst {\n  IMAGE_POSTFIX\n} = keys;\n\nfunction useBuyProductModal({\n  product,\n  localChanges,\n  handleHideModal,\n  bonus\n}) {\n  const {\n    cartAddProductAction\n  } = useCartActions();\n  const {\n    messages\n  } = useIntl();\n\n  const text = __jsx(\"span\", null, messages['local.modal_battery']);\n\n  const {\n    size,\n    brand,\n    id,\n    percent,\n    price,\n    accessories,\n    photos,\n    xmlCount,\n    xmlBarCode\n  } = product;\n  const {\n    0: hasBattery,\n    1: setHasBattery\n  } = useState(false);\n  const {\n    0: count,\n    1: setCount\n  } = useState(localChanges[product.id] && localChanges[product.id].count || product.count || 1);\n  const battery = useMemo(() => getProductBattery(accessories), [accessories]);\n  useEffect(() => {\n    if (battery && localChanges[id] && (localChanges[id].hasBattery || localChanges[id].batteryId) && battery.xmlCount) {\n      setHasBattery(true);\n    }\n  }, [battery, localChanges]);\n  const batteryText = useMemo(() => battery && `${battery.ProductAccessoriesMap.count}  ${messages['local.item(s)']} ${battery.name}`, [battery, messages]);\n  const brandName = useMemo(() => getProductBrand(brand), [brand]);\n  const sizeText = useMemo(() => getProductSizeFromObj(size), [size]);\n  const productAga = useMemo(() => getProductAge(product.minAge, product.maxAge), [product.minAge, product.maxAge]);\n  const photo = useMemo(() => {\n    const firstPhoto = photos ? photos.sort((a, b) => a.order - b.order)[0] : null;\n    if (!firstPhoto) return {};\n    return {\n      url: `${IMAGE_POSTFIX}${id}/${firstPhoto.url}`,\n      alt: firstPhoto.alt,\n      title: firstPhoto.title\n    };\n  }, [photos]);\n  const {\n    newPrice,\n    oldPrice\n  } = useGetProductPrice(product);\n  const bonusText = useMemo(() => getBonus(newPrice, bonus || 2, count), [newPrice, bonus, count]);\n  const priceBayCount = useMemo(() => newPrice * count, [newPrice, count]);\n\n  const addToCart = redirect => {\n    cartAddProductAction(addToCartObj({\n      hasBattery,\n      battery,\n      count,\n      product\n    }), router.router.route === '/cart' || redirect);\n    handleHideModal();\n  };\n\n  const addToCartAndRedirect = () => {\n    addToCart(true);\n  };\n\n  const text2 = useCallback(() => __jsx(\"span\", null, messages['local.can_use_bonus_if']), [messages]);\n  return {\n    addToCartAndRedirect,\n    addToCart,\n    bonusText,\n    batteryText,\n    brandName,\n    sizeText,\n    photo,\n    text,\n    setCount,\n    messages,\n    xmlPrice: oldPrice,\n    percent,\n    battery,\n    productAga,\n    text2,\n    id,\n    count,\n    hasBattery,\n    setHasBattery,\n    price,\n    xmlCount,\n    xmlBarCode,\n    priceBayCount\n  };\n}\n\nexport default useBuyProductModal;","map":null,"metadata":{},"sourceType":"module"}