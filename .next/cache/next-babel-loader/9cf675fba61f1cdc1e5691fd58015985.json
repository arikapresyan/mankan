{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport ReactImageMagnify from 'react-image-magnify';\n\nfunction getPercentageChange(oldNumber, newNumber) {\n  const decreaseValue = oldNumber - newNumber;\n  return Math.abs(decreaseValue / oldNumber * 100);\n}\n\nfunction per(num, amount) {\n  return num * amount / 100;\n}\n\nfunction ProductImagePreview(props) {\n  const {\n    selectedImage\n  } = props;\n  const {\n    0: widthHeight,\n    1: setWidthHeight\n  } = useState({\n    width: 500,\n    height: 430\n  });\n  const {\n    0: currantImage,\n    1: setCurrantImage\n  } = useState(null);\n  useEffect(() => {\n    if (selectedImage) {\n      const img = new Image();\n      img.src = selectedImage.url;\n\n      img.onload = () => {\n        const bigSize = img.height > img.width ? 'height' : 'width';\n        let newWidthHeight = {};\n\n        if (img[bigSize] > 500) {\n          const percentToChangeSize = getPercentageChange(img[bigSize], 500);\n          newWidthHeight.width = (img.width - per(img.width, percentToChangeSize)) * 2;\n          newWidthHeight.height = (img.height - per(img.height, percentToChangeSize)) * 2;\n        } else {\n          newWidthHeight = {\n            width: img.width * 2,\n            height: img.height * 2\n          };\n        }\n\n        setWidthHeight(newWidthHeight);\n        setCurrantImage(selectedImage);\n      };\n    }\n  }, [selectedImage]);\n  const wh = {\n    width: `${widthHeight.width / 2}px`,\n    height: `${widthHeight.height / 2}px`\n  };\n  return __jsx(\"div\", {\n    className: \"product_big_image\"\n  }, selectedImage && __jsx(\"div\", {\n    className: \"product_img_preview\",\n    style: wh\n  }, currantImage && __jsx(ReactImageMagnify, {\n    smallImage: _objectSpread({\n      alt: currantImage.alt,\n      isFluidWidth: true,\n      src: currantImage.url,\n      title: currantImage.title\n    }, wh),\n    largeImage: _objectSpread({\n      alt: currantImage.alt,\n      title: currantImage.title,\n      src: currantImage.url\n    }, widthHeight),\n    enlargedImagePosition: 'over'\n  })));\n}\n\nexport default ProductImagePreview;","map":null,"metadata":{},"sourceType":"module"}