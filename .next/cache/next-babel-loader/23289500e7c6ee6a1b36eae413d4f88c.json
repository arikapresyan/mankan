{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useMemo, useState } from 'react';\nimport Tooltip from 'antd/lib/tooltip';\nimport Input from 'antd/lib/input';\nimport Button from 'antd/lib/button';\nimport message from 'antd/lib/message';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ConfirmOrderModal from '../modals/confirm-order-modal/ConfirmOrderModal';\nimport { getBonus, getTooltipTexts } from '../../constants/utils';\nimport { getSingleData } from '../../store/single-data/action';\nimport { selectSingleData } from '../../store/single-data/reducer';\nimport useCartPrices from '../../hooks/useCartPrices';\nimport { MIN_TOTAL } from './constants';\n\nfunction TotalResult(_ref) {\n  var cartData = _ref.cartData,\n      bonusPercent = _ref.bonusPercent;\n\n  var _useState = useState(false),\n      visible = _useState[0],\n      setVisible = _useState[1];\n\n  var _useState2 = useState(null),\n      promo = _useState2[0],\n      setPromo = _useState2[1];\n\n  var _useState3 = useState(''),\n      promoCode = _useState3[0],\n      setPromoCode = _useState3[1];\n\n  var _useIntl = useIntl(),\n      messages = _useIntl.messages,\n      formatMessage = _useIntl.formatMessage;\n\n  var dispatch = useDispatch();\n\n  var _useCartPrices = useCartPrices(cartData, promo),\n      fullPrice = _useCartPrices.fullPrice,\n      fullNewPrice = _useCartPrices.fullNewPrice;\n\n  var _useMemo = useMemo(function () {\n    return getTooltipTexts(messages);\n  }, [messages]),\n      bonusText = _useMemo.bonusText,\n      promoText = _useMemo.promoText;\n\n  var _ref2 = useSelector(selectSingleData) || {},\n      _ref2$promoCode = _ref2.promoCode,\n      promoCodeData = _ref2$promoCode.data,\n      promoCodeLoading = _ref2$promoCode.loading,\n      promoCodeError = _ref2$promoCode.error;\n\n  useEffect(function () {\n    if (promoCodeError) {\n      message.warning(messages['local.wrong_promo_code']);\n    }\n  }, [promoCodeError]);\n\n  var handleShowModal = function handleShowModal() {\n    if ((fullNewPrice || fullPrice) < MIN_TOTAL) {\n      message.warning(formatMessage({\n        id: 'local.min_price_of_order'\n      }, {\n        price: MIN_TOTAL\n      }));\n      return false;\n    }\n\n    setVisible(true);\n    return true;\n  };\n\n  useSelector(function () {\n    if (promoCodeData && !visible && !promo) {\n      var shown = handleShowModal();\n      if (shown) setPromo(promoCodeData);\n    }\n  }, [promoCodeData]);\n\n  var showModal = function showModal() {\n    if (promoCode && promoCode.trim()) {\n      dispatch(getSingleData({\n        data: {\n          name: 'promoCode',\n          promoCode: promoCode\n        }\n      }));\n      return;\n    }\n\n    handleShowModal();\n  };\n\n  var handleCancel = function handleCancel() {\n    setVisible(false);\n    setPromo(null);\n  };\n\n  var totalPrice = 0;\n  var totalCount = 0;\n  cartData.forEach(function (cartItem) {\n    totalPrice += cartItem.count * (cartItem.percent ? cartItem.price : cartItem.xmlPrice);\n    totalCount += 1;\n  });\n  return __jsx(\"div\", {\n    className: \"result_container\"\n  }, __jsx(\"div\", {\n    className: \"total_item product_total\"\n  }, __jsx(\"div\", {\n    className: \"name\"\n  }, messages['local.my_basket'], ' '), __jsx(\"div\", {\n    className: \"description\"\n  }, \"\".concat(totalCount, \" \").concat(messages['local.products']))), __jsx(\"div\", {\n    className: \"total_item price_total\"\n  }, __jsx(\"div\", {\n    className: \"name\"\n  }, messages['local.total']), __jsx(\"div\", {\n    className: \"description\"\n  }, \"\".concat(totalPrice, \" \"), ' ', messages['local.dr'], '. ')), __jsx(\"div\", {\n    className: \"total_item bonus_total\"\n  }, __jsx(\"div\", {\n    className: \"name\"\n  }, messages['local.bonus']), __jsx(\"div\", {\n    className: \"description\"\n  }, getBonus(totalPrice, bonusPercent || 2, 1), ' ', messages['local.dr'], '.', __jsx(Tooltip, {\n    placement: \"bottom\",\n    title: bonusText,\n    className: \"info_tooltip\"\n  }, __jsx(\"span\", null, __jsx(\"img\", {\n    src: \"/images/icons/info.png\",\n    alt: \"\"\n  }))))), __jsx(\"div\", {\n    className: \"total_item promo_code\"\n  }, __jsx(\"div\", {\n    className: \"name\"\n  }, messages['local.promo_code']), __jsx(\"div\", {\n    className: \"description\"\n  }, __jsx(Input, {\n    placeholder: messages['local.example'],\n    onChange: function onChange(_ref3) {\n      var value = _ref3.target.value;\n      return setPromoCode(value);\n    },\n    value: promoCode\n  }), __jsx(Tooltip, {\n    placement: \"bottom\",\n    title: function title() {\n      return __jsx(\"span\", null, promoText);\n    },\n    className: \"info_tooltip\"\n  }, __jsx(\"span\", null, __jsx(\"img\", {\n    src: \"/images/icons/info.png\",\n    alt: \"\"\n  }))))), __jsx(Button, {\n    loading: promoCodeLoading,\n    className: \"confirm_btn\",\n    onClick: showModal\n  }, messages['local.confirm']), __jsx(ConfirmOrderModal, {\n    visible: visible,\n    handleHideModal: handleCancel,\n    data: {\n      cartData: cartData,\n      bonusPercent: bonusPercent,\n      promoCodeData: promo\n    }\n  }));\n}\n\nexport default TotalResult;","map":null,"metadata":{},"sourceType":"module"}