{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useRouter } from 'next/router';\nimport { Collapse, Icon, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport ClassificationFilter from '../filter-items/ClassificationFilter';\nimport PriceFilter from '../filter-items/PriceFilter';\nimport GenderFilter from '../filter-items/GenderFilter';\nimport AgeFilter from '../filter-items/AgeFilter';\nimport TypeFilter from '../filter-items/TypeFilter';\nimport MeaningFilter from '../filter-items/MeaningFilter';\nimport BrandFilter from '../filter-items/BrandFilter';\nimport { catalogFilterSetValues, catalogFilterChange } from '../../../store/catalog-filter/action';\nimport { hide } from '../../../store/userEventListeners/action';\nimport { catalogGet } from '../../../store/catalog/action';\nvar Panel = Collapse.Panel;\n\nvar WrapperSimple = function WrapperSimple(_ref) {\n  var children = _ref.children;\n  return children;\n};\n\nvar gatData = function gatData(name, value, mode) {\n  if (mode === 'mobile') return _defineProperty({}, name, value);\n  return {\n    name: name,\n    value: value\n  };\n};\n\nfunction IndexFilterList(_ref3) {\n  var catalogFilterSetValuesAction = _ref3.catalogFilterSetValuesAction,\n      catalogFilterChangeAction = _ref3.catalogFilterChangeAction,\n      catalogGetAction = _ref3.catalogGetAction,\n      hideAction = _ref3.hideAction,\n      filters = _ref3.filters,\n      mode = _ref3.mode;\n\n  var _useIntl = useIntl(),\n      messages = _useIntl.messages;\n\n  var router = useRouter();\n\n  function hideFilter() {\n    hideAction({\n      name: 'isFilterListOpen'\n    });\n  }\n\n  var _useState = useState([]),\n      changedNames = _useState[0],\n      setChangedNames = _useState[1]; // const { toggleFilterMobile } = useContext(Context);\n\n\n  function onSaveFilter() {\n    hideFilter();\n    catalogGetAction({\n      loading: 1,\n      changedNames: changedNames\n    });\n\n    if (!router.asPath.includes('catalog')) {\n      catalogFilterSetValuesAction({\n        isUserFilter: true\n      });\n      router.push('/catalog');\n    }\n\n    setChangedNames([]);\n  }\n\n  var isMobile = mode === 'mobile';\n  var actionByMode = isMobile ? catalogFilterSetValuesAction : catalogFilterChangeAction;\n  var Wrapper = isMobile ? Collapse : WrapperSimple;\n  var PanelIf = isMobile ? Panel : WrapperSimple;\n\n  var setChangedNamesAction = function setChangedNamesAction(name) {\n    if (changedNames.indexOf(name) === -1 && isMobile) {\n      setChangedNames([].concat(_toConsumableArray(changedNames), [name]));\n    }\n  };\n\n  var changeValue = function changeValue(name) {\n    return function (value) {\n      if (value[value.length - 1] === 'all') {\n        value = ['all'];\n      } else {\n        var indexOfAll = value.indexOf('all');\n        if (indexOfAll !== -1) value.splice(indexOfAll, 1);\n      }\n\n      actionByMode(gatData(name, value, mode));\n      setChangedNamesAction(name);\n    };\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    id: \"filter_list\",\n    className: isMobile ? 'filter_list_mobile' : ''\n  }, __jsx(Wrapper, {\n    mode: mode\n  }, __jsx(PanelIf, {\n    mode: mode,\n    header: messages['local.specification'],\n    key: \"1\",\n    showArrow: false,\n    extra: __jsx(Icon, {\n      type: \"right\"\n    })\n  }, __jsx(ClassificationFilter, {\n    onChange: changeValue('classification'),\n    extraFilters: filters.extraFilter\n  })), __jsx(PanelIf, {\n    mode: mode,\n    header: messages['local.price'],\n    key: \"2\",\n    showArrow: false,\n    extra: __jsx(Icon, {\n      type: \"right\"\n    })\n  }, __jsx(PriceFilter, {\n    onChange: changeValue('price')\n  })), __jsx(PanelIf, {\n    mode: mode,\n    header: messages['local.gender'],\n    key: \"3\",\n    showArrow: false,\n    extra: __jsx(Icon, {\n      type: \"right\"\n    })\n  }, __jsx(GenderFilter, {\n    onChange: function onChange(value) {\n      actionByMode(gatData('gender', [value[value.length - 1] || []], mode));\n      setChangedNamesAction('gender');\n    },\n    genderFilter: filters.productSex\n  })), __jsx(PanelIf, {\n    mode: mode,\n    header: messages['local.age'],\n    key: \"4\",\n    showArrow: false,\n    extra: __jsx(Icon, {\n      type: \"right\"\n    })\n  }, __jsx(AgeFilter, {\n    onChange: changeValue('age'),\n    ages: filters.productAge || {}\n  })), __jsx(PanelIf, {\n    mode: mode,\n    header: messages['local.type'],\n    key: \"5\",\n    showArrow: false,\n    extra: __jsx(Icon, {\n      type: \"right\"\n    })\n  }, __jsx(TypeFilter, {\n    onChange: changeValue('type'),\n    types: filters.productType || {}\n  })), __jsx(PanelIf, {\n    mode: mode,\n    header: messages['local.meaning'],\n    key: \"6\",\n    showArrow: false,\n    extra: __jsx(Icon, {\n      type: \"right\"\n    })\n  }, __jsx(MeaningFilter, {\n    onChange: changeValue('meaning'),\n    meanings: filters.productUsage\n  })), __jsx(PanelIf, {\n    mode: mode,\n    header: messages['local.brand'],\n    key: \"7\",\n    showArrow: false,\n    extra: __jsx(Icon, {\n      type: \"right\"\n    })\n  }, __jsx(BrandFilter, {\n    onChange: changeValue('brand'),\n    brands: filters.brand\n  })))), mode === 'mobile' ? __jsx(React.Fragment, null, __jsx(Button, {\n    type: \"primary\",\n    className: \"save_btn\",\n    onClick: onSaveFilter\n  }, \"\\u054A\\u0561\\u0570\\u057A\\u0561\\u0576\\u0565\\u056C\"), __jsx(Button, {\n    type: \"default\",\n    shape: \"circle\",\n    icon: \"close\",\n    className: \"close_btn\",\n    onClick: function onClick() {\n      hideFilter();\n    }\n  })) : null);\n}\n\nIndexFilterList.defaultProps = {\n  mode: '',\n  filters: {}\n};\n\nvar mapStateToProps = function mapStateToProps(_ref4) {\n  var filters = _ref4.catalogFilter.filters;\n  return {\n    filters: filters\n  };\n};\n\nexport default connect(mapStateToProps, {\n  catalogFilterSetValuesAction: catalogFilterSetValues,\n  catalogFilterChangeAction: catalogFilterChange,\n  catalogGetAction: catalogGet,\n  hideAction: hide\n})(IndexFilterList);","map":null,"metadata":{},"sourceType":"module"}