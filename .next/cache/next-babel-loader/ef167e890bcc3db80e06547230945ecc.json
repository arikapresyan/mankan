{"ast":null,"code":"var _jsxFileName = \"/var/www/mankan-front/components/modals/forgot-password-modal/ForgotPasswordModal.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport Button from 'antd/lib/button';\nimport Form from 'antd/lib/form';\nimport Input from 'antd/lib/input';\nimport Modal from 'antd/lib/modal';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport { connect } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport userAPI from '../../../API_Paths/userAPI';\nimport { APISend } from '../../../store/global-APIS/action';\nimport { hideAll } from '../../../store/userEventListeners/action';\nimport { getRecoverySchema } from '../../../utils/validationSchemas';\n\nfunction ForgotPasswordModal(props) {\n  const {\n    messages\n  } = useIntl();\n  const {\n    visible,\n    handleHideModal,\n    APISendAction,\n    globalAPIS,\n    hideAllAction\n  } = props;\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    if (globalAPIS.hasError) {\n      setLoading(false);\n    } else if (globalAPIS.success) {\n      hideAllAction();\n    }\n  }, [globalAPIS]);\n  const validationSchema = useMemo(() => getRecoverySchema(messages), [messages]);\n  const {\n    values,\n    touched,\n    errors,\n    handleChange,\n    handleSubmit\n  } = useFormik({\n    initialValues: {\n      email: ''\n    },\n    onSubmit: values => {\n      setLoading(true);\n      APISendAction({\n        method: 'post',\n        url: userAPI.recoveringPassword,\n        data: _objectSpread({}, values)\n      });\n    },\n    validationSchema\n  });\n  return __jsx(Modal, {\n    destroyOnClose: true,\n    centered: true,\n    visible: visible,\n    onCancel: handleHideModal,\n    footer: null,\n    className: \"password_recover_modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, messages['local.password_recovery']), __jsx(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, errors.global ? __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 26\n    }\n  }, errors.global) : null, __jsx(Form.Item, {\n    validateStatus: errors.email && touched.email && 'error',\n    help: touched.email && errors.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    placeholder: `${messages['local.email']}*`,\n    name: \"email\",\n    value: values.email,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  })), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, messages['local.will_send_new_password']), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"password_recover_btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    disabled: loading,\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, messages['local.send'])))));\n}\n\nForgotPasswordModal.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  handleHideModal: PropTypes.func.isRequired,\n  APISendAction: PropTypes.func,\n  globalAPIS: PropTypes.object,\n  hideAllAction: PropTypes.func\n};\n\nfunction mapStateToProps({\n  globalAPIS\n}) {\n  return {\n    globalAPIS\n  };\n}\n\nexport default connect(mapStateToProps, {\n  APISendAction: APISend,\n  hideAllAction: hideAll\n})(ForgotPasswordModal);","map":{"version":3,"sources":["/var/www/mankan-front/components/modals/forgot-password-modal/ForgotPasswordModal.js"],"names":["React","useState","useEffect","useMemo","Button","Form","Input","Modal","PropTypes","useFormik","connect","useIntl","userAPI","APISend","hideAll","getRecoverySchema","ForgotPasswordModal","props","messages","visible","handleHideModal","APISendAction","globalAPIS","hideAllAction","loading","setLoading","hasError","success","validationSchema","values","touched","errors","handleChange","handleSubmit","initialValues","email","onSubmit","method","url","recoveringPassword","data","global","propTypes","bool","isRequired","func","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\n\r\nimport Button from 'antd/lib/button';\r\nimport Form from 'antd/lib/form';\r\nimport Input from 'antd/lib/input';\r\nimport Modal from 'antd/lib/modal';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { useFormik } from 'formik';\r\nimport { connect } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport userAPI from '../../../API_Paths/userAPI';\r\nimport { APISend } from '../../../store/global-APIS/action';\r\nimport { hideAll } from '../../../store/userEventListeners/action';\r\nimport { getRecoverySchema } from '../../../utils/validationSchemas';\r\n\r\n\r\nfunction ForgotPasswordModal(props) {\r\n  const { messages } = useIntl();\r\n  const {\r\n    visible,\r\n    handleHideModal,\r\n    APISendAction,\r\n    globalAPIS,\r\n    hideAllAction,\r\n  } = props;\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (globalAPIS.hasError) {\r\n      setLoading(false);\r\n    } else if (globalAPIS.success) {\r\n      hideAllAction();\r\n    }\r\n  }, [globalAPIS]);\r\n\r\n  const validationSchema = useMemo(() => getRecoverySchema(messages), [messages]);\r\n\r\n  const {\r\n    values,\r\n    touched,\r\n    errors,\r\n    handleChange,\r\n    handleSubmit,\r\n  } = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n    },\r\n    onSubmit: (values) => {\r\n      setLoading(true);\r\n      APISendAction({ method: 'post', url: userAPI.recoveringPassword, data: { ...values } });\r\n    },\r\n    validationSchema,\r\n  });\r\n  return (\r\n    <Modal\r\n      destroyOnClose\r\n      centered\r\n      visible={visible}\r\n      onCancel={handleHideModal}\r\n      footer={null}\r\n      className=\"password_recover_modal\"\r\n    >\r\n      <h2>{messages['local.password_recovery']}</h2>\r\n\r\n      <Form onSubmit={handleSubmit}>\r\n        {errors.global ? <p>{errors.global}</p> : null}\r\n        <Form.Item\r\n          validateStatus={errors.email && touched.email && 'error'}\r\n          help={touched.email && errors.email}\r\n        >\r\n          <Input\r\n            placeholder={`${messages['local.email']}*`}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n          />\r\n        </Form.Item>\r\n        <p>\r\n          {messages['local.will_send_new_password']}\r\n        </p>\r\n\r\n\r\n        <Form.Item>\r\n          <div className=\"password_recover_btn\">\r\n            <Button disabled={loading} type=\"primary\" htmlType=\"submit\">\r\n              {messages['local.send']}\r\n            </Button>\r\n          </div>\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\n\r\nForgotPasswordModal.propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  handleHideModal: PropTypes.func.isRequired,\r\n  APISendAction: PropTypes.func,\r\n  globalAPIS: PropTypes.object,\r\n  hideAllAction: PropTypes.func,\r\n};\r\nfunction mapStateToProps({ globalAPIS }) {\r\n  return { globalAPIS };\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  APISendAction: APISend,\r\n  hideAllAction: hideAll,\r\n})(ForgotPasswordModal);\r\n"]},"metadata":{},"sourceType":"module"}