{"ast":null,"code":"import * as Yup from 'yup';\nimport { regex } from '../constants/utils';\nexport const getEmailSchema = msg => Yup.object().shape({\n  email: Yup.string().required(msg['local.enter_your_email']).test('str', msg['local.invalid_email'], value => regex.email.test(value))\n});\nexport const getLoginSchema = msg => Yup.object().shape({\n  emailOrPhone: Yup.string().required(msg['local.enter_your_email']),\n  password: Yup.string().required(msg['local.enter_your_password'])\n});\nexport const getRecoverySchema = msg => Yup.object().shape({\n  email: Yup.string().required(msg['local.enter_your_email']).test('str', msg['local.invalid_email'], value => regex.email.test(value))\n});\nexport const getRegistrationSchema = msg => Yup.object().shape({\n  name: Yup.string().required(msg['local.enter_your_name']).min(3, msg['local.invalid_field']).test('str', msg['local.invalid_field'], value => regex.name.test(value)),\n  surname: Yup.string().required(msg['local.enter_your_surname']).min(3, msg['local.invalid_field']).test('str', msg['local.invalid_field'], value => regex.name.test(value)),\n  phone: Yup.string().required(msg['local.enter_your_number']).test('phone', msg['local.invalid_field'], value => regex.phone.test(value)).min(9, msg['local.invalid_field']).max(12, msg['local.invalid_field']),\n  email: Yup.string().required(msg['local.enter_your_email']).test('str', msg['local.invalid_email'], value => regex.email.test(value)),\n  password: Yup.string().required(msg['local.enter_your_password']).min(6, msg['local.password_min_length']),\n  repeatPassword: Yup.string().required(msg['local.repeat_password']).oneOf([Yup.ref('password'), null], msg['local.passwords_must_match']),\n  agreeTerms: Yup.boolean().oneOf([true], msg['local.must_accept_terms_and_conditions'])\n});\nexport const getFeedbackSchema = msg => Yup.object().shape({\n  phone: Yup.string().required(msg['local.enter_your_number']).test('phone', msg['local.invalid_field'], value => regex.phone.test(value)).min(9, msg['local.invalid_field']).max(12, msg['local.invalid_field']),\n  email: Yup.string().required(msg['local.enter_your_email']).test('str', msg['local.invalid_email'], value => regex.email.test(value)),\n  fullName: Yup.string().required(msg['local.enter_your_fullname']).trim().test('str', msg['local.invalid_field'], value => !regex.string.test(value)),\n  message: Yup.string().required(msg['local.required']).trim()\n});\nexport const getSuggestionSchema = (msg, type) => // type: 'Offer' || 'Complaint'\nYup.object().shape({\n  email: Yup.string().required(msg['local.enter_your_email']).test('str', msg['local.invalid_email'], value => regex.email.test(value)),\n  [type]: Yup.string().required(msg['local.required']).trim()\n});\nexport const getOrderSchema = msg => Yup.object().shape({\n  firstName: Yup.string().required(msg['local.enter_your_name']).min(3, msg['local.invalid_field']).test('str', msg['local.invalid_field'], value => regex.name.test(value)),\n  lastName: Yup.string().required(msg['local.enter_your_surname']).min(3, msg['local.invalid_field']).test('str', msg['local.invalid_field'], value => regex.name.test(value)),\n  phone: Yup.string().required(msg['local.enter_your_number']).test('phone', msg['local.invalid_field'], value => regex.phone.test(value)).min(9, msg['local.invalid_field']).max(12, msg['local.invalid_field']),\n  email: Yup.string().required(msg['local.enter_your_email']).test('str', msg['local.invalid_email'], value => regex.email.test(value)),\n  street: Yup.string().required(msg['local.required']).min(3, msg['local.invalid_field']).trim(),\n  house: Yup.string().required(msg['local.required']).trim(),\n  entry: Yup.string().trim(),\n  deliveryPeriodString: Yup.string().required(msg['local.required']).trim()\n});\nexport const getNewPasswordSchema = msg => Yup.object().shape({\n  password: Yup.string().required(msg['local.enter_your_password']).min(6, msg['local.password_min_length']),\n  retryPassword: Yup.string().required(msg['local.repeat_password']).oneOf([Yup.ref('password'), null], msg['local.passwords_must_match'])\n});\nexport const getChangeInfoSchema = msg => Yup.object().shape({\n  firstName: Yup.string().required(msg['local.enter_your_name']).min(3, msg['local.invalid_field']).test('str', msg['local.invalid_field'], value => regex.name.test(value)),\n  lastName: Yup.string().required(msg['local.enter_your_surname']).min(3, msg['local.invalid_field']).test('str', msg['local.invalid_field'], value => regex.name.test(value)),\n  phone: Yup.string().required(msg['local.enter_your_number']).test('phone', msg['local.invalid_field'], value => regex.phone.test(value)).min(9, msg['local.invalid_field']).max(12, msg['local.invalid_field']),\n  email: Yup.string().required(msg['local.enter_your_email']).test('str', msg['local.invalid_email'], value => regex.email.test(value)),\n  changePassMode: Yup.bool(),\n  password: Yup.string().min(6, msg['local.password_min_length']).test('changePassMode', msg['local.enter_your_password'], function (value) {\n    if (this.parent.changePassMode) {\n      if (!value || !value.trim()) {\n        return false;\n      }\n    }\n\n    return true;\n  }),\n  retryPassword: Yup.string().oneOf([Yup.ref('password'), null], msg['local.passwords_must_match']).test('changePassMode', msg['local.repeat_password'], function (value) {\n    if (this.parent.changePassMode) {\n      if (!value || !value.trim()) {\n        return false;\n      }\n    }\n\n    return true;\n  })\n});","map":null,"metadata":{},"sourceType":"module"}