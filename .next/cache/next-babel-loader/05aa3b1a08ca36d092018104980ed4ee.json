{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(workAPISend),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAPISend);\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeEvery, call, put } from '@redux-saga/core/effects';\nimport { message } from 'antd';\nimport Axios from '../services/Axios';\nimport { APISuccess, APIError, APILoading, APISend, APIClear } from './action';\nvar LOADER_KEY = 'loaderKey';\n\nfunction sendAPIRequest(data) {\n  return Axios.request(_objectSpread({}, data));\n}\n\nexport function workAPISend(action) {\n  var _action$payload, method, url, data, headers, _action$payload$succe, successText, _action$payload$error, errorText, _action$payload$loadi, loadingText, res, status;\n\n  return _regeneratorRuntime.wrap(function workAPISend$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _action$payload = action.payload, method = _action$payload.method, url = _action$payload.url, data = _action$payload.data, headers = _action$payload.headers, _action$payload$succe = _action$payload.successText, successText = _action$payload$succe === void 0 ? 'Success' : _action$payload$succe, _action$payload$error = _action$payload.errorText, errorText = _action$payload$error === void 0 ? 'Something went wrong' : _action$payload$error, _action$payload$loadi = _action$payload.loadingText, loadingText = _action$payload$loadi === void 0 ? 'Loading...' : _action$payload$loadi;\n          _context.next = 3;\n          return put(APILoading());\n\n        case 3:\n          _context.prev = 3;\n          message.loading({\n            content: loadingText,\n            key: LOADER_KEY,\n            duration: 0\n          });\n          _context.next = 7;\n          return call(sendAPIRequest, {\n            method: method,\n            url: url,\n            headers: headers || {},\n            data: data || null\n          });\n\n        case 7:\n          res = _context.sent;\n          status = res.status;\n          message.success({\n            content: successText,\n            key: LOADER_KEY,\n            duration: 5\n          });\n          _context.next = 12;\n          return put(APISuccess({\n            responseText: successText,\n            status: status\n          }));\n\n        case 12:\n          _context.next = 19;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](3);\n          message.error({\n            content: errorText,\n            key: LOADER_KEY,\n            duration: 5\n          });\n          _context.next = 19;\n          return put(APIError({\n            responseText: errorText\n          }));\n\n        case 19:\n          _context.prev = 19;\n          _context.next = 22;\n          return put(APIClear());\n\n        case 22:\n          return _context.finish(19);\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[3, 14, 19, 23]]);\n}\nexport function watchAPISend() {\n  return _regeneratorRuntime.wrap(function watchAPISend$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(APISend, workAPISend);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":null,"metadata":{},"sourceType":"module"}