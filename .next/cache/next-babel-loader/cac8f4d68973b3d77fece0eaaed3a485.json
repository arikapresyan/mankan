{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Form, Col, DatePicker, Checkbox, Button, Icon } from 'antd';\nimport { useIntl } from 'react-intl';\nimport InputFieldWidthLocalState from '../../../../../common/InputFieldWidthLocalState';\n\nfunction Experience({\n  fields,\n  changeValue,\n  inProcessText,\n  addText,\n  formName,\n  data,\n  addSubForm,\n  removeSubForm,\n  errors,\n  touched\n}) {\n  const {\n    messages\n  } = useIntl();\n  return __jsx(React.Fragment, null, data.map((dataItem, index) => __jsx(\"div\", {\n    key: `${dataItem.id}experience`\n  }, fields.map(({\n    title,\n    placeholder,\n    name\n  }, childeIndex) => __jsx(Col, {\n    xs: 24,\n    key: `${`${dataItem.id}experience`}${childeIndex}`\n  }, __jsx(Form.Item, {\n    label: title,\n    validateStatus: touched && touched[index] && touched[index][name] && errors && errors[index] && errors[index][name] && 'error',\n    help: touched && touched[index] && touched[index][name] && errors && errors[index] && errors[index][name]\n  }, __jsx(InputFieldWidthLocalState, {\n    placeholder: placeholder,\n    name: name,\n    onBlur: ({\n      target: {\n        value\n      }\n    }) => changeValue(value, formName, name, index),\n    defaultValue: dataItem[name]\n  })))), __jsx(Col, {\n    xs: 24,\n    md: 12\n  }, __jsx(Form.Item, {\n    label: messages['local.startpoint'],\n    validateStatus: touched && touched[index] && touched[index].startDate && errors && errors[index] && errors[index].startDate && 'error',\n    help: touched && touched[index] && touched[index].startDate && errors && errors[index] && errors[index].startDate\n  }, __jsx(DatePicker, {\n    value: dataItem.startDate || undefined,\n    onChange: value => changeValue(value, formName, 'startDate', index)\n  }))), __jsx(Col, {\n    xs: 24,\n    md: 12\n  }, !dataItem.stillInProcess ? __jsx(Form.Item, {\n    label: messages['local.endpoint'],\n    validateStatus: touched && touched[index] && touched[index].endDate && errors && errors[index] && errors[index].endDate && 'error',\n    help: touched && touched[index] && touched[index].endDate && errors && errors[index] && errors[index].endDate\n  }, __jsx(DatePicker, {\n    onChange: value => changeValue(value, formName, 'endDate', index),\n    value: dataItem.endDate || undefined\n  })) : null), __jsx(Col, {\n    xs: 24\n  }, __jsx(Form.Item, null, __jsx(Checkbox, {\n    onChange: ({\n      target: {\n        checked\n      }\n    }) => changeValue(checked, formName, 'stillInProcess', index),\n    checked: !!dataItem.stillInProcess\n  }, inProcessText)), index > 0 && __jsx(\"button\", {\n    className: \"removeButton\",\n    type: \"button\",\n    onClick: () => removeSubForm(formName, index)\n  }, \"remove\")))), __jsx(Col, {\n    xs: 24\n  }, __jsx(Form.Item, null, __jsx(Button, {\n    type: \"dashed\",\n    onClick: () => addSubForm(formName)\n  }, __jsx(Icon, {\n    type: \"plus\"\n  }), ' ', addText))));\n}\n\nexport default Experience;","map":null,"metadata":{},"sourceType":"module"}