{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Col, InputNumber, Slider } from 'antd';\nimport { useIntl } from 'react-intl';\nimport keys from '../../constants/keys';\n\nfunction sortNumber(a, b) {\n  return a - b;\n}\n\nfunction closerTimer() {\n  let timerId = null;\n  return (callback, time) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(callback, time);\n  };\n}\n\nfunction PriceSlider({\n  handleChange,\n  price,\n  mod\n}) {\n  const {\n    messages\n  } = useIntl();\n  const {\n    0: inputsValue,\n    1: setInputsValue\n  } = useState(price);\n  const timerFunction = useMemo(() => closerTimer(), []); // useEffect(() => {\n  //   if (price[0] === inputsValue[0] && price[1] === inputsValue[1]) return;\n  //   setInputsValue([...inputsValue].sort(sortNumber));\n  // }, [price]);\n\n  const timerChange = useCallback(values => {\n    const undefinedIndex = values.findIndex(val => val === '');\n    if (undefinedIndex !== -1) values[undefinedIndex] = undefined;\n    setInputsValue(values);\n    timerFunction(() => {\n      handleChange(values);\n    }, 500);\n  }, []);\n\n  const handleChangeSlider = values => {\n    const cloneValues = [...values];\n\n    if (!cloneValues[0] || !cloneValues[1]) {\n      // eslint-disable-next-line prefer-destructuring\n      cloneValues[0] ? cloneValues[1] = cloneValues[0] : cloneValues[0] = cloneValues[1];\n    }\n\n    timerChange(values);\n  };\n\n  const sortValues = () => {\n    if (inputsValue[0] && inputsValue[1]) {\n      setInputsValue([...inputsValue].sort(sortNumber));\n    }\n  };\n\n  const numberInputs = () => __jsx(React.Fragment, null, __jsx(InputNumber, {\n    min: 0,\n    max: keys.DEFAULT_PRICE[1],\n    value: inputsValue[0],\n    onChange: value => {\n      timerChange([value, inputsValue[1]]);\n    },\n    onBlur: sortValues,\n    placeholder: messages['local.min-price']\n  }), __jsx(\"span\", {\n    className: \"line\"\n  }), __jsx(InputNumber, {\n    min: 1,\n    max: keys.DEFAULT_PRICE[1],\n    value: inputsValue[1],\n    onChange: value => {\n      timerChange([inputsValue[0], value]);\n    },\n    onBlur: sortValues,\n    placeholder: messages['local.max-price']\n  }));\n\n  const slider = () => __jsx(React.Fragment, null, __jsx(Slider, {\n    range: true,\n    onChange: values => {\n      if (!values[0]) {\n        values[0] = inputsValue[0] || inputsValue[1] || values[1];\n      } else if (!values[1]) {\n        values[1] = inputsValue[1] || inputsValue[0] || values[0];\n      }\n\n      handleChangeSlider(values);\n    },\n    defaultValue: [],\n    value: [...(inputsValue[0] || inputsValue[1] ? [Number.isInteger(inputsValue[0]) ? inputsValue[0] : inputsValue[1], inputsValue[1] || inputsValue[0]] : [])].sort(sortNumber),\n    max: keys.DEFAULT_PRICE[1]\n  }));\n\n  switch (mod) {\n    case 'Home':\n      return __jsx(React.Fragment, null, __jsx(Col, {\n        xs: 24,\n        sm: 24,\n        md: 12,\n        lg: 6,\n        xxl: 5,\n        className: \"choose_price clearfix\"\n      }, __jsx(\"h3\", null, messages['local.specify_price']), __jsx(\"div\", {\n        className: \"price_slider\"\n      }, __jsx(Col, null, numberInputs()), __jsx(Col, null, slider()))), __jsx(Col, {\n        xs: 24,\n        className: \"choose_price_mobile\"\n      }, __jsx(Col, null, numberInputs()), __jsx(Col, null, slider())));\n\n    default:\n      return __jsx(\"div\", {\n        className: \"price_slider\"\n      }, __jsx(Col, null, numberInputs()), __jsx(Col, null, slider()));\n  }\n}\n\nexport default PriceSlider;","map":null,"metadata":{},"sourceType":"module"}