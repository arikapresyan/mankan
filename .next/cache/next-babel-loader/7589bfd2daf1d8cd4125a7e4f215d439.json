{"ast":null,"code":"import { all, put, call, select, takeEvery } from 'redux-saga/effects';\nimport Axios from '../services/Axios';\nimport { getViewedProducts, getViewedProductsError, getViewedProductsSuccess, setViewedProducts } from './action';\nimport { getLocalStorageObj, setLocalStorageObj } from '../../constants/utils';\nimport { selectLang, selectAuthorized } from '../user/reducer';\n\nconst getProductsByIds = async ({\n  lang,\n  ids\n}) => {\n  const {\n    data: {\n      result\n    }\n  } = await Axios.request({\n    url: '/api/product/byIds',\n    data: {\n      lang,\n      ids\n    },\n    method: 'post'\n  });\n  const newIds = ids.filter(id => result.find(({\n    id: prodId\n  }) => prodId === id));\n  const r = [];\n  result.forEach(a => {\n    r[newIds.indexOf(a.id)] = a;\n  });\n  return r.reverse();\n};\n\nfunction* workGetViewedProducts(action) {\n  const {\n    payload: {\n      limit\n    }\n  } = action;\n\n  try {\n    let viewedProductIds = getLocalStorageObj('viewed') || [];\n\n    if (!limit && viewedProductIds.length > 6) {\n      viewedProductIds = viewedProductIds.splice(viewedProductIds.length - 6, 6);\n    } else if (limit && viewedProductIds.length > limit) {\n      viewedProductIds = viewedProductIds.splice(viewedProductIds.length - limit, limit);\n    }\n\n    const lang = yield select(selectLang);\n    const res = yield call(getProductsByIds, {\n      ids: viewedProductIds,\n      lang\n    });\n    yield put(getViewedProductsSuccess({\n      data: res\n    }));\n  } catch (error) {\n    yield put(getViewedProductsError());\n  }\n}\n\nfunction* watchGetViewedProducts() {\n  yield takeEvery(getViewedProducts, workGetViewedProducts);\n}\n\nfunction* workSetViewedProducts({\n  payload: {\n    id\n  }\n}) {\n  const authorizedUser = yield select(selectAuthorized);\n\n  try {\n    if (authorizedUser) {// send api to watched products\n    }\n\n    const lastViewed = getLocalStorageObj('viewed') || [];\n\n    if (lastViewed.indexOf(id) === -1) {\n      lastViewed.push(id);\n      setLocalStorageObj('viewed', lastViewed);\n    }\n  } catch (error) {\n    console.log('error', error);\n  }\n}\n\nfunction* watchSetViewedProducts() {\n  yield takeEvery(setViewedProducts, workSetViewedProducts);\n}\n\nexport default function* () {\n  yield all([watchGetViewedProducts(), watchSetViewedProducts()]);\n}","map":null,"metadata":{},"sourceType":"module"}