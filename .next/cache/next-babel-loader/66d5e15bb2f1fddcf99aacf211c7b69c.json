{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeLatest, put, select, takeEvery } from '@redux-saga/core/effects';\nimport Router from 'next/router';\nimport { catalogFilterChange, catalogFilterChangeSuccess, catalogFilterSetValues, catalogMainSearch, catalogSetFilters, resetFilterView } from './action';\nimport { catalogGet } from '../catalog/action';\nimport { getCatalogFilterByName, selectCatalogFilters } from './reducer';\n\nfunction* workCatalogFilterChange({\n  payload: {\n    name,\n    value\n  }\n}) {\n  try {\n    if (name === 'classification' && (value === null || value === void 0 ? void 0 : value[0]) === 'all') {\n      yield put(resetFilterView());\n    } else {\n      const classificationAll = yield select(getCatalogFilterByName('classification'));\n\n      if (classificationAll[0] === 'all') {\n        yield put(catalogFilterChangeSuccess({\n          name: 'classification',\n          value: []\n        }));\n      }\n    }\n\n    yield put(catalogFilterChangeSuccess({\n      name,\n      value\n    }));\n    yield put(catalogGet({\n      name,\n      value\n    }));\n  } catch (error) {}\n}\n\nfunction* watchCatalogFilterChange() {\n  yield takeLatest(catalogFilterChange, workCatalogFilterChange);\n}\n\nfunction* workCatalogFilterSetValues({\n  payload\n}) {\n  try {\n    var _payload$classificati;\n\n    const all = payload === null || payload === void 0 ? void 0 : (_payload$classificati = payload.classification) === null || _payload$classificati === void 0 ? void 0 : _payload$classificati[0];\n\n    if (all) {\n      yield put(resetFilterView({\n        exception: 'classification'\n      }));\n    } else {\n      const classificationAll = yield select(getCatalogFilterByName('classification'));\n\n      if (classificationAll[0] === 'all') {\n        yield put(catalogFilterChangeSuccess({\n          name: 'classification',\n          value: []\n        }));\n      }\n    }\n  } catch (e) {// todo handle\n  }\n}\n\nfunction* watchCatalogFilterSetValues() {\n  yield takeEvery(catalogFilterSetValues, workCatalogFilterSetValues);\n}\n\nfunction* watchCatalogMainSearch() {\n  yield takeLatest(catalogMainSearch, function* workCatalogMainSearch({\n    payload: {\n      searchWord\n    }\n  }) {\n    try {\n      // todo reset catalog filters , set catalog search  , go to catalog page\n      const filters = yield select(selectCatalogFilters);\n      yield put(catalogSetFilters({\n        filters: _objectSpread(_objectSpread({}, filters), {}, {\n          searchWord\n        })\n      }));\n      Router.push('/catalog');\n    } catch (e) {\n      if (false) {\n        console.log(e);\n      }\n    }\n  });\n}\n\nexport { watchCatalogFilterChange, watchCatalogFilterSetValues, watchCatalogMainSearch };","map":null,"metadata":{},"sourceType":"module"}