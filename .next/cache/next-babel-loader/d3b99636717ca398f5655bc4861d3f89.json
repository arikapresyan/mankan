{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport { Input, Spin } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { selectSearchData, selectSearchDataLoading } from '../../store/search/reducer';\nimport useOnClickOutside from '../../hooks/useOnOutClick';\nimport { searchProductReset } from '../../store/search/action';\nvar Search = Input.Search;\n\nfunction SearchComponent(_ref) {\n  var placeholder = _ref.placeholder,\n      className = _ref.className,\n      onSearch = _ref.onSearch,\n      style = _ref.style,\n      enterButton = _ref.enterButton;\n  var dispatch = useDispatch();\n\n  var resetSearch = function resetSearch() {\n    return dispatch(searchProductReset());\n  };\n\n  var data = useSelector(selectSearchData);\n  var loading = useSelector(selectSearchDataLoading);\n\n  var _useState = useState(false),\n      focused = _useState[0],\n      setFocused = _useState[1];\n\n  var ref = useRef(null);\n\n  var handleSearch = function handleSearch(value) {\n    return onSearch({\n      searchWord: value\n    });\n  };\n\n  var handleFocus = function handleFocus(_ref2) {\n    var value = _ref2.target.value;\n    resetSearch();\n\n    if (value) {\n      handleSearch(value);\n    }\n\n    setFocused(true);\n  };\n\n  var handleBlur = function handleBlur() {\n    setFocused(false);\n  };\n\n  useOnClickOutside(ref, function () {\n    setFocused(false);\n  });\n  return __jsx(\"div\", {\n    className: \"myHeaderSearch\",\n    style: {\n      display: 'inline-block',\n      position: 'relative',\n      zIndex: '9'\n    },\n    ref: ref\n  }, __jsx(Input.Group, null, __jsx(Search, {\n    enterButton: enterButton,\n    className: className,\n    placeholder: placeholder,\n    onSearch: handleSearch,\n    onFocus: handleFocus,\n    style: style\n  })), __jsx(\"div\", {\n    style: {\n      maxHeight: '300px',\n      overflow: 'auto',\n      background: '#fff',\n      padding: '5px 10px'\n    }\n  }, loading && __jsx(Spin, null), focused && (data || []).map(function (item) {\n    return __jsx(\"div\", {\n      key: \"search\".concat(item.id)\n    }, __jsx(Link, {\n      href: \"/product/[id]\",\n      as: \"/product/\".concat(item.id)\n    }, __jsx(\"a\", {\n      onClick: handleBlur\n    }, item.langs[0].name)));\n  })));\n}\n\nSearchComponent.defaultProps = {\n  enterButton: undefined,\n  style: {}\n};\nexport default SearchComponent;","map":null,"metadata":{},"sourceType":"module"}