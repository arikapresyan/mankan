{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { takeEvery, call, put, select, all } from '@redux-saga/core/effects';\nimport { wishlistGet, wishlistSet, wishlistChangeItem, wishlistChangeItemSuccess, wishlistItemLoading, wishlistPopulate, wishlistPopulateSuccess, wishlistPopulateLoading, wishlistPopulateError, wishlistError } from './action';\nimport { selectAuthorized, selectUser, selectLang } from '../user/reducer';\nimport { setLocalStorageObj, getLocalStorageObj } from '../../constants/utils';\nimport { selectWishlistIds } from './reducer';\nimport Axios from '../services/Axios';\n\nfunction getProductsByIdsRequest({\n  ids,\n  lang\n}) {\n  return Axios.request({\n    url: '/api/product/byIds',\n    data: {\n      ids,\n      lang\n    },\n    method: 'post'\n  });\n}\n\nfunction* changeWishlistRequest(productIds) {\n  yield call(Axios.request, {\n    method: 'post',\n    url: '/api/user/addWish/byIds',\n    data: {\n      type: 'wish',\n      productIds\n    }\n  });\n}\n\nfunction* workWishlistGet() {\n  // get products by ids\n  try {\n    const lang = yield select(selectLang); // get from local storage\n\n    let productIds = getLocalStorageObj('products').wishlistIds;\n    const ids = Object.keys(productIds);\n\n    if (!ids.length) {\n      yield put(wishlistSet({\n        products: [],\n        productIds: {}\n      }));\n      return;\n    }\n\n    const {\n      data: {\n        result\n      }\n    } = yield call(getProductsByIdsRequest, {\n      ids,\n      lang\n    });\n\n    if (result.length !== ids.length) {\n      const isAuth = yield select(selectAuthorized);\n      productIds = {};\n      result.forEach(({\n        id\n      }) => {\n        productIds[id] = true;\n      });\n      setLocalStorageObj('products', {\n        wishlistIds: productIds\n      });\n\n      if (isAuth) {\n        yield call(changeWishlistRequest, Object.keys(productIds));\n      }\n    }\n\n    yield put(wishlistSet({\n      products: result,\n      productIds\n    }));\n  } catch (error) {\n    yield put(wishlistError());\n  }\n}\n\nfunction* workWishlistPopulate() {\n  try {\n    yield put(wishlistPopulateLoading());\n    const userWishListArray = (_objectSpread({}, yield select(selectUser)).wishList || []).map(({\n      productId\n    }) => productId);\n    const userWishlistObj = {};\n    userWishListArray.forEach(i => {\n      userWishlistObj[i] = true;\n    });\n    const wishlistIds = userWishListArray.length && userWishlistObj || getLocalStorageObj('products') && getLocalStorageObj('products').wishlistIds || {};\n    yield put(wishlistPopulateSuccess({\n      wishlistIds\n    }));\n    setLocalStorageObj('products', {\n      wishlistIds\n    });\n  } catch (error) {\n    yield put(wishlistPopulateError());\n  }\n}\n\nfunction* watchWishlistPopulate() {\n  yield takeEvery(wishlistPopulate, workWishlistPopulate);\n}\n\nfunction setToWishlistRequest(productId) {\n  return Axios.request({\n    method: 'post',\n    url: '/api/user/addWish',\n    data: {\n      productId,\n      type: 'wish'\n    }\n  });\n}\n\nfunction removeFromWishlistRequest(productId) {\n  return Axios.request({\n    method: 'delete',\n    url: '/api/user/removeWish',\n    data: {\n      productId,\n      type: 'wish'\n    }\n  });\n}\n\nfunction* workWishlistChangeItem({\n  payload: {\n    productId\n  }\n}) {\n  const authorizedUser = yield select(selectAuthorized);\n  yield put(wishlistItemLoading({\n    id: productId\n  }));\n\n  try {\n    const wishlistIds = yield select(selectWishlistIds);\n    const inWishlist = !!wishlistIds[productId];\n\n    if (authorizedUser) {\n      // axios add to send to server to add user wishlistIds\n      if (inWishlist) {\n        yield call(removeFromWishlistRequest, productId);\n      } else {\n        // add to wishlistIds\n        yield call(setToWishlistRequest, productId); // remove from wishlistIds\n      }\n    }\n\n    wishlistIds[productId] = inWishlist ? null : productId;\n\n    if (inWishlist) {\n      delete wishlistIds[productId];\n    } else wishlistIds[productId] = true;\n\n    yield put(wishlistChangeItemSuccess({\n      wishlistIds: _objectSpread({}, wishlistIds),\n      id: productId\n    }));\n    setLocalStorageObj('products', {\n      wishlistIds\n    });\n  } catch (error) {}\n}\n\nfunction* watchWishlistChangeItem() {\n  yield takeEvery(wishlistChangeItem, workWishlistChangeItem);\n}\n\nfunction* watchWishlistGet() {\n  yield takeEvery(wishlistGet, workWishlistGet);\n}\n\nexport default function* () {\n  yield all([watchWishlistGet(), watchWishlistChangeItem(), watchWishlistPopulate()]);\n}","map":null,"metadata":{},"sourceType":"module"}