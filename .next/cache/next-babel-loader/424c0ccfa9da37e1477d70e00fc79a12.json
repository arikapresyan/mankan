{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Button, Form, Input, Checkbox, Modal } from 'antd';\nimport { connect } from 'react-redux';\nimport { registration } from '../../../store/user/action';\nimport { hideAll } from '../../../store/userEventListeners/action';\nimport useRegistration from './useRegistration';\n\nfunction RegistrationModal({\n  visible,\n  handleHideModal,\n  registrationAction,\n  hideAllAction,\n  userAuthorisationLoading,\n  authSuccess,\n  errorText\n}) {\n  const {\n    formik,\n    messages,\n    formatMessage\n  } = useRegistration({\n    registrationAction,\n    hideAllAction,\n    authSuccess,\n    errorText\n  });\n  const {\n    values,\n    touched,\n    errors,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  } = formik;\n  return __jsx(Modal, {\n    visible: visible,\n    destroyOnClose: true,\n    onCancel: handleHideModal,\n    footer: null,\n    className: \"registration_modal\"\n  }, __jsx(\"h2\", null, messages['local.registration']), __jsx(Form, {\n    onSubmit: handleSubmit\n  }, errors.globalError && __jsx(\"p\", {\n    style: {\n      color: '#C40A04'\n    }\n  }, errors.globalError), __jsx(Form.Item, {\n    validateStatus: errors.name && touched.name && 'error',\n    help: touched.name && errors.name\n  }, __jsx(Input, {\n    placeholder: `${messages['local.name']} *`,\n    name: \"name\",\n    value: values.name,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(Form.Item, {\n    validateStatus: errors.surname && touched.surname && 'error',\n    help: touched.surname && errors.surname\n  }, __jsx(Input, {\n    placeholder: `${messages['local.last_name']} *`,\n    value: values.surname,\n    name: \"surname\",\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(Form.Item, {\n    validateStatus: errors.email && touched.email && 'error',\n    help: touched.email && errors.email\n  }, __jsx(Input, {\n    placeholder: `${messages['local.email']} *`,\n    value: values.email,\n    name: \"email\",\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(Form.Item, {\n    validateStatus: errors.phone && touched.phone && 'error',\n    help: touched.phone && errors.phone\n  }, __jsx(Input, {\n    placeholder: `${messages['local.tel']} *`,\n    name: \"phone\",\n    value: values.phone,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(Form.Item, {\n    validateStatus: errors.password && touched.password && 'error',\n    help: touched.password && errors.password\n  }, __jsx(Input, {\n    type: \"password\",\n    placeholder: `${messages['local.password']} *`,\n    name: \"password\",\n    value: values.password,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(Form.Item, {\n    validateStatus: errors.repeatPassword && touched.repeatPassword && 'error',\n    help: touched.repeatPassword && errors.repeatPassword\n  }, __jsx(Input, {\n    type: \"password\",\n    placeholder: messages['local.repeat_password'],\n    name: \"repeatPassword\",\n    value: values.repeatPassword,\n    onChange: handleChange,\n    onBlur: handleBlur\n  })), __jsx(Form.Item, {\n    validateStatus: errors.agreeTerms && touched.agreeTerms && 'error',\n    help: touched.agreeTerms && errors.agreeTerms\n  }, __jsx(Checkbox, {\n    className: \"terms\",\n    checked: +values.agreeTerms,\n    onChange: handleChange,\n    name: \"agreeTerms\"\n  }, formatMessage({\n    id: 'local.i_have_read_and_agree'\n  }, {\n    termsOfService: __jsx(\"a\", {\n      target: \"blank\",\n      href: \"/using-rules\"\n    }, messages['local.terms_of_service'])\n  }))), __jsx(Form.Item, null, __jsx(\"div\", {\n    className: \"registration_btn\"\n  }, __jsx(Button // disabled={userAuthorisationLoading}\n  , {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: userAuthorisationLoading\n  }, messages['local.login'])))));\n}\n\nfunction mapStateToProps({\n  user: {\n    loading: userAuthorisationLoading,\n    authSuccess,\n    errorText\n  }\n}) {\n  return {\n    userAuthorisationLoading,\n    authSuccess,\n    errorText\n  };\n}\n\nexport default connect(mapStateToProps, {\n  registrationAction: registration,\n  hideAllAction: hideAll\n})(RegistrationModal);","map":null,"metadata":{},"sourceType":"module"}