{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-unused-vars */\nimport { takeEvery, call, put, select, all } from '@redux-saga/core/effects';\nimport Axios from '../services/Axios';\nimport { getDataListByPagination, getDataListByPaginationError, getDataListByPaginationSuccess } from './action';\nimport { selectLang } from '../user/reducer';\nconst dataByName = {\n  buyProductList: {\n    url: '/api/user/orders/all',\n    method: 'post'\n  }\n};\n\nasync function getDataListByPaginationRequest({\n  name,\n  page,\n  lang\n}) {\n  const {\n    data: {\n      pages,\n      result: {\n        rows\n      }\n    }\n  } = await Axios.request(_objectSpread(_objectSpread({}, dataByName[name]), {}, {\n    data: {\n      page,\n      offset: 12 * (page - 1),\n      limit: 12,\n      lang\n    }\n  }));\n  return {\n    pages,\n    data: rows\n  };\n}\n\nfunction* workGetDataListByPagination({\n  payload: {\n    name,\n    page\n  }\n}) {\n  try {\n    const lang = yield select(selectLang);\n    const res = yield call(getDataListByPaginationRequest, {\n      name,\n      page: page || 1,\n      lang\n    });\n    yield put(getDataListByPaginationSuccess(_objectSpread(_objectSpread({}, res), {}, {\n      name,\n      page\n    })));\n  } catch (error) {\n    yield put(getDataListByPaginationError({\n      name\n    }));\n  }\n}\n\nfunction* watchGetDataListByPagination() {\n  yield takeEvery(getDataListByPagination, workGetDataListByPagination);\n}\n\nexport default function* () {\n  yield all([watchGetDataListByPagination()]);\n}","map":null,"metadata":{},"sourceType":"module"}