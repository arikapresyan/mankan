{"ast":null,"code":"var _jsxFileName = \"/var/www/mankan-front/components/modals/callback-modal/CallbackModal.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport Button from 'antd/lib/button';\nimport Form from 'antd/lib/form';\nimport Input from 'antd/lib/input';\nimport Modal from 'antd/lib/modal';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport { connect } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport userAPI from '../../../API_Paths/userAPI';\nimport { APISend } from '../../../store/global-APIS/action';\nimport { hideAll } from '../../../store/userEventListeners/action';\nimport { getFeedbackSchema } from '../../../utils/validationSchemas';\nconst {\n  TextArea\n} = Input;\n\nfunction ForgotPasswordModal(props) {\n  const {\n    messages\n  } = useIntl();\n  const {\n    visible,\n    handleHideModal,\n    APISendAction,\n    globalAPIS,\n    hideAllAction\n  } = props;\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const validationSchema = useMemo(() => getFeedbackSchema(messages), [messages]);\n  useEffect(() => {\n    if (globalAPIS.hasError) {\n      setLoading(false);\n    } else if (globalAPIS.success) {\n      hideAllAction();\n    }\n  }, [globalAPIS]);\n  const resTextsForGlobal = useMemo(() => ({\n    errorText: messages['local.errorText'],\n    successText: messages['local.successText'],\n    loadingText: messages['local.loadingText']\n  }), [messages]);\n  const formik = useFormik({\n    initialValues: {\n      phone: '',\n      email: '',\n      fullName: '',\n      message: ''\n    },\n    validationSchema,\n    onSubmit: values => {\n      setLoading(true);\n      APISendAction(_objectSpread({\n        method: 'post',\n        url: userAPI.feedback,\n        data: {\n          userEmail: values.email,\n          firstLastNames: values.fullName,\n          phone: values.phone,\n          description: values.message\n        }\n      }, resTextsForGlobal));\n    }\n  });\n  const {\n    errors,\n    values,\n    touched,\n    handleSubmit,\n    handleChange,\n    handleBlur\n  } = formik;\n  return __jsx(Modal, {\n    destroyOnClose: true,\n    title: messages['local.feedback'],\n    visible: visible,\n    onCancel: handleHideModal,\n    footer: null,\n    className: \"callback_modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"phone\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    href: \"tel:+37499530311\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, `${messages['local.tel']}:`), \"(+374) 99 530 311\")), __jsx(\"div\", {\n    className: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    href: \"mailto:contact@mankan.am\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, `${messages['local.email']}:`), \"contact@mankan.am\")), __jsx(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, __jsx(Form.Item, {\n    validateStatus: errors.fullName && touched.fullName && 'error',\n    help: touched.fullName && errors.fullName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    placeholder: messages['local.name_surname'],\n    name: \"fullName\",\n    value: values.fullName,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    validateStatus: errors.email && touched.email && 'error',\n    help: touched.email && errors.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    placeholder: messages['local.email'],\n    name: \"email\",\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    validateStatus: errors.phone && touched.phone && 'error',\n    help: touched.phone && errors.phone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    placeholder: messages['local.tel'],\n    name: \"phone\",\n    value: values.phone,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    validateStatus: errors.message && touched.message && 'error',\n    help: touched.message && errors.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, __jsx(TextArea, {\n    placeholder: messages['local.message'],\n    name: \"message\",\n    value: values.message,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    autoSize: {\n      minRows: 5,\n      maxRows: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"send_btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    disabled: loading,\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, messages['local.send'])))));\n}\n\nForgotPasswordModal.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  handleHideModal: PropTypes.func.isRequired,\n  APISendAction: PropTypes.func,\n  globalAPIS: PropTypes.object,\n  hideAllAction: PropTypes.func\n};\n\nfunction mapStateToProps({\n  globalAPIS\n}) {\n  return {\n    globalAPIS\n  };\n}\n\nexport default connect(mapStateToProps, {\n  APISendAction: APISend,\n  hideAllAction: hideAll\n})(ForgotPasswordModal);","map":{"version":3,"sources":["/var/www/mankan-front/components/modals/callback-modal/CallbackModal.js"],"names":["React","useState","useEffect","useMemo","Button","Form","Input","Modal","PropTypes","useFormik","connect","useIntl","userAPI","APISend","hideAll","getFeedbackSchema","TextArea","ForgotPasswordModal","props","messages","visible","handleHideModal","APISendAction","globalAPIS","hideAllAction","loading","setLoading","validationSchema","hasError","success","resTextsForGlobal","errorText","successText","loadingText","formik","initialValues","phone","email","fullName","message","onSubmit","values","method","url","feedback","data","userEmail","firstLastNames","description","errors","touched","handleSubmit","handleChange","handleBlur","minRows","maxRows","propTypes","bool","isRequired","func","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\n\r\n\r\nimport Button from 'antd/lib/button';\r\nimport Form from 'antd/lib/form';\r\nimport Input from 'antd/lib/input';\r\nimport Modal from 'antd/lib/modal';\r\nimport PropTypes from 'prop-types';\r\nimport { useFormik } from 'formik';\r\nimport { connect } from 'react-redux';\r\nimport { useIntl } from 'react-intl';\r\nimport userAPI from '../../../API_Paths/userAPI';\r\nimport { APISend } from '../../../store/global-APIS/action';\r\nimport { hideAll } from '../../../store/userEventListeners/action';\r\nimport { getFeedbackSchema } from '../../../utils/validationSchemas';\r\n\r\n\r\nconst { TextArea } = Input;\r\nfunction ForgotPasswordModal(props) {\r\n  const { messages } = useIntl();\r\n  const {\r\n    visible,\r\n    handleHideModal,\r\n    APISendAction,\r\n    globalAPIS,\r\n    hideAllAction,\r\n  } = props;\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const validationSchema = useMemo(() => getFeedbackSchema(messages), [messages]);\r\n\r\n  useEffect(() => {\r\n    if (globalAPIS.hasError) {\r\n      setLoading(false);\r\n    } else if (globalAPIS.success) {\r\n      hideAllAction();\r\n    }\r\n  }, [globalAPIS]);\r\n\r\n  const resTextsForGlobal = useMemo(() => ({\r\n    errorText: messages['local.errorText'],\r\n    successText: messages['local.successText'],\r\n    loadingText: messages['local.loadingText'],\r\n  }), [messages]);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      phone: '',\r\n      email: '',\r\n      fullName: '',\r\n      message: '',\r\n    },\r\n    validationSchema,\r\n    onSubmit: (values) => {\r\n      setLoading(true);\r\n      APISendAction({\r\n        method: 'post',\r\n        url: userAPI.feedback,\r\n        data: {\r\n          userEmail: values.email,\r\n          firstLastNames: values.fullName,\r\n          phone: values.phone,\r\n          description: values.message,\r\n        },\r\n        ...resTextsForGlobal,\r\n      });\r\n    },\r\n  });\r\n\r\n  const {\r\n    errors, values, touched,\r\n    handleSubmit, handleChange, handleBlur,\r\n  } = formik;\r\n\r\n  return (\r\n    <Modal\r\n      destroyOnClose\r\n      title={messages['local.feedback']}\r\n      visible={visible}\r\n      onCancel={handleHideModal}\r\n      footer={null}\r\n      className=\"callback_modal\"\r\n    >\r\n      <div className=\"phone\">\r\n        <a href=\"tel:+37499530311\">\r\n          <span>\r\n            {`${messages['local.tel']}:`}\r\n          </span>\r\n          (+374) 99 530 311\r\n        </a>\r\n      </div>\r\n      <div className=\"email\">\r\n        <a href=\"mailto:contact@mankan.am\">\r\n          <span>\r\n            {`${messages['local.email']}:`}\r\n          </span>\r\n          contact@mankan.am\r\n        </a>\r\n      </div>\r\n      <Form\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <Form.Item\r\n          validateStatus={errors.fullName && touched.fullName && 'error'}\r\n          help={touched.fullName && errors.fullName}\r\n        >\r\n          <Input\r\n            placeholder={messages['local.name_surname']}\r\n            name=\"fullName\"\r\n            value={values.fullName}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          validateStatus={errors.email && touched.email && 'error'}\r\n          help={touched.email && errors.email}\r\n        >\r\n          <Input\r\n            placeholder={messages['local.email']}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          validateStatus={errors.phone && touched.phone && 'error'}\r\n          help={touched.phone && errors.phone}\r\n        >\r\n          <Input\r\n            placeholder={messages['local.tel']}\r\n            name=\"phone\"\r\n            value={values.phone}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          validateStatus={errors.message && touched.message && 'error'}\r\n          help={touched.message && errors.message}\r\n        >\r\n          <TextArea\r\n            placeholder={messages['local.message']}\r\n            name=\"message\"\r\n            value={values.message}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            autoSize={{ minRows: 5, maxRows: 10 }}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <div className=\"send_btn\">\r\n            <Button disabled={loading} type=\"primary\" htmlType=\"submit\">\r\n              {messages['local.send']}\r\n            </Button>\r\n          </div>\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nForgotPasswordModal.propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  handleHideModal: PropTypes.func.isRequired,\r\n  APISendAction: PropTypes.func,\r\n  globalAPIS: PropTypes.object,\r\n  hideAllAction: PropTypes.func,\r\n};\r\n\r\nfunction mapStateToProps({ globalAPIS }) {\r\n  return { globalAPIS };\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  APISendAction: APISend,\r\n  hideAllAction: hideAll,\r\n})(ForgotPasswordModal);\r\n"]},"metadata":{},"sourceType":"module"}