{"ast":null,"code":"import { takeLatest, put, select, takeEvery } from '@redux-saga/core/effects';\nimport Router from 'next/router';\nimport { catalogFilterChange, catalogFilterChangeSuccess, catalogFilterSetValues, catalogMainSearch, catalogSetFilters, resetFilterView } from './action';\nimport { catalogGet } from '../catalog/action';\nimport { getCatalogFilterByName, selectCatalogFilters } from './reducer';\n\nfunction* workCatalogFilterChange({\n  payload: {\n    name,\n    value\n  }\n}) {\n  try {\n    if (name === 'classification' && (value === null || value === void 0 ? void 0 : value[0]) === 'all') {\n      yield put(resetFilterView());\n    } else {\n      const classificationAll = yield select(getCatalogFilterByName('classification'));\n\n      if (classificationAll[0] === 'all') {\n        yield put(catalogFilterChangeSuccess({\n          name: 'classification',\n          value: []\n        }));\n      }\n    }\n\n    yield put(catalogFilterChangeSuccess({\n      name,\n      value\n    }));\n    yield put(catalogGet({\n      name,\n      value\n    }));\n  } catch (error) {}\n}\n\nfunction* watchCatalogFilterChange() {\n  yield takeLatest(catalogFilterChange, workCatalogFilterChange);\n}\n\nfunction* workCatalogFilterSetValues({\n  payload\n}) {\n  try {\n    var _payload$classificati;\n\n    const all = payload === null || payload === void 0 ? void 0 : (_payload$classificati = payload.classification) === null || _payload$classificati === void 0 ? void 0 : _payload$classificati[0];\n\n    if (all) {\n      yield put(resetFilterView({\n        exception: 'classification'\n      }));\n    } else {\n      const classificationAll = yield select(getCatalogFilterByName('classification'));\n\n      if (classificationAll[0] === 'all') {\n        yield put(catalogFilterChangeSuccess({\n          name: 'classification',\n          value: []\n        }));\n      }\n    }\n  } catch (e) {// todo handle\n  }\n}\n\nfunction* watchCatalogFilterSetValues() {\n  yield takeEvery(catalogFilterSetValues, workCatalogFilterSetValues);\n}\n\nfunction* watchCatalogMainSearch() {\n  yield takeLatest(catalogMainSearch, function* workCatalogMainSearch({\n    payload: {\n      searchWord\n    }\n  }) {\n    try {\n      Router.push(`/catalog?searchWord=${searchWord}`);\n    } catch (e) {\n      if (true) {\n        yield;\n        console.log(e);\n      }\n    }\n  });\n}\n\nexport { watchCatalogFilterChange, watchCatalogFilterSetValues, watchCatalogMainSearch };","map":{"version":3,"sources":["/var/www/mankan-front/store/catalog-filter/saga.js"],"names":["takeLatest","put","select","takeEvery","Router","catalogFilterChange","catalogFilterChangeSuccess","catalogFilterSetValues","catalogMainSearch","catalogSetFilters","resetFilterView","catalogGet","getCatalogFilterByName","selectCatalogFilters","workCatalogFilterChange","payload","name","value","classificationAll","error","watchCatalogFilterChange","workCatalogFilterSetValues","all","classification","exception","e","watchCatalogFilterSetValues","watchCatalogMainSearch","workCatalogMainSearch","searchWord","push","console","log"],"mappings":"AACA,SACEA,UADF,EACcC,GADd,EACmBC,MADnB,EAC2BC,SAD3B,QAEO,0BAFP;AAKA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SACEC,mBADF,EAEEC,0BAFF,EAE8BC,sBAF9B,EAEsDC,iBAFtD,EAEyEC,iBAFzE,EAGEC,eAHF,QAIO,UAJP;AAKA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,sBAAT,EAAiCC,oBAAjC,QAA6D,WAA7D;;AAGA,UAAUC,uBAAV,CAAkC;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR;AAAX,CAAlC,EAAgE;AAC9D,MAAI;AACF,QAAID,IAAI,KAAK,gBAAT,IAA6B,CAAAC,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAG,CAAH,CAAL,MAAe,KAAhD,EAAuD;AACrD,YAAMhB,GAAG,CAACS,eAAe,EAAhB,CAAT;AACD,KAFD,MAEO;AACL,YAAMQ,iBAAiB,GAAG,MAAMhB,MAAM,CAACU,sBAAsB,CAAC,gBAAD,CAAvB,CAAtC;;AACA,UAAIM,iBAAiB,CAAC,CAAD,CAAjB,KAAyB,KAA7B,EAAoC;AAClC,cAAMjB,GAAG,CAACK,0BAA0B,CAAC;AAAEU,UAAAA,IAAI,EAAE,gBAAR;AAA0BC,UAAAA,KAAK,EAAE;AAAjC,SAAD,CAA3B,CAAT;AACD;AACF;;AACD,UAAMhB,GAAG,CAACK,0BAA0B,CAAC;AAAEU,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,CAA3B,CAAT;AACA,UAAMhB,GAAG,CAACU,UAAU,CAAC;AAAEK,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,CAAX,CAAT;AACD,GAXD,CAWE,OAAOE,KAAP,EAAc,CACf;AACF;;AAGD,UAAUC,wBAAV,GAAqC;AACnC,QAAMpB,UAAU,CAACK,mBAAD,EAAsBS,uBAAtB,CAAhB;AACD;;AAED,UAAUO,0BAAV,CAAqC;AAAEN,EAAAA;AAAF,CAArC,EAAkD;AAChD,MAAI;AAAA;;AACF,UAAMO,GAAG,GAAGP,OAAH,aAAGA,OAAH,gDAAGA,OAAO,CAAEQ,cAAZ,0DAAG,sBAA0B,CAA1B,CAAZ;;AAEA,QAAID,GAAJ,EAAS;AACP,YAAMrB,GAAG,CAACS,eAAe,CAAC;AAAEc,QAAAA,SAAS,EAAE;AAAb,OAAD,CAAhB,CAAT;AACD,KAFD,MAEO;AACL,YAAMN,iBAAiB,GAAG,MAAMhB,MAAM,CAACU,sBAAsB,CAAC,gBAAD,CAAvB,CAAtC;;AACA,UAAIM,iBAAiB,CAAC,CAAD,CAAjB,KAAyB,KAA7B,EAAoC;AAClC,cAAMjB,GAAG,CAACK,0BAA0B,CAAC;AAAEU,UAAAA,IAAI,EAAE,gBAAR;AAA0BC,UAAAA,KAAK,EAAE;AAAjC,SAAD,CAA3B,CAAT;AACD;AACF;AACF,GAXD,CAWE,OAAOQ,CAAP,EAAU,CACV;AACD;AACF;;AACD,UAAUC,2BAAV,GAAwC;AACtC,QAAMvB,SAAS,CAACI,sBAAD,EAAyBc,0BAAzB,CAAf;AACD;;AAED,UAAUM,sBAAV,GAAmC;AACjC,QAAM3B,UAAU,CAACQ,iBAAD,EAAoB,UAAUoB,qBAAV,CAAgC;AAAEb,IAAAA,OAAO,EAAE;AAAEc,MAAAA;AAAF;AAAX,GAAhC,EAA6D;AAC/F,QAAI;AACFzB,MAAAA,MAAM,CAAC0B,IAAP,CAAa,uBAAsBD,UAAW,EAA9C;AACD,KAFD,CAEE,OAAOJ,CAAP,EAAU;AACV,gBAA4C;AAC1C;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYP,CAAZ;AACD;AACF;AACF,GATe,CAAhB;AAUD;;AACD,SACEL,wBADF,EAEEM,2BAFF,EAGEC,sBAHF","sourcesContent":["\nimport {\n  takeLatest, put, select, takeEvery,\n} from '@redux-saga/core/effects';\n\n\nimport Router from 'next/router';\nimport {\n  catalogFilterChange,\n  catalogFilterChangeSuccess, catalogFilterSetValues, catalogMainSearch, catalogSetFilters,\n  resetFilterView,\n} from './action';\nimport { catalogGet } from '../catalog/action';\nimport { getCatalogFilterByName, selectCatalogFilters } from './reducer';\n\n\nfunction* workCatalogFilterChange({ payload: { name, value } }) {\n  try {\n    if (name === 'classification' && value?.[0] === 'all') {\n      yield put(resetFilterView());\n    } else {\n      const classificationAll = yield select(getCatalogFilterByName('classification'));\n      if (classificationAll[0] === 'all') {\n        yield put(catalogFilterChangeSuccess({ name: 'classification', value: [] }));\n      }\n    }\n    yield put(catalogFilterChangeSuccess({ name, value }));\n    yield put(catalogGet({ name, value }));\n  } catch (error) {\n  }\n}\n\n\nfunction* watchCatalogFilterChange() {\n  yield takeLatest(catalogFilterChange, workCatalogFilterChange);\n}\n\nfunction* workCatalogFilterSetValues({ payload }) {\n  try {\n    const all = payload?.classification?.[0];\n\n    if (all) {\n      yield put(resetFilterView({ exception: 'classification' }));\n    } else {\n      const classificationAll = yield select(getCatalogFilterByName('classification'));\n      if (classificationAll[0] === 'all') {\n        yield put(catalogFilterChangeSuccess({ name: 'classification', value: [] }));\n      }\n    }\n  } catch (e) {\n    // todo handle\n  }\n}\nfunction* watchCatalogFilterSetValues() {\n  yield takeEvery(catalogFilterSetValues, workCatalogFilterSetValues);\n}\n\nfunction* watchCatalogMainSearch() {\n  yield takeLatest(catalogMainSearch, function* workCatalogMainSearch({ payload: { searchWord } }) {\n    try {\n      Router.push(`/catalog?searchWord=${searchWord}`);\n    } catch (e) {\n      if (process.env.NODE_ENV === 'development') {\n        yield;\n        console.log(e);\n      }\n    }\n  });\n}\nexport {\n  watchCatalogFilterChange,\n  watchCatalogFilterSetValues,\n  watchCatalogMainSearch,\n};\n"]},"metadata":{},"sourceType":"module"}