{"version":3,"sources":["hooks/useTableInfo.js","pages/followers/components/FollowersTable.jsx","pages/followers/Followers.jsx"],"names":["useTableInfo","name","getData","resetData","searchResetAction","useEffect","changePage","useCallback","newPage","page","columns","title","dataIndex","render","_","data","Date","createdAt","toLocaleDateString","FollowersTable","dataSource","loading","pagination","defaultProps","connect","tables","list","isFetching","pages","getTableDataAction","getTableData","getTableDataResetAction","getTableDataReset","searchReset","pathname","FOLLOWERS","onChange","current","total"],"mappings":"2HAAA,6CAGe,SAASA,EAAaC,EAAMC,EAASC,EAAWC,GAgB7D,OAfAC,qBAAU,WAER,OADAH,EAAQ,CAAED,SACH,WACLE,EAAU,CAAEF,SACZG,OAED,CAACF,EAASD,EAAME,EAAWC,IASvB,CAAEE,WAPUC,uBACjB,SAACC,GACCN,EAAQ,CAAED,OAAMQ,KAAMD,MAExB,CAACN,EAASD,O,4FCXRS,EAAU,CACd,CACEC,MAAO,OACPC,UAAW,OACXC,OAAQ,SAACC,EAAGC,GAAJ,gBAAgB,IAAIC,KAAKD,EAAKE,WAAWC,mBAAmB,YAEtE,CACEP,MAAO,QACPC,UAAW,UAIf,SAASO,EAAT,GAAkD,IAAxBC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,QACpC,OACE,6BACE,kBAAC,IAAD,CACED,WAAYA,EACZC,QAASA,EACTX,QAASA,EACTY,YAAY,KAUpBH,EAAeI,aAAe,CAC5BH,WAAY,GACZC,SAAS,GAGIF,Q,gCCsBAK,uBAhBS,SAAC,GAAD,QACtBC,OADsB,MAQjB,CACLC,KATsB,EAEpBA,KAQFC,WAVsB,EAGpBA,WAQFC,MAXsB,EAIpBA,MAQFnB,KAZsB,EAKpBA,QAWoC,CACtCoB,mBAAoBC,IACpBC,wBAAyBC,IACzB5B,kBAAmB6B,KAHNT,EAlDf,YAQI,IAPFE,EAOC,EAPDA,KACAjB,EAMC,EANDA,KACAmB,EAKC,EALDA,MACAD,EAIC,EAJDA,WACAE,EAGC,EAHDA,mBACAE,EAEC,EAFDA,wBACA3B,EACC,EADDA,kBAEQE,EAAeN,YACrBkC,IAASC,UACTN,EACAE,EACA3B,GAJME,WAOR,OACE,6BACE,kBAAC,EAAD,CAAgBc,WAAYM,EAAML,QAASM,IAC3C,uBAAYS,SAAU9B,EAAY+B,QAAS5B,EAAM6B,MAAe,GAARV","file":"static/js/17.9b8b5be7.chunk.js","sourcesContent":["import { useEffect, useCallback } from 'react';\n\n\nexport default function useTableInfo(name, getData, resetData, searchResetAction) {\n  useEffect(() => {\n    getData({ name });\n    return () => {\n      resetData({ name });\n      searchResetAction();\n    };\n  }, [getData, name, resetData, searchResetAction]);\n\n  const changePage = useCallback(\n    (newPage) => {\n      getData({ name, page: newPage });\n    },\n    [getData, name],\n  );\n  // return func\n  return { changePage };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from '../../../components';\n\n\nconst columns = [\n  {\n    title: 'Date',\n    dataIndex: 'date',\n    render: (_, data) => `${new Date(data.createdAt).toLocaleDateString('en-US')}`,\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\n\nfunction FollowersTable({ dataSource, loading }) {\n  return (\n    <div>\n      <Table\n        dataSource={dataSource}\n        loading={loading}\n        columns={columns}\n        pagination={false}\n      />\n    </div>\n  );\n}\n\nFollowersTable.propTypes = {\n  dataSource: PropTypes.arrayOf(Array),\n  loading: PropTypes.bool,\n};\nFollowersTable.defaultProps = {\n  dataSource: [],\n  loading: false,\n};\n\nexport default FollowersTable;\n","import React from 'react';\nimport { Pagination } from 'antd';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport FollowersTable from './components/FollowersTable';\nimport pathname from '../../constants';\nimport { getTableData, getTableDataReset } from '../../store/tables/action';\nimport useTableInfo from '../../hooks/useTableInfo';\nimport { searchReset } from '../../store/search/action';\n\n\nfunction Followers({\n  list,\n  page,\n  pages,\n  isFetching,\n  getTableDataAction,\n  getTableDataResetAction,\n  searchResetAction,\n}) {\n  const { changePage } = useTableInfo(\n    pathname.FOLLOWERS,\n    getTableDataAction,\n    getTableDataResetAction,\n    searchResetAction,\n  );\n\n  return (\n    <div>\n      <FollowersTable dataSource={list} loading={isFetching} />\n      <Pagination onChange={changePage} current={page} total={pages * 10} />\n    </div>\n  );\n}\n\nFollowers.propTypes = {\n  list: PropTypes.arrayOf(Array).isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  pages: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  getTableDataAction: PropTypes.func.isRequired,\n  getTableDataResetAction: PropTypes.func.isRequired,\n  searchResetAction: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({\n  tables: {\n    list,\n    isFetching,\n    pages,\n    page,\n  },\n\n}) => ({\n  list,\n  isFetching,\n  pages,\n  page,\n});\n\n\nexport default connect(mapStateToProps, {\n  getTableDataAction: getTableData,\n  getTableDataResetAction: getTableDataReset,\n  searchResetAction: searchReset,\n})(Followers);\n"],"sourceRoot":""}