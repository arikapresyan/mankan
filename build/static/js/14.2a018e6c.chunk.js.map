{"version":3,"sources":["hooks/useTableInfo.js","pages/type/constants.js","pages/type/components/create-type-form/CreateTypeForm.jsx","pages/type/components/edit-type-form/EditTypeForm.jsx","pages/type/components/TypeComp.jsx","pages/type/Type.jsx"],"names":["useTableInfo","name","getData","resetData","searchResetAction","useEffect","changePage","useCallback","newPage","page","typeSchema","Yup","shape","arm","required","TabPane","CreateTypeForm","setShowCreateModal","dispatch","useDispatch","useFormik","initialValues","ru","eng","onSubmit","data","names","lang","values","createData","pathname","TYPE","validationSchema","errors","touched","handleChange","handleSubmit","defaultActiveKey","className","tab","key","Item","validateStatus","help","placeholder","type","onChange","value","htmlType","style","marginLeft","onClick","EditTypeForm","edit","setShowModal","editDataAction","id","ARM","RU","ENG","TypeComp","dataSource","loading","useState","showModal","checkedRows","setCheckedRows","selectedIds","setSelectedIds","showCreateModal","confirm","showDeleteConfirm","ids","content","length","okText","okType","cancelText","onOk","deleteData","rowSelection","selectedRowKeys","selectedRows","selected","map","row","getCheckboxProps","record","disabled","columns","title","dataIndex","render","_","langs","e","editFetchingAction","visible","destroyOnClose","footer","onCancel","pagination","afterClose","editFetchingResetAction","defaultProps","connect","tables","list","isFetching","pages","getTableDataAction","getTableData","getTableDataResetAction","getTableDataReset","editFetching","editFetchingReset","editData","searchReset","current","total"],"mappings":"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","file":"static/js/14.2a018e6c.chunk.js","sourcesContent":["import { useEffect, useCallback } from 'react';\n\n\nexport default function useTableInfo(name, getData, resetData, searchResetAction) {\n  useEffect(() => {\n    getData({ name });\n    return () => {\n      resetData({ name });\n      searchResetAction();\n    };\n  }, [getData, name, resetData, searchResetAction]);\n\n  const changePage = useCallback(\n    (newPage) => {\n      getData({ name, page: newPage });\n    },\n    [getData, name],\n  );\n  // return func\n  return { changePage };\n}\n","import * as Yup from 'yup';\n\nexport const typeSchema = Yup.object().shape({\n  arm: Yup.string().required('Armenian is required'),\n});\n","import React from 'react';\nimport {\n  Input, Button, Form, Tabs,\n} from 'antd';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createData } from '../../../../store/edit/action';\nimport pathname from '../../../../constants';\nimport { typeSchema } from '../../constants';\n\nconst { TabPane } = Tabs;\n\nfunction CreateTypeForm({ setShowCreateModal }) {\n  const dispatch = useDispatch();\n  const {\n    errors,\n    touched,\n    handleChange,\n    values,\n    handleSubmit,\n  } = useFormik({\n    initialValues: {\n      arm: '',\n      ru: '',\n      eng: '',\n    },\n    onSubmit: () => {\n      const data = {\n        names: [\n          {\n            lang: 'ARM',\n            name: values.arm,\n          }, {\n            lang: 'RU',\n            name: values.ru ,\n          }, {\n            lang: 'ENG',\n            name: values.eng ,\n          },\n        ],\n      };\n      dispatch(createData({ name: pathname.TYPE, data }));\n      setShowCreateModal(false);\n    },\n    validationSchema: typeSchema,\n  });\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Tabs defaultActiveKey=\"1\" className=\"modalTab\">\n        <TabPane tab=\"Arm /\" key=\"1\">\n          <Form.Item\n            validateStatus={touched.arm && errors.arm && 'error'}\n            help={touched.arm && errors.arm}\n          >\n            <Input\n              placeholder=\"arm\"\n              name=\"arm\"\n              type=\"text\"\n              onChange={handleChange}\n              value={values.arm}\n            />\n          </Form.Item>\n        </TabPane>\n        <TabPane tab=\"Ru /\" key=\"2\">\n          <Form.Item\n            validateStatus={touched.arm && errors.arm && 'error'}\n            help={touched.arm && errors.arm}\n          >\n            <Input\n              placeholder=\"ru\"\n              name=\"ru\"\n              type=\"text\"\n              onChange={handleChange}\n              value={values.ru}\n            />\n          </Form.Item>\n        </TabPane>\n        <TabPane tab=\"Eng\" key=\"3\">\n          <Form.Item\n            validateStatus={touched.arm && errors.arm && 'error'}\n            help={touched.arm && errors.arm}\n          >\n            <Input\n              placeholder=\"eng\"\n              name=\"eng\"\n              type=\"text\"\n              onChange={handleChange}\n              value={values.eng}\n            />\n          </Form.Item>\n        </TabPane>\n      </Tabs>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">Create</Button>\n        <Button style={{ marginLeft: '20px' }} onClick={() => setShowCreateModal(false)}>Cancel</Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nCreateTypeForm.propTypes = {\n  setShowCreateModal: PropTypes.func.isRequired,\n};\n\nexport default CreateTypeForm;\n","import React from 'react';\nimport {\n  Button, Form, Input, Tabs,\n} from 'antd';\nimport { useFormik } from 'formik';\nimport PropTypes from 'prop-types';\nimport pathname from '../../../../constants';\nimport { typeSchema } from '../../constants';\n\nconst { TabPane } = Tabs;\n\nfunction EditTypeForm({ edit, setShowModal }) {\n  const { editDataAction } = edit;\n  const {\n    id, ARM, RU, ENG,\n  } = edit.data;\n\n  const {\n    values, touched, errors, handleSubmit, handleChange,\n  } = useFormik({\n    initialValues: {\n      arm: ARM.name,\n      ru: RU.name,\n      eng: ENG.name,\n    },\n    onSubmit: () => {\n      const data = {\n        names: [\n          {\n            lang: 'ARM',\n            name: values.arm,\n          }, {\n            lang: 'RU',\n            name: values.ru || values.arm,\n          }, {\n            lang: 'ENG',\n            name: values.eng || values.arm,\n          },\n        ],\n      };\n      editDataAction({ name: pathname.TYPE, id, data });\n      setShowModal(false);\n    },\n    validationSchema: typeSchema,\n  });\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Tabs defaultActiveKey=\"1\" className=\"modalTab\">\n        <TabPane tab=\"Arm /\" key=\"1\">\n          <Form.Item\n            validateStatus={touched.arm && errors.arm && 'error'}\n            help={touched.arm && errors.arm}\n          >\n            <Input\n              placeholder=\"Name\"\n              name=\"arm\"\n              value={values.arm}\n              onChange={handleChange}\n            />\n          </Form.Item>\n        </TabPane>\n        <TabPane tab=\"Ru /\" key=\"2\">\n          <Form.Item\n            validateStatus={touched.arm && errors.arm && 'error'}\n            help={touched.arm && errors.arm}\n          >\n            <Input\n              placeholder=\"Name\"\n              name=\"ru\"\n              value={values.ru}\n              onChange={handleChange}\n            />\n          </Form.Item>\n        </TabPane>\n        <TabPane tab=\"Eng\" key=\"3\">\n          <Form.Item\n            validateStatus={touched.arm && errors.arm && 'error'}\n            help={touched.arm && errors.arm}\n          >\n            <Input\n              placeholder=\"Name\"\n              name=\"eng\"\n              value={values.eng}\n              onChange={handleChange}\n            />\n          </Form.Item>\n        </TabPane>\n      </Tabs>\n      <Form.Item>\n        <Button key=\"submit\" htmlType=\"submit\" type=\"primary\">\n          Save\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nEditTypeForm.propTypes = {\n  edit: PropTypes.objectOf(Object).isRequired,\n  setShowModal: PropTypes.func.isRequired,\n};\n\n\nexport default EditTypeForm;\n","import React, { useEffect, useState } from 'react';\nimport { Icon, Button, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Table } from '../../../components';\nimport CreateTypeForm from './create-type-form/CreateTypeForm';\nimport pathname from '../../../constants';\nimport EditTypeForm from './edit-type-form/EditTypeForm';\nimport { deleteData } from '../../../store/edit/action';\n\n\nfunction TypeComp({ dataSource, loading, edit }) {\n  const [showModal, setShowModal] = useState(false);\n  const [checkedRows, setCheckedRows] = useState([]);\n  const [selectedIds, setSelectedIds] = useState([]);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const dispatch = useDispatch();\n  const { confirm } = Modal;\n\n  useEffect(() => {\n    setSelectedIds([]);\n    setCheckedRows([]);\n  }, [dataSource, setCheckedRows, setSelectedIds]);\n\n  const showDeleteConfirm = (ids) => confirm({\n    // title: 'title',\n    content: `Are you sure to delete ${ids.length === 1 ? 'this product type?' : 'these product types'}`,\n    okText: 'Yes',\n    okType: 'primary',\n    cancelText: 'No',\n    className: 'confirm-mod',\n    onOk() {\n      dispatch(deleteData({ name: pathname.TYPE, ids }));\n    },\n  });\n  const rowSelection = {\n    onChange: (selectedRowKeys, selectedRows) => {\n      const selected = selectedRows.map((row) => row.id);\n      setSelectedIds(selected);\n      setCheckedRows(selectedRowKeys);\n    },\n    getCheckboxProps: (record) => ({\n      disabled: record.name === 'Disabled User', // Column configuration not to be checked\n      name: record.name,\n    }),\n    selectedRowKeys: checkedRows,\n  };\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      render: (_, data) => (data.langs && data.langs.length) && data.langs[0].name,\n    },\n    {\n      title: 'Edit',\n      dataIndex: 'edit',\n      render: (e, { id }) => (\n        <Icon\n          onClick={() => {\n            edit.editFetchingAction({ name: pathname.TYPE, id });\n            setShowModal(true);\n          }}\n          type=\"edit\"\n        />\n      ),\n    },\n    {\n      title: 'Delete',\n      dataIndex: 'id',\n      render: (id) => (\n        <Icon\n          onClick={() => showDeleteConfirm([id])}\n          type=\"delete\"\n        />\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <Modal\n        title=\"Create Type\"\n        visible={showCreateModal}\n        destroyOnClose\n        footer={null}\n        onCancel={() => setShowCreateModal(false)}\n      >\n        <CreateTypeForm setShowCreateModal={setShowCreateModal} />\n      </Modal>\n      <Button className=\"btn\" type=\"primary\" onClick={() => setShowCreateModal(true)}>Create</Button>\n      <Button className=\"btn\" type=\"primary\" disabled={!selectedIds.length} onClick={() => showDeleteConfirm(selectedIds)}>Delete</Button>\n      <Table\n        rowSelection={rowSelection}\n        loading={loading}\n        columns={columns}\n        dataSource={dataSource}\n        pagination={false}\n      />\n\n      <Modal\n        visible={showModal}\n        afterClose={edit.editFetchingResetAction}\n        onCancel={() => {\n          setShowModal(false);\n        }}\n        destroyOnClose\n        title=\"Edit\"\n        footer={null}\n      >\n        {!edit.data ? '...Loading' : (\n          <EditTypeForm edit={edit} setShowModal={setShowModal} />\n        )}\n      </Modal>\n    </div>\n  );\n}\n\nTypeComp.propTypes = {\n  dataSource: PropTypes.arrayOf(Array),\n  loading: PropTypes.bool,\n  edit: PropTypes.objectOf(Object).isRequired,\n};\nTypeComp.defaultProps = {\n  dataSource: [],\n  loading: false,\n};\n\nexport default TypeComp;\n","import React from 'react';\nimport { Pagination } from 'antd';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TypeComp from './components/TypeComp';\nimport pathname from '../../constants';\nimport useTableInfo from '../../hooks/useTableInfo';\nimport { getTableData, getTableDataReset } from '../../store/tables/action';\nimport { editData, editFetching, editFetchingReset } from '../../store/edit/action';\nimport { searchReset } from '../../store/search/action';\n\nfunction Type({\n  list,\n  page,\n  pages,\n  isFetching,\n  getTableDataAction,\n  getTableDataResetAction,\n  edit,\n  editFetchingAction,\n  editFetchingResetAction,\n  editDataAction,\n  searchResetAction,\n}) {\n  const { changePage } = useTableInfo(\n    pathname.TYPE,\n    getTableDataAction,\n    getTableDataResetAction,\n    searchResetAction,\n  );\n  return (\n    <div>\n      <TypeComp\n        dataSource={list}\n        loading={isFetching}\n        edit={{\n          ...edit, editFetchingAction, editFetchingResetAction, editDataAction,\n        }}\n      />\n      <Pagination onChange={changePage} current={page} total={pages * 10} />\n    </div>\n  );\n}\n\nType.propTypes = {\n  list: PropTypes.arrayOf(Array).isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  getTableDataResetAction: PropTypes.func.isRequired,\n  getTableDataAction: PropTypes.func.isRequired,\n  pages: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  edit: PropTypes.objectOf(Object).isRequired,\n  editFetchingAction: PropTypes.func.isRequired,\n  editFetchingResetAction: PropTypes.func.isRequired,\n  editDataAction: PropTypes.func.isRequired,\n  searchResetAction: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({\n  tables: {\n    list,\n    isFetching,\n    pages,\n    page,\n  },\n  edit,\n}) => ({\n  list,\n  isFetching,\n  pages,\n  page,\n  edit,\n});\nexport default connect(mapStateToProps, {\n  getTableDataAction: getTableData,\n  getTableDataResetAction: getTableDataReset,\n  editFetchingAction: editFetching,\n  editFetchingResetAction: editFetchingReset,\n  editDataAction: editData,\n  searchResetAction: searchReset,\n})(Type);\n"],"sourceRoot":""}