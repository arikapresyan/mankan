{"version":3,"sources":["hooks/useTableInfo.js","pages/mainPage/MainPage.jsx"],"names":["useTableInfo","name","getData","resetData","searchResetAction","useEffect","changePage","useCallback","newPage","page","confirm","draggingIndex","rowSource","beginDrag","props","index","DraggableBodyRow","DropTarget","drop","monitor","dragIndex","getItem","hoverIndex","moveRow","connectRow","connectDropTarget","dropTarget","isOver","DragSource","connectDragSource","dragSource","restProps","style","cursor","className","connect","list","tables","mainPage","getTableDataAction","getTableData","getTableDataResetAction","getTableDataReset","saveDragResultAction","saveDragResult","toggleSectionVisibilityAction","toggleSectionVisibility","searchReset","useState","orders","setOrders","pathname","MAIN_PAGE","data","state","setState","sort","a","b","order","drag","success","columns","title","dataIndex","key","render","_","status","id","switcher","loadingItems","checked","onChange","value","content","onOk","orderedList","dragRow","dragResult","update","$splice","components","body","row","marginLeft","marginTop","type","disabled","loading","onClick","map","item","dataSource","pagination","onRow","record"],"mappings":"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","file":"static/js/18.0c8021d3.chunk.js","sourcesContent":["import { useEffect, useCallback } from 'react';\n\n\nexport default function useTableInfo(name, getData, resetData, searchResetAction) {\n  useEffect(() => {\n    getData({ name });\n    return () => {\n      resetData({ name });\n      searchResetAction();\n    };\n  }, [getData, name, resetData, searchResetAction]);\n\n  const changePage = useCallback(\n    (newPage) => {\n      getData({ name, page: newPage });\n    },\n    [getData, name],\n  );\n  // return func\n  return { changePage };\n}\n","import React, { useState, useEffect } from 'react';\nimport {\n  Table, Switch, Spin, Modal, Button,\n} from 'antd';\nimport { DropTarget, DragSource } from 'react-dnd';\nimport update from 'immutability-helper';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport useTableInfo from '../../hooks/useTableInfo';\nimport pathname from '../../constants';\nimport { getTableData, getTableDataReset } from '../../store/tables/action';\nimport { saveDragResult, toggleSectionVisibility } from '../../store/main-page/action';\nimport { searchReset } from '../../store/search/action';\n\nconst { confirm } = Modal;\n\nlet draggingIndex = -1;\n\nconst BodyRow = (props) => {\n  const {\n    isOver, connectDragSource, connectDropTarget, moveRow, ...restProps\n  } = props;\n  const style = { ...restProps.style, cursor: 'move' };\n\n  let { className } = restProps;\n  if (isOver) {\n    if (restProps.index > draggingIndex) {\n      className += ' drop-over-downward';\n    }\n    if (restProps.index < draggingIndex) {\n      className += ' drop-over-upward';\n    }\n  }\n\n  return connectDragSource(\n    connectDropTarget(<tr {...restProps} className={className} style={style} />),\n  );\n};\nconst rowSource = {\n  beginDrag(props) {\n    draggingIndex = props.index;\n    return {\n      index: props.index,\n    };\n  },\n};\n\nconst rowTarget = {\n  drop(props, monitor) {\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index;\n\n    // Don't replace items with themselves\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    // Time to actually perform the action\n    props.moveRow(dragIndex, hoverIndex);\n\n    // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n    // eslint-disable-next-line no-param-reassign\n    monitor.getItem().index = hoverIndex;\n  },\n};\nconst DraggableBodyRow = DropTarget('row', rowTarget, (connectRow, monitor) => ({\n  connectDropTarget: connectRow.dropTarget(),\n  isOver: monitor.isOver(),\n}))(\n  DragSource('row', rowSource, (connectRow) => ({\n    connectDragSource: connectRow.dragSource(),\n  }))(BodyRow),\n);\n\n\nfunction MainPage({\n  toggleSectionVisibilityAction,\n  getTableDataResetAction,\n  saveDragResultAction,\n  getTableDataAction,\n  mainPage,\n  list,\n  searchResetAction,\n}) {\n  const [orders, setOrders] = useState(false);\n\n  useTableInfo(\n    pathname.MAIN_PAGE,\n    getTableDataAction,\n    getTableDataResetAction,\n    searchResetAction,\n  );\n  const [state, setState] = useState({ data: [] });\n  useEffect(() => {\n    setState({ data: list.sort((a, b) => a.order - b.order) });\n  }, [list]);\n\n  useEffect(() => {\n    if (mainPage.drag.success) setOrders(false);\n  }, [mainPage.drag.success, setOrders]);\n\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'names[0][name]',\n      key: 'name',\n    },\n    {\n      title: 'off-on',\n      dataIndex: 'on',\n      key: 'on',\n      render: (_, { status, id }) => (mainPage.switcher.loadingItems[id] ? <Spin /> : (\n        <Switch\n          checked={status === 'on'}\n          onChange={(value) => {\n            confirm({\n              title: `Do you Want to switch${value ? ' on' : ' off'} these items?`,\n              content: `the item will be ${value ? ' visible' : ' not visible'} in home page`,\n              onOk() { toggleSectionVisibilityAction({ id, status: value, orderedList: list }); },\n            });\n          }}\n        />\n      )),\n    },\n  ];\n  const moveRow = (dragIndex, hoverIndex) => {\n    const { data } = state;\n    const dragRow = data[dragIndex];\n    const dragResult = update(state, {\n      data: {\n        $splice: [[dragIndex, 1], [hoverIndex, 0, dragRow]],\n      },\n    });\n\n    setOrders(true);\n    setState(dragResult);\n  };\n\n\n  const components = {\n    body: {\n      row: DraggableBodyRow,\n    },\n  };\n\n  return (\n    <>\n      {orders\n      && (\n      <Button\n        style={{ marginLeft: '25px', marginTop: '25px' }}\n        type=\"primary\"\n        disabled={mainPage.drag.loading}\n        onClick={() => {\n          confirm({\n            title: 'Do you Want to new ordering  ?',\n            content: 'the orders of home page will be changed ',\n            onOk() {\n              saveDragResultAction({\n                orders:\n                state.data.map((item, index) => ({\n                  ...item,\n                  order: index + 1,\n                })),\n              });\n            },\n          });\n        }}\n      >\n          save drag result\n      </Button>\n      )}\n      <Table\n        columns={columns}\n        dataSource={state.data}\n        pagination={false}\n        components={components}\n        loading={mainPage.drag.loading}\n        onRow={(record, index) => ({\n          index,\n          moveRow,\n          key: record.key,\n        })}\n      />\n    </>\n  );\n}\n\nconst mapStateToProps = ({ tables: { list }, mainPage }) => ({ list, mainPage });\n\nMainPage.propTypes = {\n  getTableDataAction: PropTypes.func.isRequired,\n  getTableDataResetAction: PropTypes.func.isRequired,\n  toggleSectionVisibilityAction: PropTypes.func.isRequired,\n  list: PropTypes.oneOfType([\n    PropTypes.arrayOf(Array),\n    PropTypes.objectOf(Object),\n  ]).isRequired,\n  saveDragResultAction: PropTypes.func.isRequired,\n  mainPage: PropTypes.objectOf(Object).isRequired,\n  searchResetAction: PropTypes.func.isRequired,\n\n};\n\n\nexport default connect(mapStateToProps, {\n  getTableDataAction: getTableData,\n  getTableDataResetAction: getTableDataReset,\n  saveDragResultAction: saveDragResult,\n  toggleSectionVisibilityAction: toggleSectionVisibility,\n  searchResetAction: searchReset,\n})(MainPage);\n"],"sourceRoot":""}