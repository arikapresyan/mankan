{"version":3,"sources":["hooks/useTableInfo.js","pages/brand/components/brand-form/BrandForm.jsx","pages/brand/components/BrandComp.jsx","pages/brand/Brand.jsx"],"names":["useTableInfo","name","getData","resetData","searchResetAction","useEffect","changePage","useCallback","newPage","page","pathname","BRAND","BrandForm","edit","setShowModal","editMode","dispatch","useDispatch","initialValues","useMemo","brand","data","useFormik","onSubmit","values","id","editDataAction","createData","validate","val","err","handleChange","errors","touched","handleBlur","handleSubmit","isSubmitting","loading","error","Item","validateStatus","help","label","placeholder","onChange","onBlur","value","key","type","htmlType","BrandComp","dataSource","useState","showModal","showCreateModal","setShowCreateModal","checkedRows","setCheckedRows","selectedIds","setSelectedIds","confirm","showDeleteConfirm","ids","content","length","okText","okType","cancelText","className","onOk","deleteData","onCancel","rowSelection","selectedRowKeys","selectedRows","selected","map","row","getCheckboxProps","record","disabled","columns","title","dataIndex","render","_","onClick","editFetchingAction","pagination","visible","footer","destroyOnClose","afterClose","editFetchingResetAction","defaultProps","connect","tables","list","isFetching","pages","getTableDataAction","getTableData","getTableDataResetAction","getTableDataReset","editFetching","editFetchingReset","editData","searchReset","current","total"],"mappings":"2HAAA,6CAGe,SAASA,EAAaC,EAAMC,EAASC,EAAWC,GAgB7D,OAfAC,qBAAU,WAER,OADAH,EAAQ,CAAED,SACH,WACLE,EAAU,CAAEF,SACZG,OAED,CAACF,EAASD,EAAME,EAAWC,IASvB,CAAEE,WAPUC,uBACjB,SAACC,GACCN,EAAQ,CAAED,OAAMQ,KAAMD,MAExB,CAACN,EAASD,O,0NCRRA,EAAOS,IAASC,MAoEPC,MAlEf,YAAsD,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,SACjCC,EAAWC,cACXC,EAAgBC,mBAAQ,kBAAOJ,EAAW,CAAEK,MAAOP,EAAKQ,KAAKpB,MAAS,CAAEmB,MAAO,MAAO,CAACL,EAAUF,IAFpD,EAM/CS,YAAU,CACZC,SAAU,SAACC,GACT,IAAMH,EAAO,CAAEpB,KAAMuB,EAAOJ,OAC5B,GAAIL,EAAU,CAAC,IACLU,EAAOZ,EAAKQ,KAAZI,GACRZ,EAAKa,eAAe,CAAEzB,OAAMoB,OAAMI,YAElCT,EAASW,YAAW,CAAE1B,OAAMoB,UAC5BP,GAAa,IAGjBI,gBACAU,SAAU,SAACC,GACT,IAAMC,EAAM,GAIZ,OAHKD,EAAIT,QACPU,EAAIV,MAAQ,YAEPU,KAnBTN,EAJiD,EAIjDA,OAAQO,EAJyC,EAIzCA,aAAcC,EAJ2B,EAI3BA,OAAQC,EAJmB,EAInBA,QAASC,EAJU,EAIVA,WACvCC,EALiD,EAKjDA,aAAcC,EALmC,EAKnCA,aA8BhB,OARA/B,qBAAU,WACJU,IAAaF,EAAKwB,UAAYxB,EAAKyB,OAASF,GAC9CtB,GAAa,KAIjB,CAACD,IAGC,uBAAMU,SAAUY,GACd,sBAAMI,KAAN,CACEC,eAAgBP,EAAQb,OAASY,EAAOZ,OAAS,QACjDqB,KAAMR,EAAQb,OAASY,EAAOZ,MAC9BsB,MAAM,cAEN,uBACEC,YAAY,QACZ1C,KAAK,QACL2C,SAAUb,EACVc,OAAQX,EACRY,MAAOtB,EAAOJ,SAGlB,sBAAMmB,KAAN,KACE,uBAAQQ,IAAI,SAASC,KAAK,UAAUC,SAAS,UACzClC,EAAsB,OAAX,aCrDvB,SAASmC,EAAT,GAAmD,IAA9BC,EAA6B,EAA7BA,WAAYd,EAAiB,EAAjBA,QAASxB,EAAQ,EAARA,KAAQ,EACduC,oBAAS,GADK,mBACzCC,EADyC,KAC9BvC,EAD8B,OAEFsC,oBAAS,GAFP,mBAEzCE,EAFyC,KAExBC,EAFwB,OAGVH,mBAAS,IAHC,mBAGzCI,EAHyC,KAG5BC,EAH4B,OAIVL,mBAAS,IAJC,mBAIzCM,EAJyC,KAI5BC,EAJ4B,KAK1C3C,EAAWC,cACT2C,EANwC,IAMxCA,QAERvD,qBAAU,WACRsD,EAAe,IACfF,EAAe,MACd,CAACN,EAAYM,EAAgBE,IAEhC,IAAME,EAAoB,SAACC,GAAD,OAASF,EAAQ,CACzCG,QAAQ,0BAAD,OAA2C,IAAfD,EAAIE,OAAe,cAAgB,gBACtEC,OAAQ,MACRC,OAAQ,UACRC,WAAY,KACZC,UAAW,cACXC,KANyC,WAOvCrD,EAASsD,YAAW,CAAErE,KAAMS,IAASC,MAAOmD,UAE9CS,SATyC,gBAarCC,EAAe,CACnB5B,SAAU,SAAC6B,EAAiBC,GAC1B,IAAMC,EAAWD,EAAaE,KAAI,SAACC,GAAD,OAASA,EAAIpD,MAC/CkC,EAAegB,GACflB,EAAegB,IAEjBK,iBAAkB,SAACC,GAAD,MAAa,CAC7BC,SAA0B,kBAAhBD,EAAO9E,KACjBA,KAAM8E,EAAO9E,OAEfwE,gBAAiBjB,GAEbyB,EAAU,CACd,CACEC,MAAO,aACPC,UAAW,QAEb,CACED,MAAO,OACPE,OAAQ,SAACC,EAAD,OAAM5D,EAAN,EAAMA,GAAN,OACN,uBACE6D,QAAS,WACPzE,EAAK0E,mBAAmB,CAAEtF,KAAMS,IAASC,MAAOc,OAChDX,GAAa,IAEfkC,KAAK,WAIX,CACEkC,MAAO,SACPC,UAAW,KACXC,OAAQ,SAAC3D,GAAD,OACN,uBACE6D,QAAS,kBAAMzB,EAAkB,CAACpC,KAClCuB,KAAK,cAWb,OALA3C,qBAAU,WACJQ,EAAKyB,QAAUzB,EAAKQ,MAAMP,GAAa,KAE7C,CAACD,EAAKQ,KAAMR,EAAKyB,QAGf,6BACE,uBAAQ8B,UAAU,MAAMpB,KAAK,UAAUsC,QAAS,kBAAM/B,GAAmB,KAAzE,UACA,uBAAQa,UAAU,MAAMpB,KAAK,UAAUgC,UAAWtB,EAAYM,OAAQsB,QAAS,kBAAMzB,EAAkBH,KAAvG,UACA,kBAAC,IAAD,CACEc,aAAcA,EACdS,QAASA,EACT9B,WAAYA,EACZqC,YAAY,EACZnD,QAASA,IAGX,uBACEoD,QAASpC,EACTkB,SAAU,kBAAMzD,GAAa,IAC7BoE,MAAM,OACNQ,OAAQ,KACRC,gBAAc,EACdC,WAAY,WACV9E,GAAa,GACbD,EAAKgF,4BAGLhF,EAAKQ,KACL,kBAAC,EAAD,CAAWR,KAAMA,EAAMC,aAAcA,EAAcC,UAAQ,IAD/C,cAIhB,uBACEmE,MAAM,SACNO,QAASnC,EACTiB,SAAU,kBAAMhB,GAAmB,IACnCoC,gBAAc,EACdD,OAAQ,MAER,kBAAC,EAAD,CAAW5E,aAAcyC,MAWjCL,EAAU4C,aAAe,CACvB3C,WAAY,GACZd,SAAS,GAGIa,Q,yBC1DA6C,uBAfS,SAAC,GAAD,QACtBC,OADsB,MAQjB,CACLC,KATsB,EAEpBA,KAQFC,WAVsB,EAGpBA,WAQFC,MAXsB,EAIpBA,MAQF1F,KAZsB,EAKpBA,KAQFI,KAbsB,EAOtBA,QAQsC,CACtCuF,mBAAoBC,IACpBC,wBAAyBC,IACzBhB,mBAAoBiB,IACpBX,wBAAyBY,IACzB/E,eAAgBgF,IAChBtG,kBAAmBuG,KANNZ,EA9Df,YAYI,IAXFE,EAWC,EAXDA,KACAxF,EAUC,EAVDA,KACA0F,EASC,EATDA,MACAD,EAQC,EARDA,WACAE,EAOC,EAPDA,mBACAE,EAMC,EANDA,wBACAzF,EAKC,EALDA,KACA0E,EAIC,EAJDA,mBACAM,EAGC,EAHDA,wBACAnE,EAEC,EAFDA,eACAtB,EACC,EADDA,kBAEQE,EAAeN,YACrBU,IAASC,MACTyF,EACAE,EACAlG,GAJME,WAMR,OACE,6BACE,kBAAC,EAAD,CACE6C,WAAY8C,EACZ5D,QAAS6D,EACTrF,KAAI,eACCA,EADD,CACO0E,qBAAoBM,0BAAyBnE,qBAG1D,uBAAYkB,SAAUtC,EAAYsG,QAASnG,EAAMoG,MAAe,GAARV","file":"static/js/15.6e43d09c.chunk.js","sourcesContent":["import { useEffect, useCallback } from 'react';\n\n\nexport default function useTableInfo(name, getData, resetData, searchResetAction) {\n  useEffect(() => {\n    getData({ name });\n    return () => {\n      resetData({ name });\n      searchResetAction();\n    };\n  }, [getData, name, resetData, searchResetAction]);\n\n  const changePage = useCallback(\n    (newPage) => {\n      getData({ name, page: newPage });\n    },\n    [getData, name],\n  );\n  // return func\n  return { changePage };\n}\n","import React, { useEffect, useMemo } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useFormik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport pathname from '../../../../constants';\nimport { createData } from '../../../../store/edit/action';\n\nconst name = pathname.BRAND;\n\nfunction BrandForm({ edit, setShowModal, editMode }) {\n  const dispatch = useDispatch();\n  const initialValues = useMemo(() => (editMode ? { brand: edit.data.name } : { brand: '' }), [editMode, edit]);\n  const {\n    values, handleChange, errors, touched, handleBlur,\n    handleSubmit, isSubmitting,\n  } = useFormik({\n    onSubmit: (values) => {\n      const data = { name: values.brand };\n      if (editMode) {\n        const { id } = edit.data;\n        edit.editDataAction({ name, data, id });\n      } else {\n        dispatch(createData({ name, data }));\n        setShowModal(false);\n      }\n    },\n    initialValues,\n    validate: (val) => {\n      const err = {};\n      if (!val.brand) {\n        err.brand = 'Required';\n      }\n      return err;\n    },\n  });\n\n  useEffect(() => {\n    if (editMode && !edit.loading && !edit.error && isSubmitting) {\n      setShowModal(false);\n    }\n  },\n  // eslint-disable-next-line\n  [edit]);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Item\n        validateStatus={touched.brand && errors.brand && 'error'}\n        help={touched.brand && errors.brand}\n        label=\"Brand Name\"\n      >\n        <Input\n          placeholder=\"brand\"\n          name=\"brand\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.brand}\n        />\n      </Form.Item>\n      <Form.Item>\n        <Button key=\"submit\" type=\"primary\" htmlType=\"submit\">\n          {!editMode ? 'Create' : 'Save'}\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nBrandForm.propTypes = {\n  edit: PropTypes.object,\n  setShowModal: PropTypes.func,\n  editMode: PropTypes.bool,\n};\n\n\nexport default BrandForm;\n","import React, { useEffect, useState } from 'react';\nimport { Icon, Button, Modal } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Table } from '../../../components';\nimport { deleteData } from '../../../store/edit/action';\nimport pathname from '../../../constants';\nimport BrandForm from './brand-form/BrandForm';\n\nfunction BrandComp({ dataSource, loading, edit }) {\n  const [showModal, setShowModal] = useState(false);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [checkedRows, setCheckedRows] = useState([]);\n  const [selectedIds, setSelectedIds] = useState([]);\n  const dispatch = useDispatch();\n  const { confirm } = Modal;\n\n  useEffect(() => {\n    setSelectedIds([]);\n    setCheckedRows([]);\n  }, [dataSource, setCheckedRows, setSelectedIds]);\n\n  const showDeleteConfirm = (ids) => confirm({\n    content: `Are you sure to delete ${ids.length === 1 ? 'this brand?' : 'these brands'}`,\n    okText: 'Yes',\n    okType: 'primary',\n    cancelText: 'No',\n    className: 'confirm-mod',\n    onOk() {\n      dispatch(deleteData({ name: pathname.BRAND, ids }));\n    },\n    onCancel() {\n    },\n  });\n\n  const rowSelection = {\n    onChange: (selectedRowKeys, selectedRows) => {\n      const selected = selectedRows.map((row) => row.id);\n      setSelectedIds(selected);\n      setCheckedRows(selectedRowKeys);\n    },\n    getCheckboxProps: (record) => ({\n      disabled: record.name === 'Disabled User', // Column configuration not to be checked\n      name: record.name,\n    }),\n    selectedRowKeys: checkedRows,\n  };\n  const columns = [\n    {\n      title: 'Brand name',\n      dataIndex: 'name',\n    },\n    {\n      title: 'Edit',\n      render: (_, { id }) => (\n        <Icon\n          onClick={() => {\n            edit.editFetchingAction({ name: pathname.BRAND, id });\n            setShowModal(true);\n          }}\n          type=\"edit\"\n        />\n      ),\n    },\n    {\n      title: 'Delete',\n      dataIndex: 'id',\n      render: (id) => (\n        <Icon\n          onClick={() => showDeleteConfirm([id])}\n          type=\"delete\"\n        />\n      ),\n    },\n  ];\n\n  useEffect(() => {\n    if (edit.error && !edit.data) setShowModal(false);\n  },\n  [edit.data, edit.error]);\n\n  return (\n    <div>\n      <Button className=\"btn\" type=\"primary\" onClick={() => setShowCreateModal(true)}>Create</Button>\n      <Button className=\"btn\" type=\"primary\" disabled={!selectedIds.length} onClick={() => showDeleteConfirm(selectedIds)}>Delete</Button>\n      <Table\n        rowSelection={rowSelection}\n        columns={columns}\n        dataSource={dataSource}\n        pagination={false}\n        loading={loading}\n      />\n\n      <Modal\n        visible={showModal}\n        onCancel={() => setShowModal(false)}\n        title=\"Edit\"\n        footer={null}\n        destroyOnClose\n        afterClose={() => {\n          setShowModal(false);\n          edit.editFetchingResetAction();\n        }}\n      >\n        {!edit.data ? '...Loading' : (\n          <BrandForm edit={edit} setShowModal={setShowModal} editMode />\n        )}\n      </Modal>\n      <Modal\n        title=\"Create\"\n        visible={showCreateModal}\n        onCancel={() => setShowCreateModal(false)}\n        destroyOnClose\n        footer={null}\n      >\n        <BrandForm setShowModal={setShowCreateModal} />\n      </Modal>\n    </div>\n  );\n}\n\nBrandComp.propTypes = {\n  dataSource: PropTypes.arrayOf(Array),\n  loading: PropTypes.bool,\n  edit: PropTypes.objectOf(Object).isRequired,\n};\nBrandComp.defaultProps = {\n  dataSource: [],\n  loading: false,\n};\n\nexport default BrandComp;\n","import React from 'react';\nimport { Pagination } from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport BrandComp from './components/BrandComp';\nimport useTableInfo from '../../hooks/useTableInfo';\nimport pathname from '../../constants';\nimport { getTableData, getTableDataReset } from '../../store/tables/action';\nimport { editData, editFetching, editFetchingReset } from '../../store/edit/action';\nimport { searchReset } from '../../store/search/action';\n\nfunction Brand({\n  list,\n  page,\n  pages,\n  isFetching,\n  getTableDataAction,\n  getTableDataResetAction,\n  edit,\n  editFetchingAction,\n  editFetchingResetAction,\n  editDataAction,\n  searchResetAction,\n}) {\n  const { changePage } = useTableInfo(\n    pathname.BRAND,\n    getTableDataAction,\n    getTableDataResetAction,\n    searchResetAction,\n  );\n  return (\n    <div>\n      <BrandComp\n        dataSource={list}\n        loading={isFetching}\n        edit={{\n          ...edit, editFetchingAction, editFetchingResetAction, editDataAction,\n        }}\n      />\n      <Pagination onChange={changePage} current={page} total={pages * 10} />\n    </div>\n  );\n}\n\nBrand.propTypes = {\n  list: PropTypes.arrayOf(Array).isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  getTableDataResetAction: PropTypes.func.isRequired,\n  getTableDataAction: PropTypes.func.isRequired,\n  pages: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  edit: PropTypes.objectOf(Object).isRequired,\n  editFetchingAction: PropTypes.func.isRequired,\n  editFetchingResetAction: PropTypes.func.isRequired,\n  editDataAction: PropTypes.func.isRequired,\n  searchResetAction: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({\n  tables: {\n    list,\n    isFetching,\n    pages,\n    page,\n  },\n  edit,\n}) => ({\n  list,\n  isFetching,\n  pages,\n  page,\n  edit,\n});\nexport default connect(mapStateToProps, {\n  getTableDataAction: getTableData,\n  getTableDataResetAction: getTableDataReset,\n  editFetchingAction: editFetching,\n  editFetchingResetAction: editFetchingReset,\n  editDataAction: editData,\n  searchResetAction: searchReset,\n})(Brand);\n"],"sourceRoot":""}