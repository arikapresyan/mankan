{"version":3,"sources":["hooks/useTableInfo.js","pages/type/constants.js","pages/filter/components/filter-form/FilterForm.jsx","pages/filter/components/FilterComp.jsx","pages/filter/Filter.jsx"],"names":["useTableInfo","name","getData","resetData","searchResetAction","useEffect","changePage","useCallback","newPage","page","typeSchema","Yup","shape","arm","required","TabPane","pathname","FILTER","FilterForm","edit","setShowModal","editMode","dispatch","useDispatch","initialValues","useMemo","data","ARM","RU","ENG","ru","eng","useFormik","onSubmit","names","lang","values","id","editData","createData","validationSchema","touched","errors","handleSubmit","handleChange","defaultActiveKey","className","tab","key","Item","validateStatus","help","placeholder","value","onChange","htmlType","type","defaultProps","FilterComp","dataSource","loading","useState","showModal","showCreateModal","setShowCreateModal","checkedRows","setCheckedRows","selectedIds","setSelectedIds","confirm","showDeleteConfirm","ids","content","length","okText","okType","cancelText","onOk","deleteData","onCancel","rowSelection","selectedRowKeys","selectedRows","selected","map","row","getCheckboxProps","record","disabled","columns","title","render","_","langs","onClick","editFetchingAction","dataIndex","pagination","visible","footer","destroyOnClose","afterClose","editFetchingResetAction","connect","tables","list","isFetching","pages","getTableDataAction","getTableData","getTableDataResetAction","getTableDataReset","editFetching","editFetchingReset","editDataAction","searchReset","current","total"],"mappings":"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","file":"static/js/13.9d325b0b.chunk.js","sourcesContent":["import { useEffect, useCallback } from 'react';\n\n\nexport default function useTableInfo(name, getData, resetData, searchResetAction) {\n  useEffect(() => {\n    getData({ name });\n    return () => {\n      resetData({ name });\n      searchResetAction();\n    };\n  }, [getData, name, resetData, searchResetAction]);\n\n  const changePage = useCallback(\n    (newPage) => {\n      getData({ name, page: newPage });\n    },\n    [getData, name],\n  );\n  // return func\n  return { changePage };\n}\n","import * as Yup from 'yup';\n\nexport const typeSchema = Yup.object().shape({\n  arm: Yup.string().required('Armenian is required'),\n});\n","import React, { useMemo } from 'react';\nimport {\n  Input, Form, Tabs, Button,\n} from 'antd';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport pathname from '../../../../constants';\nimport { typeSchema } from '../../../type/constants';\nimport { createData, editData } from '../../../../store/edit/action';\n\nconst { TabPane } = Tabs;\nconst name = pathname.FILTER;\n\nfunction FilterForm({ edit, setShowModal, editMode }) {\n  const dispatch = useDispatch();\n  const initialValues = useMemo(() => {\n    if (editMode) {\n      const { ARM, RU, ENG } = edit.data;\n      return {\n        arm: ARM.name,\n        ru: RU.name,\n        eng: ENG.name,\n      };\n    }\n    return {\n      arm: '',\n      ru: '',\n      eng: '',\n    };\n  }, [editMode, edit]);\n\n  const {\n    values, touched, errors, handleSubmit, handleChange,\n  } = useFormik({\n    initialValues,\n    onSubmit: () => {\n      const data = {\n        names: [\n          {\n            lang: 'ARM',\n            name: values.arm,\n          }, {\n            lang: 'RU',\n            name: values.ru || values.arm,\n          }, {\n            lang: 'ENG',\n            name: values.eng || values.arm,\n          },\n        ],\n      };\n      if (editMode) {\n        const { id } = edit.data;\n        dispatch(editData({ name, data, id }));\n      } else {\n        dispatch(createData({ name, data }));\n        setShowModal(false);\n      }\n    },\n    validationSchema: typeSchema,\n  });\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Tabs defaultActiveKey=\"1\" className=\"modalTab\">\n        <TabPane tab=\"Arm /\" key=\"1\">\n          <Form.Item\n            validateStatus={touched.arm && errors.arm && 'error'}\n            help={touched.arm && errors.arm}\n          >\n            <Input\n              placeholder=\"Name\"\n              name=\"arm\"\n              value={values.arm}\n              onChange={handleChange}\n            />\n          </Form.Item>\n        </TabPane>\n        <TabPane tab=\"Ru /\" key=\"2\">\n          <Form.Item\n            validateStatus={touched.arm && errors.arm && 'error'}\n            help={touched.arm && errors.arm}\n          >\n            <Input\n              placeholder=\"Name\"\n              name=\"ru\"\n              value={values.ru}\n              onChange={handleChange}\n            />\n          </Form.Item>\n        </TabPane>\n        <TabPane tab=\"Eng\" key=\"3\">\n          <Form.Item\n            validateStatus={touched.arm && errors.arm && 'error'}\n            help={touched.arm && errors.arm}\n          >\n            <Input\n              placeholder=\"Name\"\n              name=\"eng\"\n              value={values.eng}\n              onChange={handleChange}\n            />\n          </Form.Item>\n        </TabPane>\n      </Tabs>\n      <Form.Item>\n        <Button key=\"submit\" htmlType=\"submit\" type=\"primary\">\n          Save\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\nFilterForm.defaultProps = {\n  edit: null,\n  editMode: false,\n};\n\nFilterForm.propTypes = {\n  edit: PropTypes.oneOfType([PropTypes.object, PropTypes.oneOf([null])]),\n  setShowModal: PropTypes.func.isRequired,\n  editMode: PropTypes.bool,\n};\n\nexport default FilterForm;\n","import React, { useEffect, useState } from 'react';\nimport { Icon, Button, Modal } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport { Table } from '../../../components';\nimport { deleteData } from '../../../store/edit/action';\nimport pathname from '../../../constants';\nimport FilterForm from './filter-form/FilterForm';\n\n\nfunction FilterComp({ dataSource, loading, edit }) {\n  const [showModal, setShowModal] = useState(false);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [checkedRows, setCheckedRows] = useState([]);\n  const [selectedIds, setSelectedIds] = useState([]);\n  const dispatch = useDispatch();\n  const { confirm } = Modal;\n\n  useEffect(() => {\n    setSelectedIds([]);\n    setCheckedRows([]);\n  }, [dataSource, setCheckedRows, setSelectedIds]);\n\n  const showDeleteConfirm = (ids) => confirm({\n    content: `Are you sure to delete ${ids.length === 1 ? 'this extra-filter?' : 'these extra-filters'}`,\n    okText: 'Yes',\n    okType: 'primary',\n    cancelText: 'No',\n    className: 'confirm-mod',\n    onOk() {\n      dispatch(deleteData({ name: pathname.FILTER, ids }));\n    },\n    onCancel() {\n    },\n  });\n\n  const rowSelection = {\n    onChange: (selectedRowKeys, selectedRows) => {\n      const selected = selectedRows.map((row) => row.id);\n      setSelectedIds(selected);\n      setCheckedRows(selectedRowKeys);\n    },\n    getCheckboxProps: (record) => ({\n      disabled: record.name === 'Disabled User', // Column configuration not to be checked\n      name: record.name,\n    }),\n    selectedRowKeys: checkedRows,\n  };\n  const columns = [\n    {\n      title: 'name',\n      render: (_, data) => (data.langs && data.langs.length) && data.langs[0].name,\n    },\n    {\n      title: 'Edit',\n      render: (_, { id }) => (\n        <Icon\n          onClick={() => {\n            edit.editFetchingAction({ name: pathname.FILTER, id });\n            setShowModal(true);\n          }}\n          type=\"edit\"\n        />\n      ),\n    },\n    {\n      title: 'Delete',\n      dataIndex: 'id',\n      render: (id) => (\n        <Icon\n          onClick={() => showDeleteConfirm([id])}\n          type=\"delete\"\n        />\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <Button className=\"btn\" type=\"primary\" onClick={() => setShowCreateModal(true)}>Create</Button>\n      <Button className=\"btn\" type=\"primary\" disabled={!selectedIds.length} onClick={() => showDeleteConfirm(selectedIds)}>Delete</Button>\n      <Table\n        rowSelection={rowSelection}\n        columns={columns}\n        dataSource={dataSource}\n        pagination={false}\n        loading={loading}\n      />\n      <Modal\n        visible={showModal}\n        onCancel={() => setShowModal(false)}\n        title=\"Edit\"\n        footer={null}\n        destroyOnClose\n        afterClose={edit.editFetchingResetAction}\n      >\n        {!edit.data ? '...Loading' : (\n          <FilterForm\n            edit={edit}\n            setShowModal={setShowModal}\n            editMode\n          />\n        )}\n      </Modal>\n\n      <Modal\n        title=\"Create\"\n        visible={showCreateModal}\n        onCancel={() => setShowCreateModal(false)}\n        destroyOnClose\n        footer={null}\n      >\n        <FilterForm setShowModal={setShowCreateModal} editMode={false} />\n      </Modal>\n    </div>\n  );\n}\n\nexport default FilterComp;\n","import React from 'react';\nimport { Pagination } from 'antd';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport FilterComp from './components/FilterComp';\nimport useTableInfo from '../../hooks/useTableInfo';\nimport pathname from '../../constants';\nimport { getTableData, getTableDataReset } from '../../store/tables/action';\nimport { editData, editFetching, editFetchingReset } from '../../store/edit/action';\nimport { searchReset } from '../../store/search/action';\n\nfunction Filter({\n  list,\n  page,\n  pages,\n  isFetching,\n  getTableDataAction,\n  getTableDataResetAction,\n  edit,\n  editFetchingAction,\n  editFetchingResetAction,\n  editDataAction,\n  searchResetAction,\n}) {\n  const { changePage } = useTableInfo(\n    pathname.FILTER,\n    getTableDataAction,\n    getTableDataResetAction,\n    searchResetAction,\n  );\n  return (\n    <div>\n      <FilterComp\n        dataSource={list}\n        loading={isFetching}\n        edit={{\n          ...edit, editFetchingAction, editFetchingResetAction, editDataAction,\n        }}\n      />\n      <Pagination onChange={changePage} current={page} total={pages * 10} />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  list: PropTypes.arrayOf(Array).isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  getTableDataResetAction: PropTypes.func.isRequired,\n  getTableDataAction: PropTypes.func.isRequired,\n  pages: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  edit: PropTypes.objectOf(Object).isRequired,\n  editFetchingAction: PropTypes.func.isRequired,\n  editFetchingResetAction: PropTypes.func.isRequired,\n  editDataAction: PropTypes.func.isRequired,\n  searchResetAction: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({\n  tables: {\n    list,\n    isFetching,\n    pages,\n    page,\n  },\n  edit,\n}) => ({\n  list,\n  isFetching,\n  pages,\n  page,\n  edit,\n});\nexport default connect(mapStateToProps, {\n  getTableDataAction: getTableData,\n  getTableDataResetAction: getTableDataReset,\n  editFetchingAction: editFetching,\n  editFetchingResetAction: editFetchingReset,\n  editDataAction: editData,\n  searchResetAction: searchReset,\n})(Filter);\n"],"sourceRoot":""}